{"2":{"1":[{"1":"goog.dom.query","5":{"1":"third_party/closure/goog/dojo/dom/query.js","2":211,"3":"https://github.com/google/closure-library/blob/master/third_party/closure/goog/dojo/dom/query.js#L211"},"7":{"1":[{"2":"<p>Returns nodes which match the given CSS3 selector, searching the\nentire document by default but optionally taking a node to scope\nthe search by.</p>\n<p>dojo.query() is the swiss army knife of DOM node manipulation in\nDojo. Much like Prototype&#39;s &#34;$$&#34; (bling-bling) function or JQuery&#39;s\n&#34;$&#34; function, dojo.query provides robust, high-performance\nCSS-based node selector support with the option of scoping searches\nto a particular sub-tree of a document.</p>\n<h2>Supported Selectors:</h2>\n<p>dojo.query() supports a rich set of CSS3 selectors, including:</p>\n<ul><li>class selectors (e.g., <code>.foo</code>)</li><li>node type selectors like <code>span</code></li><li><code></code> descendant selectors</li><li><code>&gt;</code> child element selectors</li><li><code>#foo</code> style ID selectors</li><li><code>*</code> universal selector</li><li><code>~</code>, the immediately preceded-by sibling selector</li><li><code>&#43;</code>, the preceded-by sibling selector</li><li>attribute queries:\n<ul><li><code>[foo]</code> attribute presence selector</li><li><code>[foo&#61;&#39;bar&#39;]</code> attribute value exact match</li><li><code>[foo~&#61;&#39;bar&#39;]</code> attribute value list item match</li><li><code>[foo^&#61;&#39;bar&#39;]</code> attribute start match</li><li><code>[foo$&#61;&#39;bar&#39;]</code> attribute end match</li><li><code>[foo*&#61;&#39;bar&#39;]</code> attribute substring match</li></ul>\n</li><li><code>:first-child</code>, <code>:last-child</code> positional selectors</li><li><code>:empty</code> content empty selector</li><li><code>:empty</code> content empty selector</li><li><code>:nth-child(n)</code>, <code>:nth-child(2n&#43;1)</code> style positional calculations</li><li><code>:nth-child(even)</code>, <code>:nth-child(odd)</code> positional selectors</li><li><code>:not(...)</code> negation pseudo selectors</li></ul>\n<p>Any legal combination of these selectors will work with\n<code>dojo.query()</code>, including compound selectors (&#34;,&#34; delimited).\nVery complex and useful searches can be constructed with this\npalette of selectors.</p>\n<h2>Unsupported Selectors:</h2>\n<p>While dojo.query handles many CSS3 selectors, some fall outside of\nwhat&#39;s reasonable for a programmatic node querying engine to\nhandle. Currently unsupported selectors include:</p>\n<ul><li>namespace-differentiated selectors of any form</li><li>all <code>::</code> pseudo-element selectors</li><li>certain pseudo-selectors which don&#39;t get a lot of day-to-day use:\n<ul><li><code>:root</code>, <code>:lang()</code>, <code>:target</code>, <code>:focus</code></li></ul>\n</li><li>all visual and state selectors:\n<ul><li><code>:root</code>, <code>:active</code>, <code>:hover</code>, <code>:visited</code>, <code>:link</code>,\n<code>:enabled</code>, <code>:disabled</code>, <code>:checked</code></li></ul>\n</li><li><code>:*-of-type</code> pseudo selectors</li></ul>\n<h2>dojo.query and XML Documents:</h2>\n<p><code>dojo.query</code> currently only supports searching XML documents\nwhose tags and attributes are 100% lower-case. This is a known\nlimitation and will [be addressed soon]\n(http://trac.dojotoolkit.org/ticket/3866)</p>\n<h2>Non-selector Queries:</h2>\n<p>If something other than a String is passed for the query,\n<code>dojo.query</code> will return a new array constructed from\nthat parameter alone and all further processing will stop. This\nmeans that if you have a reference to a node or array or nodes, you\ncan quickly construct a new array of nodes from the original by\ncalling <code>dojo.query(node)</code> or <code>dojo.query(array)</code>.</p>\n<p><strong>Example:</strong> search the entire document for elements with the class &#34;foo&#34;:</p>\n<pre><code>dojo.query(&#34;.foo&#34;);\n</code></pre>\n<p>these elements will match:</p>\n<pre><code>&lt;span class&#61;&#34;foo&#34;&gt;&lt;/span&gt;\n&lt;span class&#61;&#34;foo bar&#34;&gt;&lt;/span&gt;\n&lt;p class&#61;&#34;thud foo&#34;&gt;&lt;/p&gt;\n</code></pre>\n<p><strong>Example:</strong> search the entire document for elements with the classes &#34;foo&#34;\n<em>and</em> &#34;bar&#34;:</p>\n<pre><code>dojo.query(&#34;.foo.bar&#34;);\n</code></pre>\n<p>these elements will match:</p>\n<pre><code>&lt;span class&#61;&#34;foo bar&#34;&gt;&lt;/span&gt;\n</code></pre>\n<p>while these will not:</p>\n<pre><code>&lt;span class&#61;&#34;foo&#34;&gt;&lt;/span&gt;\n&lt;p class&#61;&#34;thud foo&#34;&gt;&lt;/p&gt;\n</code></pre>\n<p><strong>Example:</strong> find <code>&lt;span&gt;</code> elements which are descendants of paragraphs and\nwhich have a &#34;highlighted&#34; class:</p>\n<pre><code>dojo.query(&#34;p span.highlighted&#34;);\n</code></pre>\n<p>the innermost span in this fragment matches:</p>\n<pre><code>&lt;p class&#61;&#34;foo&#34;&gt;\n  &lt;span&gt;...\n    &lt;span class&#61;&#34;highlighted foo bar&#34;&gt;...&lt;/span&gt;\n  &lt;/span&gt;\n&lt;/p&gt;\n</code></pre>\n<p><strong>Example:</strong> find all odd table rows inside of the table <code>#tabular_data</code>,\nusing the <code>&gt;</code> (direct child) selector to avoid affecting any nested tables:</p>\n<pre><code>dojo.query(&#34;#tabular_data &gt; tbody &gt; tr:nth-child(odd)&#34;);\n</code></pre>\n"}]},"8":{"2":true},"9":{"1":[{"2":"<p>This is an all-software query selector. Use\ndocument.querySelector. See\nhttps://developer.mozilla.org/en-US/docs/DOM/Document.querySelector .</p>\n"}]},"14":{"1":{"1":"query","2":{"1":"third_party/closure/goog/dojo/dom/query.js","2":211,"3":"https://github.com/google/closure-library/blob/master/third_party/closure/goog/dojo/dom/query.js#L211"},"3":{"1":[{"2":"<p>Returns nodes which match the given CSS3 selector, searching the\nentire document by default but optionally taking a node to scope\nthe search by.</p>\n<p>dojo.query() is the swiss army knife of DOM node manipulation in\nDojo. Much like Prototype&#39;s &#34;$$&#34; (bling-bling) function or JQuery&#39;s\n&#34;$&#34; function, dojo.query provides robust, high-performance\nCSS-based node selector support with the option of scoping searches\nto a particular sub-tree of a document.</p>\n<h2>Supported Selectors:</h2>\n<p>dojo.query() supports a rich set of CSS3 selectors, including:</p>\n<ul><li>class selectors (e.g., <code>.foo</code>)</li><li>node type selectors like <code>span</code></li><li><code></code> descendant selectors</li><li><code>&gt;</code> child element selectors</li><li><code>#foo</code> style ID selectors</li><li><code>*</code> universal selector</li><li><code>~</code>, the immediately preceded-by sibling selector</li><li><code>&#43;</code>, the preceded-by sibling selector</li><li>attribute queries:\n<ul><li><code>[foo]</code> attribute presence selector</li><li><code>[foo&#61;&#39;bar&#39;]</code> attribute value exact match</li><li><code>[foo~&#61;&#39;bar&#39;]</code> attribute value list item match</li><li><code>[foo^&#61;&#39;bar&#39;]</code> attribute start match</li><li><code>[foo$&#61;&#39;bar&#39;]</code> attribute end match</li><li><code>[foo*&#61;&#39;bar&#39;]</code> attribute substring match</li></ul>\n</li><li><code>:first-child</code>, <code>:last-child</code> positional selectors</li><li><code>:empty</code> content empty selector</li><li><code>:empty</code> content empty selector</li><li><code>:nth-child(n)</code>, <code>:nth-child(2n&#43;1)</code> style positional calculations</li><li><code>:nth-child(even)</code>, <code>:nth-child(odd)</code> positional selectors</li><li><code>:not(...)</code> negation pseudo selectors</li></ul>\n<p>Any legal combination of these selectors will work with\n<code>dojo.query()</code>, including compound selectors (&#34;,&#34; delimited).\nVery complex and useful searches can be constructed with this\npalette of selectors.</p>\n<h2>Unsupported Selectors:</h2>\n<p>While dojo.query handles many CSS3 selectors, some fall outside of\nwhat&#39;s reasonable for a programmatic node querying engine to\nhandle. Currently unsupported selectors include:</p>\n<ul><li>namespace-differentiated selectors of any form</li><li>all <code>::</code> pseudo-element selectors</li><li>certain pseudo-selectors which don&#39;t get a lot of day-to-day use:\n<ul><li><code>:root</code>, <code>:lang()</code>, <code>:target</code>, <code>:focus</code></li></ul>\n</li><li>all visual and state selectors:\n<ul><li><code>:root</code>, <code>:active</code>, <code>:hover</code>, <code>:visited</code>, <code>:link</code>,\n<code>:enabled</code>, <code>:disabled</code>, <code>:checked</code></li></ul>\n</li><li><code>:*-of-type</code> pseudo selectors</li></ul>\n<h2>dojo.query and XML Documents:</h2>\n<p><code>dojo.query</code> currently only supports searching XML documents\nwhose tags and attributes are 100% lower-case. This is a known\nlimitation and will [be addressed soon]\n(http://trac.dojotoolkit.org/ticket/3866)</p>\n<h2>Non-selector Queries:</h2>\n<p>If something other than a String is passed for the query,\n<code>dojo.query</code> will return a new array constructed from\nthat parameter alone and all further processing will stop. This\nmeans that if you have a reference to a node or array or nodes, you\ncan quickly construct a new array of nodes from the original by\ncalling <code>dojo.query(node)</code> or <code>dojo.query(array)</code>.</p>\n<p><strong>Example:</strong> search the entire document for elements with the class &#34;foo&#34;:</p>\n<pre><code>dojo.query(&#34;.foo&#34;);\n</code></pre>\n<p>these elements will match:</p>\n<pre><code>&lt;span class&#61;&#34;foo&#34;&gt;&lt;/span&gt;\n&lt;span class&#61;&#34;foo bar&#34;&gt;&lt;/span&gt;\n&lt;p class&#61;&#34;thud foo&#34;&gt;&lt;/p&gt;\n</code></pre>\n<p><strong>Example:</strong> search the entire document for elements with the classes &#34;foo&#34;\n<em>and</em> &#34;bar&#34;:</p>\n<pre><code>dojo.query(&#34;.foo.bar&#34;);\n</code></pre>\n<p>these elements will match:</p>\n<pre><code>&lt;span class&#61;&#34;foo bar&#34;&gt;&lt;/span&gt;\n</code></pre>\n<p>while these will not:</p>\n<pre><code>&lt;span class&#61;&#34;foo&#34;&gt;&lt;/span&gt;\n&lt;p class&#61;&#34;thud foo&#34;&gt;&lt;/p&gt;\n</code></pre>\n<p><strong>Example:</strong> find <code>&lt;span&gt;</code> elements which are descendants of paragraphs and\nwhich have a &#34;highlighted&#34; class:</p>\n<pre><code>dojo.query(&#34;p span.highlighted&#34;);\n</code></pre>\n<p>the innermost span in this fragment matches:</p>\n<pre><code>&lt;p class&#61;&#34;foo&#34;&gt;\n  &lt;span&gt;...\n    &lt;span class&#61;&#34;highlighted foo bar&#34;&gt;...&lt;/span&gt;\n  &lt;/span&gt;\n&lt;/p&gt;\n</code></pre>\n<p><strong>Example:</strong> find all odd table rows inside of the table <code>#tabular_data</code>,\nusing the <code>&gt;</code> (direct child) selector to avoid affecting any nested tables:</p>\n<pre><code>dojo.query(&#34;#tabular_data &gt; tbody &gt; tr:nth-child(odd)&#34;);\n</code></pre>\n"}]},"4":{"1":[{"2":"<p>This is an all-software query selector. Use\ndocument.querySelector. See\nhttps://developer.mozilla.org/en-US/docs/DOM/Document.querySelector .</p>\n"}]},"6":{"2":true}},"4":[{"1":"query","2":{"6":{"1":[{"4":{"1":"string","4":true}},{"4":{"1":"Array","4":true}},{"10":true}]}},"3":{"1":[{"2":"<p>The CSS3 expression to match against.\nFor details on the syntax of CSS3 selectors, see\nhttp://www.w3.org/TR/css3-selectors/#selectors.</p>\n"}]}},{"1":"opt_root","2":{"1":true,"6":{"1":[{"4":{"1":"string","4":true}},{"4":{"1":"Node"}},{"10":true},{"9":true}]}},"3":{"1":[{"2":"<p>A Node (or node id) to scope the search\nfrom (optional).</p>\n"}]}}],"5":{"2":{"5":{"1":[{"1":"length","2":{"4":{"1":"number","4":true}}}]}},"3":{"1":[{"2":"<p>The elements that matched the query.</p>\n"}]}}},"21":{"1":{"1":"goog.dom.query","3":{"1":"goog.dom.query.html"}},"2":4},"23":"goog.dom.query.html","24":"goog.dom.query"}]}}