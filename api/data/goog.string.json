{"2":{"1":[{"1":"goog.string","5":{"1":"closure/goog/string/string.js","2":24,"3":"https://github.com/google/closure-library/blob/master/closure/goog/string/string.js#L24"},"6":{"1":[{"1":"Const","2":"goog.string.Const.html","3":{"1":[{"2":"<p>Wrapper for compile-time-constant strings.</p>\n"}]}},{"1":"StringBuffer","2":"goog.string.StringBuffer.html","3":{"1":[{"2":"<p>Utility class to facilitate string concatenation.</p>\n"}]}}],"2":[{"1":"Unicode","2":"goog.string.Unicode.html","3":{"1":[{"2":"<p>Common Unicode string characters.</p>\n"}]}}],"3":[{"1":"Parser","2":"goog.string.Parser.html","3":{"1":[{"2":"<p>An interface for parsing strings into objects.</p>\n"}]},"4":{"5":true}},{"1":"Stringifier","2":"goog.string.Stringifier.html","3":{"1":[{"2":"<p>An interface for serializing objects into strings.</p>\n"}]},"4":{"5":true}},{"1":"TypedString","2":"goog.string.TypedString.html","3":{"1":[{"2":"<p>Wrapper for strings that conform to a data type or language.</p>\n"}]},"4":{"5":true}}]},"7":{},"8":{},"12":[{"1":{"1":"buildString","2":{"1":"closure/goog/string/string.js","2":1219,"3":"https://github.com/google/closure-library/blob/master/closure/goog/string/string.js#L1219"},"3":{"1":[{"2":"<p>Concatenates string expressions. This is useful\nsince some browsers are very inefficient when it comes to using plus to\nconcat strings. Be careful when using null and undefined here since\nthese will not be included in the result. If you need to represent these\nbe sure to cast the argument to a String first.\nFor example:</p>\n <pre>buildString(&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;) -&gt; &#39;abcd&#39;\n buildString(null, undefined) -&gt; &#39;&#39;\n </pre>\n"}]}},"4":[{"1":"var_args","2":{"2":true,"7":true},"3":{"1":[{"2":"<p>A list of strings to concatenate. If not a string,\nit will be casted to one.</p>\n"}]}}],"5":{"2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>The concatenation of <code>var_args</code>.</p>\n"}]}}},{"1":{"1":"canonicalizeNewlines","2":{"1":"closure/goog/string/string.js","2":287,"3":"https://github.com/google/closure-library/blob/master/closure/goog/string/string.js#L287"},"3":{"1":[{"2":"<p>Replaces Windows and Mac new lines with unix style: \\r or \\r\\n with \\n.</p>\n"}]}},"4":[{"1":"str","2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>The string to in which to canonicalize newlines.</p>\n"}]}}],"5":{"2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p><code>str</code> A copy of {&#64;code} with canonicalized newlines.</p>\n"}]}}},{"1":{"1":"capitalize","2":{"1":"closure/goog/string/string.js","2":1490,"3":"https://github.com/google/closure-library/blob/master/closure/goog/string/string.js#L1490"},"3":{"1":[{"2":"<p>Capitalizes a string, i.e. converts the first letter to uppercase\nand all other letters to lowercase, e.g.:</p>\n<p>goog.string.capitalize(&#39;one&#39;)     &#61;&gt; &#39;One&#39;\ngoog.string.capitalize(&#39;ONE&#39;)     &#61;&gt; &#39;One&#39;\ngoog.string.capitalize(&#39;one two&#39;) &#61;&gt; &#39;One two&#39;</p>\n<p>Note that this function does not trim initial whitespace.</p>\n"}]}},"4":[{"1":"str","2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>String value to capitalize.</p>\n"}]}}],"5":{"2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>String value with first letter in uppercase.</p>\n"}]}}},{"1":{"1":"caseInsensitiveCompare","2":{"1":"closure/goog/string/string.js","2":381,"3":"https://github.com/google/closure-library/blob/master/closure/goog/string/string.js#L381"},"3":{"1":[{"2":"<p>A string comparator that ignores case.\n-1 &#61; str1 less than str2\n0 &#61; str1 equals str2\n1 &#61; str1 greater than str2</p>\n"}]}},"4":[{"1":"str1","2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>The string to compare.</p>\n"}]}},{"1":"str2","2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>The string to compare <code>str1</code> to.</p>\n"}]}}],"5":{"2":{"4":{"1":"number","4":true}},"3":{"1":[{"2":"<p>The comparator result, as described above.</p>\n"}]}}},{"1":{"1":"caseInsensitiveContains","2":{"1":"closure/goog/string/string.js","2":1066,"3":"https://github.com/google/closure-library/blob/master/closure/goog/string/string.js#L1066"},"3":{"1":[{"2":"<p>Determines whether a string contains a substring, ignoring case.</p>\n"}]}},"4":[{"1":"str","2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>The string to search.</p>\n"}]}},{"1":"subString","2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>The substring to search for.</p>\n"}]}}],"5":{"2":{"4":{"1":"boolean","4":true}},"3":{"1":[{"2":"<p>Whether <code>str</code> contains <code>subString</code>.</p>\n"}]}}},{"1":{"1":"caseInsensitiveEndsWith","2":{"1":"closure/goog/string/string.js","2":93,"3":"https://github.com/google/closure-library/blob/master/closure/goog/string/string.js#L93"},"3":{"1":[{"2":"<p>Case-insensitive suffix-checker.</p>\n"}]}},"4":[{"1":"str","2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>The string to check.</p>\n"}]}},{"1":"suffix","2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>A string to look for at the end of <code>str</code>.</p>\n"}]}}],"5":{"2":{"4":{"1":"boolean","4":true}},"3":{"1":[{"2":"<p>True if <code>str</code> ends with <code>suffix</code> (ignoring\ncase).</p>\n"}]}}},{"1":{"1":"caseInsensitiveEquals","2":{"1":"closure/goog/string/string.js","2":107,"3":"https://github.com/google/closure-library/blob/master/closure/goog/string/string.js#L107"},"3":{"1":[{"2":"<p>Case-insensitive equality checker.</p>\n"}]}},"4":[{"1":"str1","2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>First string to check.</p>\n"}]}},{"1":"str2","2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>Second string to check.</p>\n"}]}}],"5":{"2":{"4":{"1":"boolean","4":true}},"3":{"1":[{"2":"<p>True if <code>str1</code> and <code>str2</code> are the same string,\nignoring case.</p>\n"}]}}},{"1":{"1":"caseInsensitiveStartsWith","2":{"1":"closure/goog/string/string.js","2":80,"3":"https://github.com/google/closure-library/blob/master/closure/goog/string/string.js#L80"},"3":{"1":[{"2":"<p>Case-insensitive prefix-checker.</p>\n"}]}},"4":[{"1":"str","2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>The string to check.</p>\n"}]}},{"1":"prefix","2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>A string to look for at the end of <code>str</code>.</p>\n"}]}}],"5":{"2":{"4":{"1":"boolean","4":true}},"3":{"1":[{"2":"<p>True if <code>str</code> begins with <code>prefix</code> (ignoring\ncase).</p>\n"}]}}},{"1":{"1":"collapseBreakingSpaces","2":{"1":"closure/goog/string/string.js","2":322,"3":"https://github.com/google/closure-library/blob/master/closure/goog/string/string.js#L322"},"3":{"1":[{"2":"<p>Removes the breaking spaces from the left and right of the string and\ncollapses the sequences of breaking spaces in the middle into single spaces.\nThe original and the result strings render the same way in HTML.</p>\n"}]}},"4":[{"1":"str","2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>A string in which to collapse spaces.</p>\n"}]}}],"5":{"2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>Copy of the string with normalized breaking spaces.</p>\n"}]}}},{"1":{"1":"collapseWhitespace","2":{"1":"closure/goog/string/string.js","2":142,"3":"https://github.com/google/closure-library/blob/master/closure/goog/string/string.js#L142"},"3":{"1":[{"2":"<p>Converts multiple whitespace chars (spaces, non-breaking-spaces, new lines\nand tabs) to a single space, and strips leading and trailing whitespace.</p>\n"}]}},"4":[{"1":"str","2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>Input string.</p>\n"}]}}],"5":{"2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>A copy of <code>str</code> with collapsed whitespace.</p>\n"}]}}},{"1":{"1":"compareVersions","2":{"1":"closure/goog/string/string.js","2":1250,"3":"https://github.com/google/closure-library/blob/master/closure/goog/string/string.js#L1250"},"3":{"1":[{"2":"<p>Compares two version numbers.</p>\n"}]}},"4":[{"1":"version1","2":{"6":{"1":[{"4":{"1":"string","4":true}},{"4":{"1":"number","4":true}}]}},"3":{"1":[{"2":"<p>Version of first item.</p>\n"}]}},{"1":"version2","2":{"6":{"1":[{"4":{"1":"string","4":true}},{"4":{"1":"number","4":true}}]}},"3":{"1":[{"2":"<p>Version of second item.</p>\n"}]}}],"5":{"2":{"4":{"1":"number","4":true}},"3":{"1":[{"2":"<p>1 if <code>version1</code> is higher.\n0 if arguments are equal.\n-1 if <code>version2</code> is higher.</p>\n"}]}}},{"1":{"1":"contains","2":{"1":"closure/goog/string/string.js","2":1055,"3":"https://github.com/google/closure-library/blob/master/closure/goog/string/string.js#L1055"},"3":{"1":[{"2":"<p>Determines whether a string contains a substring.</p>\n"}]}},"4":[{"1":"str","2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>The string to search.</p>\n"}]}},{"1":"subString","2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>The substring to search for.</p>\n"}]}}],"5":{"2":{"4":{"1":"boolean","4":true}},"3":{"1":[{"2":"<p>Whether <code>str</code> contains <code>subString</code>.</p>\n"}]}}},{"1":{"1":"countOf","2":{"1":"closure/goog/string/string.js","2":1078,"3":"https://github.com/google/closure-library/blob/master/closure/goog/string/string.js#L1078"},"3":{"1":[{"2":"<p>Returns the non-overlapping occurrences of ss in s.\nIf either s or ss evalutes to false, then returns zero.</p>\n"}]}},"4":[{"1":"s","2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>The string to look in.</p>\n"}]}},{"1":"ss","2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>The string to look for.</p>\n"}]}}],"5":{"2":{"4":{"1":"number","4":true}},"3":{"1":[{"2":"<p>Number of occurrences of ss in s.</p>\n"}]}}},{"1":{"1":"createUniqueString","2":{"1":"closure/goog/string/string.js","2":1353,"3":"https://github.com/google/closure-library/blob/master/closure/goog/string/string.js#L1353"},"3":{"1":[{"2":"<p>Generates and returns a string which is unique in the current document.\nThis is useful, for example, to create unique IDs for DOM elements.</p>\n"}]}},"5":{"2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>A unique id.</p>\n"}]}}},{"1":{"1":"editDistance","2":{"1":"closure/goog/string/string.js","2":1609,"3":"https://github.com/google/closure-library/blob/master/closure/goog/string/string.js#L1609"},"3":{"1":[{"2":"<p>Computes the Levenshtein edit distance between two strings.</p>\n"}]}},"4":[{"1":"a","2":{"4":{"1":"string","4":true}}},{"1":"b","2":{"4":{"1":"string","4":true}}}],"5":{"2":{"4":{"1":"number","4":true}},"3":{"1":[{"2":"<p>The edit distance between the two strings.</p>\n"}]}}},{"1":{"1":"endsWith","2":{"1":"closure/goog/string/string.js","2":67,"3":"https://github.com/google/closure-library/blob/master/closure/goog/string/string.js#L67"},"3":{"1":[{"2":"<p>Fast suffix-checker.</p>\n"}]}},"4":[{"1":"str","2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>The string to check.</p>\n"}]}},{"1":"suffix","2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>A string to look for at the end of <code>str</code>.</p>\n"}]}}],"5":{"2":{"4":{"1":"boolean","4":true}},"3":{"1":[{"2":"<p>True if <code>str</code> ends with <code>suffix</code>.</p>\n"}]}}},{"1":{"1":"escapeChar","2":{"1":"closure/goog/string/string.js","2":1016,"3":"https://github.com/google/closure-library/blob/master/closure/goog/string/string.js#L1016"},"3":{"1":[{"2":"<p>Takes a character and returns the escaped string for that character. For\nexample escapeChar(String.fromCharCode(15)) -&gt; &#34;\\x0E&#34;.</p>\n"}]}},"4":[{"1":"c","2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>The character to escape.</p>\n"}]}}],"5":{"2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>An escaped string representing <code>c</code>.</p>\n"}]}}},{"1":{"1":"escapeString","2":{"1":"closure/goog/string/string.js","2":1001,"3":"https://github.com/google/closure-library/blob/master/closure/goog/string/string.js#L1001"},"3":{"1":[{"2":"<p>Takes a string and returns the escaped string for that character.</p>\n"}]}},"4":[{"1":"str","2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>The string to escape.</p>\n"}]}}],"5":{"2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>An escaped string representing <code>str</code>.</p>\n"}]}}},{"1":{"1":"floatAwareCompare","2":{"1":"closure/goog/string/string.js","2":490,"3":"https://github.com/google/closure-library/blob/master/closure/goog/string/string.js#L490"},"3":{"1":[{"2":"<p>String comparison function that handles non-negative integer and fractional\nnumbers in a way humans might expect. Using this function, the string\n&#39;File 2.jpg&#39; sorts before &#39;File 10.jpg&#39;, and &#39;3.14&#39; before &#39;3.2&#39;. Equivalent\nto <a href=\"goog.string.html#intAwareCompare\"><code>goog.string.intAwareCompare</code></a> apart from the way how it interprets\ndots.</p>\n"}]}},"4":[{"1":"str1","2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>The string to compare in a numerically sensitive way.</p>\n"}]}},{"1":"str2","2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>The string to compare <code>str1</code> to.</p>\n"}]}}],"5":{"2":{"4":{"1":"number","4":true}},"3":{"1":[{"2":"<p>less than 0 if str1 &lt; str2, 0 if str1 &#61;&#61; str2, greater than\n0 if str1 &gt; str2.</p>\n"}]}}},{"1":{"1":"getRandomString","2":{"1":"closure/goog/string/string.js","2":1233,"3":"https://github.com/google/closure-library/blob/master/closure/goog/string/string.js#L1233"},"3":{"1":[{"2":"<p>Returns a string with at least 64-bits of randomness.</p>\n<p>Doesn&#39;t trust Javascript&#39;s random function entirely. Uses a combination of\nrandom and current timestamp, and then encodes the string in base-36 to\nmake it shorter.</p>\n"}]}},"5":{"2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>A random string, e.g. sn1s7vb4gcic.</p>\n"}]}}},{"1":{"1":"hashCode","2":{"1":"closure/goog/string/string.js","2":1330,"3":"https://github.com/google/closure-library/blob/master/closure/goog/string/string.js#L1330"},"3":{"1":[{"2":"<p>String hash function similar to java.lang.String.hashCode().\nThe hash code for a string is computed as\ns[0] * 31 ^ (n - 1) &#43; s[1] * 31 ^ (n - 2) &#43; ... &#43; s[n - 1],\nwhere s[i] is the ith character of the string and n is the length of\nthe string. We mod the result to make it between 0 (inclusive) and 2^32\n(exclusive).</p>\n"}]}},"4":[{"1":"str","2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>A string.</p>\n"}]}}],"5":{"2":{"4":{"1":"number","4":true}},"3":{"1":[{"2":"<p>Hash value for <code>str</code>, between 0 (inclusive) and 2^32\n(exclusive). The empty string returns 0.</p>\n"}]}}},{"1":{"1":"htmlEscape","2":{"1":"closure/goog/string/string.js","2":583,"3":"https://github.com/google/closure-library/blob/master/closure/goog/string/string.js#L583"},"3":{"1":[{"2":"<p>Escapes double quote &#39;&#34;&#39; and single quote &#39;&#39;&#39; characters in addition to\n&#39;&amp;&#39;, &#39;&lt;&#39;, and &#39;&gt;&#39; so that a string can be included in an HTML tag attribute\nvalue within double or single quotes.</p>\n<p>It should be noted that &gt; doesn&#39;t need to be escaped for the HTML or XML to\nbe valid, but it has been decided to escape it for consistency with other\nimplementations.</p>\n<p>With goog.string.DETECT_DOUBLE_ESCAPING, this function escapes also the\nlowercase letter &#34;e&#34;.</p>\n<p>NOTE(user):\nHtmlEscape is often called during the generation of large blocks of HTML.\nUsing statics for the regular expressions and strings is an optimization\nthat can more than half the amount of time IE spends in this function for\nlarge apps, since strings and regexes both contribute to GC allocations.</p>\n<p>Testing for the presence of a character before escaping increases the number\nof function calls, but actually provides a speed increase for the average\ncase -- since the average case often doesn&#39;t require the escaping of all 4\ncharacters and indexOf() is much cheaper than replace().\nThe worst case does suffer slightly from the additional calls, therefore the\nopt_isLikelyToContainHtmlChars option has been included for situations\nwhere all 4 HTML entities are very likely to be present and need escaping.</p>\n<p>Some benchmarks (times tended to fluctuate &#43;-0.05ms):\nFireFox                     IE6\n(no chars / average (mix of cases) / all 4 chars)\nno checks                     0.13 / 0.22 / 0.22         0.23 / 0.53 / 0.80\nindexOf                       0.08 / 0.17 / 0.26         0.22 / 0.54 / 0.84\nindexOf &#43; re test             0.07 / 0.17 / 0.28         0.19 / 0.50 / 0.85</p>\n<p>An additional advantage of checking if replace actually needs to be called\nis a reduction in the number of object allocations, so as the size of the\napplication grows the difference between the various methods would increase.</p>\n"}]}},"4":[{"1":"str","2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>string to be escaped.</p>\n"}]}},{"1":"opt_isLikelyToContainHtmlChars","2":{"1":true,"6":{"1":[{"4":{"1":"boolean","4":true}},{"9":true}]}},"3":{"1":[{"2":"<p>Don&#39;t perform a check to see\nif the character needs replacing - use this option if you expect each of\nthe characters to appear often. Leave false if you expect few html\ncharacters to occur in your strings, such as if you are escaping HTML.</p>\n"}]}}],"5":{"2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>An escaped copy of <code>str</code>.</p>\n"}]}}},{"1":{"1":"intAwareCompare","2":{"1":"closure/goog/string/string.js","2":473,"3":"https://github.com/google/closure-library/blob/master/closure/goog/string/string.js#L473"},"3":{"1":[{"2":"<p>String comparison function that handles non-negative integer numbers in a\nway humans might expect. Using this function, the string &#39;File 2.jpg&#39; sorts\nbefore &#39;File 10.jpg&#39;, and &#39;Version 1.9&#39; before &#39;Version 1.10&#39;. The comparison\nis mostly case-insensitive, though strings that are identical except for case\nare sorted with the upper-case strings before lower-case.</p>\n<p>This comparison function is up to 50x slower than either the default or the\ncase-insensitive compare. It should not be used in time-critical code, but\nshould be fast enough to sort several hundred short strings (like filenames)\nwith a reasonable delay.</p>\n"}]}},"4":[{"1":"str1","2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>The string to compare in a numerically sensitive way.</p>\n"}]}},{"1":"str2","2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>The string to compare <code>str1</code> to.</p>\n"}]}}],"5":{"2":{"4":{"1":"number","4":true}},"3":{"1":[{"2":"<p>less than 0 if str1 &lt; str2, 0 if str1 &#61;&#61; str2, greater than\n0 if str1 &gt; str2.</p>\n"}]}}},{"1":{"1":"isAlpha","2":{"1":"closure/goog/string/string.js","2":224,"3":"https://github.com/google/closure-library/blob/master/closure/goog/string/string.js#L224"},"3":{"1":[{"2":"<p>Checks if a string contains all letters.</p>\n"}]}},"4":[{"1":"str","2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>string to check.</p>\n"}]}}],"5":{"2":{"4":{"1":"boolean","4":true}},"3":{"1":[{"2":"<p>True if <code>str</code> consists entirely of letters.</p>\n"}]}}},{"1":{"1":"isAlphaNumeric","2":{"1":"closure/goog/string/string.js","2":245,"3":"https://github.com/google/closure-library/blob/master/closure/goog/string/string.js#L245"},"3":{"1":[{"2":"<p>Checks if a string contains only numbers or letters.</p>\n"}]}},"4":[{"1":"str","2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>string to check.</p>\n"}]}}],"5":{"2":{"4":{"1":"boolean","4":true}},"3":{"1":[{"2":"<p>True if <code>str</code> is alphanumeric.</p>\n"}]}}},{"1":{"1":"isBreakingWhitespace","2":{"1":"closure/goog/string/string.js","2":214,"3":"https://github.com/google/closure-library/blob/master/closure/goog/string/string.js#L214"},"3":{"1":[{"2":"<p>Checks if a string is all breaking whitespace.</p>\n"}]}},"4":[{"1":"str","2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>The string to check.</p>\n"}]}}],"5":{"2":{"4":{"1":"boolean","4":true}},"3":{"1":[{"2":"<p>Whether the string is all breaking whitespace.</p>\n"}]}}},{"1":{"1":"isEmpty","2":{"1":"closure/goog/string/string.js","2":182,"3":"https://github.com/google/closure-library/blob/master/closure/goog/string/string.js#L182"},"3":{"1":[{"2":"<p>Checks if a string is empty or contains only whitespaces.</p>\n"}]},"4":{"1":[{"2":"<p>Use goog.string.isEmptyOrWhitespace instead.</p>\n"}]},"6":{"2":true}},"4":[{"1":"str","2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>The string to check.</p>\n"}]}}],"5":{"2":{"4":{"1":"boolean","4":true}},"3":{"1":[{"2":"<p>Whether <code>str</code> is empty or whitespace only.</p>\n"}]}}},{"1":{"1":"isEmptyOrWhitespace","2":{"1":"closure/goog/string/string.js","2":155,"3":"https://github.com/google/closure-library/blob/master/closure/goog/string/string.js#L155"},"3":{"1":[{"2":"<p>Checks if a string is empty or contains only whitespaces.</p>\n"}]}},"4":[{"1":"str","2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>The string to check.</p>\n"}]}}],"5":{"2":{"4":{"1":"boolean","4":true}},"3":{"1":[{"2":"<p>Whether <code>str</code> is empty or whitespace only.</p>\n"}]}}},{"1":{"1":"isEmptyOrWhitespaceSafe","2":{"1":"closure/goog/string/string.js","2":193,"3":"https://github.com/google/closure-library/blob/master/closure/goog/string/string.js#L193"},"3":{"1":[{"2":"<p>Checks if a string is null, undefined, empty or contains only whitespaces.</p>\n"}]},"4":{"1":[{"2":"<p>Use goog.string.isEmptyOrWhitespace(goog.string.makeSafe(str))\ninstead.</p>\n"}]},"6":{"2":true}},"4":[{"1":"str","2":{"7":true},"3":{"1":[{"2":"<p>The string to check.</p>\n"}]}}],"5":{"2":{"4":{"1":"boolean","4":true}},"3":{"1":[{"2":"<p>Whether <code>str</code> is null, undefined, empty, or\nwhitespace only.</p>\n"}]}}},{"1":{"1":"isEmptySafe","2":{"1":"closure/goog/string/string.js","2":206,"3":"https://github.com/google/closure-library/blob/master/closure/goog/string/string.js#L206"},"3":{"1":[{"2":"<p>Checks if a string is null, undefined, empty or contains only whitespaces.</p>\n"}]},"4":{"1":[{"2":"<p>Use goog.string.isEmptyOrWhitespace instead.</p>\n"}]},"6":{"2":true}},"4":[{"1":"str","2":{"7":true},"3":{"1":[{"2":"<p>The string to check.</p>\n"}]}}],"5":{"2":{"4":{"1":"boolean","4":true}},"3":{"1":[{"2":"<p>Whether <code>str</code> is null, undefined, empty, or\nwhitespace only.</p>\n"}]}}},{"1":{"1":"isEmptyString","2":{"1":"closure/goog/string/string.js","2":170,"3":"https://github.com/google/closure-library/blob/master/closure/goog/string/string.js#L170"},"3":{"1":[{"2":"<p>Checks if a string is empty.</p>\n"}]}},"4":[{"1":"str","2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>The string to check.</p>\n"}]}}],"5":{"2":{"4":{"1":"boolean","4":true}},"3":{"1":[{"2":"<p>Whether <code>str</code> is empty.</p>\n"}]}}},{"1":{"1":"isLowerCamelCase","2":{"1":"closure/goog/string/string.js","2":1387,"3":"https://github.com/google/closure-library/blob/master/closure/goog/string/string.js#L1387"},"3":{"1":[{"2":"<p>Returns whether the given string is lower camel case (e.g. &#34;isFooBar&#34;).</p>\n<p>Note that this assumes the string is entirely letters.</p>\n"}]},"10":[{"1":[{"2":"<p><a href=\"http://en.wikipedia.org/wiki/CamelCase#Variations_and_synonyms\">http://en.wikipedia.org/wiki/CamelCase#Variations_and_synonyms</a></p>\n"}]}]},"4":[{"1":"str","2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>String to test.</p>\n"}]}}],"5":{"2":{"4":{"1":"boolean","4":true}},"3":{"1":[{"2":"<p>Whether the string is lower camel case.</p>\n"}]}}},{"1":{"1":"isNumeric","2":{"1":"closure/goog/string/string.js","2":235,"3":"https://github.com/google/closure-library/blob/master/closure/goog/string/string.js#L235"},"3":{"1":[{"2":"<p>Checks if a string contains only numbers.</p>\n"}]}},"4":[{"1":"str","2":{"7":true},"3":{"1":[{"2":"<p>string to check. If not a string, it will be\ncasted to one.</p>\n"}]}}],"5":{"2":{"4":{"1":"boolean","4":true}},"3":{"1":[{"2":"<p>True if <code>str</code> is numeric.</p>\n"}]}}},{"1":{"1":"isSpace","2":{"1":"closure/goog/string/string.js","2":255,"3":"https://github.com/google/closure-library/blob/master/closure/goog/string/string.js#L255"},"3":{"1":[{"2":"<p>Checks if a character is a space character.</p>\n"}]}},"4":[{"1":"ch","2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>Character to check.</p>\n"}]}}],"5":{"2":{"4":{"1":"boolean","4":true}},"3":{"1":[{"2":"<p>True if <code>ch</code> is a space.</p>\n"}]}}},{"1":{"1":"isUnicodeChar","2":{"1":"closure/goog/string/string.js","2":265,"3":"https://github.com/google/closure-library/blob/master/closure/goog/string/string.js#L265"},"3":{"1":[{"2":"<p>Checks if a character is a valid unicode character.</p>\n"}]}},"4":[{"1":"ch","2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>Character to check.</p>\n"}]}}],"5":{"2":{"4":{"1":"boolean","4":true}},"3":{"1":[{"2":"<p>True if <code>ch</code> is a valid unicode character.</p>\n"}]}}},{"1":{"1":"isUpperCamelCase","2":{"1":"closure/goog/string/string.js","2":1401,"3":"https://github.com/google/closure-library/blob/master/closure/goog/string/string.js#L1401"},"3":{"1":[{"2":"<p>Returns whether the given string is upper camel case (e.g. &#34;FooBarBaz&#34;).</p>\n<p>Note that this assumes the string is entirely letters.</p>\n"}]},"10":[{"1":[{"2":"<p><a href=\"http://en.wikipedia.org/wiki/CamelCase#Variations_and_synonyms\">http://en.wikipedia.org/wiki/CamelCase#Variations_and_synonyms</a></p>\n"}]}]},"4":[{"1":"str","2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>String to test.</p>\n"}]}}],"5":{"2":{"4":{"1":"boolean","4":true}},"3":{"1":[{"2":"<p>Whether the string is upper camel case.</p>\n"}]}}},{"1":{"1":"lastComponent","2":{"1":"closure/goog/string/string.js","2":1579,"3":"https://github.com/google/closure-library/blob/master/closure/goog/string/string.js#L1579"},"3":{"1":[{"2":"<p>Finds the characters to the right of the last instance of any separator</p>\n<p>This function is similar to goog.string.path.baseName, except it can take a\nlist of characters to split the string on. It will return the rightmost\ngrouping of characters to the right of any separator as a left-to-right\noriented string.</p>\n"}]},"10":[{"1":[{"1":"goog.string.path.baseName","3":{"1":"goog.string.path.html#baseName"}}]}]},"4":[{"1":"str","2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>The string</p>\n"}]}},{"1":"separators","2":{"6":{"1":[{"4":{"1":"string","4":true}},{"4":{"1":"Array","4":true,"5":[{"4":{"1":"string","4":true}}]}}]}},"3":{"1":[{"2":"<p>A list of separator characters</p>\n"}]}}],"5":{"2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>The last part of the string with respect to the separators</p>\n"}]}}},{"1":{"1":"makeSafe","2":{"1":"closure/goog/string/string.js","2":1200,"3":"https://github.com/google/closure-library/blob/master/closure/goog/string/string.js#L1200"},"3":{"1":[{"2":"<p>Returns a string representation of the given object, with\nnull and undefined being returned as the empty string.</p>\n"}]}},"4":[{"1":"obj","2":{"7":true},"3":{"1":[{"2":"<p>The object to convert.</p>\n"}]}}],"5":{"2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>A string representation of the <code>obj</code>.</p>\n"}]}}},{"1":{"1":"newLineToBr","2":{"1":"closure/goog/string/string.js","2":534,"3":"https://github.com/google/closure-library/blob/master/closure/goog/string/string.js#L534"},"3":{"1":[{"2":"<p>Converts \\n to <br />s or <br />s.</p>\n"}]}},"4":[{"1":"str","2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>The string in which to convert newlines.</p>\n"}]}},{"1":"opt_xml","2":{"1":true,"6":{"1":[{"4":{"1":"boolean","4":true}},{"9":true}]}},"3":{"1":[{"2":"<p>Whether to use XML compatible tags.</p>\n"}]}}],"5":{"2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>A copy of <code>str</code> with converted newlines.</p>\n"}]}}},{"1":{"1":"normalizeSpaces","2":{"1":"closure/goog/string/string.js","2":310,"3":"https://github.com/google/closure-library/blob/master/closure/goog/string/string.js#L310"},"3":{"1":[{"2":"<p>Normalizes spaces in a string, replacing all consecutive spaces and tabs\nwith a single space. Replaces non-breaking space with a space.</p>\n"}]}},"4":[{"1":"str","2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>The string in which to normalize spaces.</p>\n"}]}}],"5":{"2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>A copy of <code>str</code> with all consecutive spaces and tabs\nreplaced with a single space.</p>\n"}]}}},{"1":{"1":"normalizeWhitespace","2":{"1":"closure/goog/string/string.js","2":298,"3":"https://github.com/google/closure-library/blob/master/closure/goog/string/string.js#L298"},"3":{"1":[{"2":"<p>Normalizes whitespace in a string, replacing all whitespace chars with\na space.</p>\n"}]}},"4":[{"1":"str","2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>The string in which to normalize whitespace.</p>\n"}]}}],"5":{"2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>A copy of <code>str</code> with all whitespace normalized.</p>\n"}]}}},{"1":{"1":"numerateCompare","2":{"1":"closure/goog/string/string.js","2":502,"3":"https://github.com/google/closure-library/blob/master/closure/goog/string/string.js#L502"},"3":{"1":[{"2":"<p>Alias for <a href=\"goog.string.html#floatAwareCompare\"><code>goog.string.floatAwareCompare</code></a>.</p>\n"}]}},"4":[{"1":"str1","2":{"4":{"1":"string","4":true}}},{"1":"str2","2":{"4":{"1":"string","4":true}}}],"5":{"2":{"4":{"1":"number","4":true}}}},{"1":{"1":"padNumber","2":{"1":"closure/goog/string/string.js","2":1183,"3":"https://github.com/google/closure-library/blob/master/closure/goog/string/string.js#L1183"},"3":{"1":[{"2":"<p>Pads number to given length and optionally rounds it to a given precision.\nFor example:</p>\n <pre>padNumber(1.25, 2, 3) -&gt; &#39;01.250&#39;\n padNumber(1.25, 2) -&gt; &#39;01.25&#39;\n padNumber(1.25, 2, 1) -&gt; &#39;01.3&#39;\n padNumber(1.25, 0) -&gt; &#39;1.25&#39;</pre>\n"}]}},"4":[{"1":"num","2":{"4":{"1":"number","4":true}},"3":{"1":[{"2":"<p>The number to pad.</p>\n"}]}},{"1":"length","2":{"4":{"1":"number","4":true}},"3":{"1":[{"2":"<p>The desired length.</p>\n"}]}},{"1":"opt_precision","2":{"1":true,"6":{"1":[{"4":{"1":"number","4":true}},{"9":true}]}},"3":{"1":[{"2":"<p>The desired precision.</p>\n"}]}}],"5":{"2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p><code>num</code> as a string with the given options.</p>\n"}]}}},{"1":{"1":"parseInt","2":{"1":"closure/goog/string/string.js","2":1513,"3":"https://github.com/google/closure-library/blob/master/closure/goog/string/string.js#L1513"},"3":{"1":[{"2":"<p>Parse a string in decimal or hexidecimal (&#39;0xFFFF&#39;) form.</p>\n<p>To parse a particular radix, please use parseInt(string, radix) directly. See\nhttps://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/parseInt</p>\n<p>This is a wrapper for the built-in parseInt function that will only parse\nnumbers as base 10 or base 16.  Some JS implementations assume strings\nstarting with &#34;0&#34; are intended to be octal. ES3 allowed but discouraged\nthis behavior. ES5 forbids it.  This function emulates the ES5 behavior.</p>\n<p>For more information, see Mozilla JS Reference: http://goo.gl/8RiFj</p>\n"}]}},"4":[{"1":"value","2":{"6":{"1":[{"4":{"1":"string","4":true}},{"4":{"1":"number","4":true}},{"10":true},{"9":true}]}},"3":{"1":[{"2":"<p>The value to be parsed.</p>\n"}]}}],"5":{"2":{"4":{"1":"number","4":true}},"3":{"1":[{"2":"<p>The number, parsed. If the string failed to parse, this\nwill be NaN.</p>\n"}]}}},{"1":{"1":"preserveSpaces","2":{"1":"closure/goog/string/string.js","2":843,"3":"https://github.com/google/closure-library/blob/master/closure/goog/string/string.js#L843"},"3":{"1":[{"2":"<p>Preserve spaces that would be otherwise collapsed in HTML by replacing them\nwith non-breaking space Unicode characters.</p>\n"}]}},"4":[{"1":"str","2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>The string in which to preserve whitespace.</p>\n"}]}}],"5":{"2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>A copy of <code>str</code> with preserved whitespace.</p>\n"}]}}},{"1":{"1":"quote","2":{"1":"closure/goog/string/string.js","2":982,"3":"https://github.com/google/closure-library/blob/master/closure/goog/string/string.js#L982"},"3":{"1":[{"2":"<p>Encloses a string in double quotes and escapes characters so that the\nstring is a valid JS string. The resulting string is safe to embed in\n<code>&lt;script&gt;</code> tags as &#34;&lt;&#34; is escaped.</p>\n"}]}},"4":[{"1":"s","2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>The string to quote.</p>\n"}]}}],"5":{"2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>A copy of <code>s</code> surrounded by double quotes.</p>\n"}]}}},{"1":{"1":"regExpEscape","2":{"1":"closure/goog/string/string.js","2":1148,"3":"https://github.com/google/closure-library/blob/master/closure/goog/string/string.js#L1148"},"3":{"1":[{"2":"<p>Escapes characters in the string that are not safe to use in a RegExp.</p>\n"}]}},"4":[{"1":"s","2":{"7":true},"3":{"1":[{"2":"<p>The string to escape. If not a string, it will be casted\nto one.</p>\n"}]}}],"5":{"2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>A RegExp safe, escaped copy of <code>s</code>.</p>\n"}]}}},{"1":{"1":"remove","2":{"1":"closure/goog/string/string.js","2":1110,"3":"https://github.com/google/closure-library/blob/master/closure/goog/string/string.js#L1110"},"3":{"1":[{"2":"<p>Removes the first occurrence of a substring from a string.</p>\n"}]}},"4":[{"1":"str","2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>The base string from which to remove.</p>\n"}]}},{"1":"substr","2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>The string to remove.</p>\n"}]}}],"5":{"2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>A copy of <code>str</code> with <code>substr</code> removed or the\nfull string if nothing is removed.</p>\n"}]}}},{"1":{"1":"removeAll","2":{"1":"closure/goog/string/string.js","2":1122,"3":"https://github.com/google/closure-library/blob/master/closure/goog/string/string.js#L1122"},"3":{"1":[{"2":"<p>Removes all occurrences of a substring from a string.</p>\n"}]}},"4":[{"1":"s","2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>The base string from which to remove.</p>\n"}]}},{"1":"ss","2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>The string to remove.</p>\n"}]}}],"5":{"2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>A copy of <code>s</code> with <code>ss</code> removed or the full\nstring if nothing is removed.</p>\n"}]}}},{"1":{"1":"removeAt","2":{"1":"closure/goog/string/string.js","2":1092,"3":"https://github.com/google/closure-library/blob/master/closure/goog/string/string.js#L1092"},"3":{"1":[{"2":"<p>Removes a substring of a specified length at a specific\nindex in a string.</p>\n"}]}},"4":[{"1":"s","2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>The base string from which to remove.</p>\n"}]}},{"1":"index","2":{"4":{"1":"number","4":true}},"3":{"1":[{"2":"<p>The index at which to remove the substring.</p>\n"}]}},{"1":"stringLength","2":{"4":{"1":"number","4":true}},"3":{"1":[{"2":"<p>The length of the substring to remove.</p>\n"}]}}],"5":{"2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>A copy of <code>s</code> with the substring removed or the full\nstring if nothing is removed or the input is invalid.</p>\n"}]}}},{"1":{"1":"repeat","2":{"1":"closure/goog/string/string.js","2":1162,"3":"https://github.com/google/closure-library/blob/master/closure/goog/string/string.js#L1162"},"3":{"1":[{"2":"<p>Repeats a string n times.</p>\n"}]}},"4":[{"1":"string","2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>The string to repeat.</p>\n"}]}},{"1":"length","2":{"4":{"1":"number","4":true}},"3":{"1":[{"2":"<p>The number of times to repeat.</p>\n"}]}}],"5":{"2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>A string containing <code>length</code> repetitions of\n<code>string</code>.</p>\n"}]}}},{"1":{"1":"replaceAll","2":{"1":"closure/goog/string/string.js","2":1136,"3":"https://github.com/google/closure-library/blob/master/closure/goog/string/string.js#L1136"},"3":{"1":[{"2":"<p>Replaces all occurrences of a substring of a string with a new substring.</p>\n"}]}},"4":[{"1":"s","2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>The base string from which to remove.</p>\n"}]}},{"1":"ss","2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>The string to replace.</p>\n"}]}},{"1":"replacement","2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>The replacement string.</p>\n"}]}}],"5":{"2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>A copy of <code>s</code> with <code>ss</code> replaced by\n<code>replacement</code> or the original string if nothing is replaced.</p>\n"}]}}},{"1":{"1":"splitLimit","2":{"1":"closure/goog/string/string.js","2":1546,"3":"https://github.com/google/closure-library/blob/master/closure/goog/string/string.js#L1546"},"3":{"1":[{"2":"<p>Splits a string on a separator a limited number of times.</p>\n<p>This implementation is more similar to Python or Java, where the limit\nparameter specifies the maximum number of splits rather than truncating\nthe number of results.</p>\n<p>See http://docs.python.org/2/library/stdtypes.html#str.split\nSee JavaDoc: http://goo.gl/F2AsY\nSee Mozilla reference: http://goo.gl/dZdZs</p>\n"}]}},"4":[{"1":"str","2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>String to split.</p>\n"}]}},{"1":"separator","2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>The separator.</p>\n"}]}},{"1":"limit","2":{"4":{"1":"number","4":true}},"3":{"1":[{"2":"<p>The limit to the number of splits. The resulting array\nwill have a maximum length of limit&#43;1.  Negative numbers are the same\nas zero.</p>\n"}]}}],"5":{"2":{"4":{"1":"Array","4":true,"5":[{"4":{"1":"string","4":true}}]}},"3":{"1":[{"2":"<p>The string, split.</p>\n"}]}}},{"1":{"1":"startsWith","2":{"1":"closure/goog/string/string.js","2":56,"3":"https://github.com/google/closure-library/blob/master/closure/goog/string/string.js#L56"},"3":{"1":[{"2":"<p>Fast prefix-checker.</p>\n"}]}},"4":[{"1":"str","2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>The string to check.</p>\n"}]}},{"1":"prefix","2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>A string to look for at the start of <code>str</code>.</p>\n"}]}}],"5":{"2":{"4":{"1":"boolean","4":true}},"3":{"1":[{"2":"<p>True if <code>str</code> begins with <code>prefix</code>.</p>\n"}]}}},{"1":{"1":"stripNewlines","2":{"1":"closure/goog/string/string.js","2":277,"3":"https://github.com/google/closure-library/blob/master/closure/goog/string/string.js#L277"},"3":{"1":[{"2":"<p>Takes a string and replaces newlines with a space. Multiple lines are\nreplaced with a single space.</p>\n"}]}},"4":[{"1":"str","2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>The string from which to strip newlines.</p>\n"}]}}],"5":{"2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>A copy of <code>str</code> stripped of newlines.</p>\n"}]}}},{"1":{"1":"stripQuotes","2":{"1":"closure/goog/string/string.js","2":863,"3":"https://github.com/google/closure-library/blob/master/closure/goog/string/string.js#L863"},"3":{"1":[{"2":"<p>Strip quote characters around a string.  The second argument is a string of\ncharacters to treat as quotes.  This can be a single character or a string of\nmultiple character and in that case each of those are treated as possible\nquote characters. For example:</p>\n <pre>\n goog.string.stripQuotes(&#39;&#34;abc&#34;&#39;, &#39;&#34;&#96;&#39;) --&gt; &#39;abc&#39;\n goog.string.stripQuotes(&#39;&#96;abc&#96;&#39;, &#39;&#34;&#96;&#39;) --&gt; &#39;abc&#39;\n </pre>\n"}]}},"4":[{"1":"str","2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>The string to strip.</p>\n"}]}},{"1":"quoteChars","2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>The quote characters to strip.</p>\n"}]}}],"5":{"2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>A copy of <code>str</code> without the quotes.</p>\n"}]}}},{"1":{"1":"subs","2":{"1":"closure/goog/string/string.js","2":120,"3":"https://github.com/google/closure-library/blob/master/closure/goog/string/string.js#L120"},"3":{"1":[{"2":"<p>Does simple python-style string substitution.\nsubs(&#34;foo%s hot%s&#34;, &#34;bar&#34;, &#34;dog&#34;) becomes &#34;foobar hotdog&#34;.</p>\n"}]}},"4":[{"1":"str","2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>The string containing the pattern.</p>\n"}]}},{"1":"var_args","2":{"2":true,"7":true},"3":{"1":[{"2":"<p>The items to substitute into the pattern.</p>\n"}]}}],"5":{"2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>A copy of <code>str</code> in which each occurrence of\n<code>%s</code> has been replaced an argument from <code>var_args</code>.</p>\n"}]}}},{"1":{"1":"toCamelCase","2":{"1":"closure/goog/string/string.js","2":1413,"3":"https://github.com/google/closure-library/blob/master/closure/goog/string/string.js#L1413"},"3":{"1":[{"2":"<p>Converts a string from selector-case to camelCase (e.g. from\n&#34;multi-part-string&#34; to &#34;multiPartString&#34;), useful for converting\nCSS selectors and HTML dataset keys to their equivalent JS properties.</p>\n"}]}},"4":[{"1":"str","2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>The string in selector-case form.</p>\n"}]}}],"5":{"2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>The string in camelCase form.</p>\n"}]}}},{"1":{"1":"toNumber","2":{"1":"closure/goog/string/string.js","2":1369,"3":"https://github.com/google/closure-library/blob/master/closure/goog/string/string.js#L1369"},"3":{"1":[{"2":"<p>Converts the supplied string to a number, which may be Infinity or NaN.\nThis function strips whitespace: (toNumber(&#39; 123&#39;) &#61;&#61;&#61; 123)\nThis function accepts scientific notation: (toNumber(&#39;1e1&#39;) &#61;&#61;&#61; 10)</p>\n<p>This is better than Javascript&#39;s built-in conversions because, sadly:\n(Number(&#39; &#39;) &#61;&#61;&#61; 0) and (parseFloat(&#39;123a&#39;) &#61;&#61;&#61; 123)</p>\n"}]}},"4":[{"1":"str","2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>The string to convert.</p>\n"}]}}],"5":{"2":{"4":{"1":"number","4":true}},"3":{"1":[{"2":"<p>The number the supplied string represents, or NaN.</p>\n"}]}}},{"1":{"1":"toSelectorCase","2":{"1":"closure/goog/string/string.js","2":1426,"3":"https://github.com/google/closure-library/blob/master/closure/goog/string/string.js#L1426"},"3":{"1":[{"2":"<p>Converts a string from camelCase to selector-case (e.g. from\n&#34;multiPartString&#34; to &#34;multi-part-string&#34;), useful for converting JS\nstyle and dataset properties to equivalent CSS selectors and HTML keys.</p>\n"}]}},"4":[{"1":"str","2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>The string in camelCase form.</p>\n"}]}}],"5":{"2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>The string in selector-case form.</p>\n"}]}}},{"1":{"1":"toTitleCase","2":{"1":"closure/goog/string/string.js","2":1462,"3":"https://github.com/google/closure-library/blob/master/closure/goog/string/string.js#L1462"},"3":{"1":[{"2":"<p>Converts a string into TitleCase. First character of the string is always\ncapitalized in addition to the first letter of every subsequent word.\nWords are delimited by one or more whitespaces by default. Custom delimiters\ncan optionally be specified to replace the default, which doesn&#39;t preserve\nwhitespace delimiters and instead must be explicitly included if needed.</p>\n<p>Default delimiter &#61;&gt; &#34; &#34;:\ngoog.string.toTitleCase(&#39;oneTwoThree&#39;)    &#61;&gt; &#39;OneTwoThree&#39;\ngoog.string.toTitleCase(&#39;one two three&#39;)  &#61;&gt; &#39;One Two Three&#39;\ngoog.string.toTitleCase(&#39;  one   two   &#39;) &#61;&gt; &#39;  One   Two   &#39;\ngoog.string.toTitleCase(&#39;one_two_three&#39;)  &#61;&gt; &#39;One_two_three&#39;\ngoog.string.toTitleCase(&#39;one-two-three&#39;)  &#61;&gt; &#39;One-two-three&#39;</p>\n<p>Custom delimiter &#61;&gt; &#34;<em>-.&#34;:\ngoog.string.toTitleCase(&#39;oneTwoThree&#39;, &#39;</em>-.&#39;)       &#61;&gt; &#39;OneTwoThree&#39;\ngoog.string.toTitleCase(&#39;one two three&#39;, &#39;<em>-.&#39;)     &#61;&gt; &#39;One two three&#39;\ngoog.string.toTitleCase(&#39;  one   two   &#39;, &#39;</em>-.&#39;)    &#61;&gt; &#39;  one   two   &#39;\ngoog.string.toTitleCase(&#39;one_two_three&#39;, &#39;<em>-.&#39;)     &#61;&gt; &#39;One_Two_Three&#39;\ngoog.string.toTitleCase(&#39;one-two-three&#39;, &#39;</em>-.&#39;)     &#61;&gt; &#39;One-Two-Three&#39;\ngoog.string.toTitleCase(&#39;one...two...three&#39;, &#39;<em>-.&#39;) &#61;&gt; &#39;One...Two...Three&#39;\ngoog.string.toTitleCase(&#39;one. two. three&#39;, &#39;</em>-.&#39;)   &#61;&gt; &#39;One. two. three&#39;\ngoog.string.toTitleCase(&#39;one-two.three&#39;, &#39;_-.&#39;)     &#61;&gt; &#39;One-Two.Three&#39;</p>\n"}]}},"4":[{"1":"str","2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>String value in camelCase form.</p>\n"}]}},{"1":"opt_delimiters","2":{"1":true,"6":{"1":[{"4":{"1":"string","4":true}},{"9":true}]}},"3":{"1":[{"2":"<p>Custom delimiter character set used to\ndistinguish words in the string value. Each character represents a\nsingle delimiter. When provided, default whitespace delimiter is\noverridden and must be explicitly included if needed.</p>\n"}]}}],"5":{"2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>String value in TitleCase form.</p>\n"}]}}},{"1":{"1":"trim","2":{"1":"closure/goog/string/string.js","2":333,"3":"https://github.com/google/closure-library/blob/master/closure/goog/string/string.js#L333"},"3":{"1":[{"2":"<p>Trims white spaces to the left and right of a string.</p>\n"}]}},"4":[{"1":"str","2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>The string to trim.</p>\n"}]}}],"5":{"2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>A trimmed copy of <code>str</code>.</p>\n"}]}}},{"1":{"1":"trimLeft","2":{"1":"closure/goog/string/string.js","2":350,"3":"https://github.com/google/closure-library/blob/master/closure/goog/string/string.js#L350"},"3":{"1":[{"2":"<p>Trims whitespaces at the left end of a string.</p>\n"}]}},"4":[{"1":"str","2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>The string to left trim.</p>\n"}]}}],"5":{"2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>A trimmed copy of <code>str</code>.</p>\n"}]}}},{"1":{"1":"trimRight","2":{"1":"closure/goog/string/string.js","2":363,"3":"https://github.com/google/closure-library/blob/master/closure/goog/string/string.js#L363"},"3":{"1":[{"2":"<p>Trims whitespaces at the right end of a string.</p>\n"}]}},"4":[{"1":"str","2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>The string to right trim.</p>\n"}]}}],"5":{"2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>A trimmed copy of <code>str</code>.</p>\n"}]}}},{"1":{"1":"truncate","2":{"1":"closure/goog/string/string.js","2":885,"3":"https://github.com/google/closure-library/blob/master/closure/goog/string/string.js#L885"},"3":{"1":[{"2":"<p>Truncates a string to a certain length and adds &#39;...&#39; if necessary.  The\nlength also accounts for the ellipsis, so a maximum length of 10 and a string\n&#39;Hello World!&#39; produces &#39;Hello W...&#39;.</p>\n"}]}},"4":[{"1":"str","2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>The string to truncate.</p>\n"}]}},{"1":"chars","2":{"4":{"1":"number","4":true}},"3":{"1":[{"2":"<p>Max number of characters.</p>\n"}]}},{"1":"opt_protectEscapedCharacters","2":{"1":true,"6":{"1":[{"4":{"1":"boolean","4":true}},{"9":true}]}},"3":{"1":[{"2":"<p>Whether to protect escaped\ncharacters from being cut off in the middle.</p>\n"}]}}],"5":{"2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>The truncated <code>str</code> string.</p>\n"}]}}},{"1":{"1":"truncateMiddle","2":{"1":"closure/goog/string/string.js","2":914,"3":"https://github.com/google/closure-library/blob/master/closure/goog/string/string.js#L914"},"3":{"1":[{"2":"<p>Truncate a string in the middle, adding &#34;...&#34; if necessary,\nand favoring the beginning of the string.</p>\n"}]}},"4":[{"1":"str","2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>The string to truncate the middle of.</p>\n"}]}},{"1":"chars","2":{"4":{"1":"number","4":true}},"3":{"1":[{"2":"<p>Max number of characters.</p>\n"}]}},{"1":"opt_protectEscapedCharacters","2":{"1":true,"6":{"1":[{"4":{"1":"boolean","4":true}},{"9":true}]}},"3":{"1":[{"2":"<p>Whether to protect escaped\ncharacters from being cutoff in the middle.</p>\n"}]}},{"1":"opt_trailingChars","2":{"1":true,"6":{"1":[{"4":{"1":"number","4":true}},{"9":true}]}},"3":{"1":[{"2":"<p>Optional number of trailing characters to\nleave at the end of the string, instead of truncating as close to the\nmiddle as possible.</p>\n"}]}}],"5":{"2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>A truncated copy of <code>str</code>.</p>\n"}]}}},{"1":{"1":"unescapeEntities","2":{"1":"closure/goog/string/string.js","2":700,"3":"https://github.com/google/closure-library/blob/master/closure/goog/string/string.js#L700"},"3":{"1":[{"2":"<p>Unescapes an HTML string.</p>\n"}]}},"4":[{"1":"str","2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>The string to unescape.</p>\n"}]}}],"5":{"2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>An unescaped copy of <code>str</code>.</p>\n"}]}}},{"1":{"1":"unescapeEntitiesWithDocument","2":{"1":"closure/goog/string/string.js","2":723,"3":"https://github.com/google/closure-library/blob/master/closure/goog/string/string.js#L723"},"3":{"1":[{"2":"<p>Unescapes a HTML string using the provided document.</p>\n"}]}},"4":[{"1":"str","2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>The string to unescape.</p>\n"}]}},{"1":"document","2":{"4":{"1":"Document"}},"3":{"1":[{"2":"<p>A document to use in escaping the string.</p>\n"}]}}],"5":{"2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>An unescaped copy of <code>str</code>.</p>\n"}]}}},{"1":{"1":"urlDecode","2":{"1":"closure/goog/string/string.js","2":523,"3":"https://github.com/google/closure-library/blob/master/closure/goog/string/string.js#L523"},"3":{"1":[{"2":"<p>URL-decodes the string. We need to specially handle &#39;&#43;&#39;s because\nthe javascript library doesn&#39;t convert them to spaces.</p>\n"}]}},"4":[{"1":"str","2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>The string to url decode.</p>\n"}]}}],"5":{"2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>The decoded <code>str</code>.</p>\n"}]}}},{"1":{"1":"urlEncode","2":{"1":"closure/goog/string/string.js","2":512,"3":"https://github.com/google/closure-library/blob/master/closure/goog/string/string.js#L512"},"3":{"1":[{"2":"<p>URL-encodes a string</p>\n"}]}},"4":[{"1":"str","2":{"7":true},"3":{"1":[{"2":"<p>The string to url-encode.</p>\n"}]}}],"5":{"2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>An encoded copy of <code>str</code> that is safe for urls.\nNote that &#39;#&#39;, &#39;:&#39;, and other characters used to delimit portions\nof URLs <em>will</em> be encoded.</p>\n"}]}}},{"1":{"1":"whitespaceEscape","2":{"1":"closure/goog/string/string.js","2":831,"3":"https://github.com/google/closure-library/blob/master/closure/goog/string/string.js#L831"},"3":{"1":[{"2":"<p>Do escaping of whitespace to preserve spatial formatting. We use character\nentity #160 to make it safer for xml.</p>\n"}]}},"4":[{"1":"str","2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>The string in which to escape whitespace.</p>\n"}]}},{"1":"opt_xml","2":{"1":true,"6":{"1":[{"4":{"1":"boolean","4":true}},{"9":true}]}},"3":{"1":[{"2":"<p>Whether to use XML compatible tags.</p>\n"}]}}],"5":{"2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>An escaped copy of <code>str</code>.</p>\n"}]}}}],"20":[{"1":{"1":"goog.string.DETECT_DOUBLE_ESCAPING","2":{"1":"closure/goog/string/string.js","2":32,"3":"https://github.com/google/closure-library/blob/master/closure/goog/string/string.js#L32"},"3":{"1":[{"2":"<p>Enables HTML escaping of lowercase letter &#34;e&#34; which helps\nwith detection of double-escaping as this letter is frequently used.</p>\n"}]},"6":{"1":true}},"2":{"4":{"1":"boolean","4":true}}},{"1":{"1":"goog.string.FORCE_NON_DOM_HTML_UNESCAPING","2":{"1":"closure/goog/string/string.js","2":38,"3":"https://github.com/google/closure-library/blob/master/closure/goog/string/string.js#L38"},"3":{"1":[{"2":"<p>Whether to force non-dom html unescaping.</p>\n"}]},"6":{"1":true}},"2":{"4":{"1":"boolean","4":true}}}],"21":{"1":{"1":"goog.string","3":{"1":"goog.string.html"}},"2":4},"23":"goog.string.html","24":"goog.string"}]}}