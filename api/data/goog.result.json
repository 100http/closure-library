[null,[[["goog.result",null,null,null,[null,22,null,[null,null,"closure/goog/result/result_interface.js"],[null,null,"https://github.com/google/closure-library/blob/master/closure/goog/result/result_interface.js#L22"]],[[["DeferredAdaptor",null,[[[null,"<p>An adaptor from Result to a Deferred, for use with existing Deferred chains.</p>\n"]]],[null,1],[null,null,"goog.result.DeferredAdaptor.html"]],["DependentResultImpl_",null,[[[null,"<p>A DependentResult represents a Result whose eventual value depends on the\nvalue of one or more other Results.</p>\n"]]],null,[null,null,"goog.result.DependentResultImpl_.html"]],["SimpleResult",null,[[[null,"<p>A SimpleResult object is a basic implementation of the\ngoog.result.Result interface.</p>\n"]]],[null,1],[null,null,"goog.result.SimpleResult.html"]]],[],[["DependentResult",null,[[[null,"<p>A DependentResult represents a Result whose eventual value depends on the\nvalue of one or more other Results.</p>\n"]]],[null,1,null,null,1],[null,null,"goog.result.DependentResult.html"]],["Result",null,[[[null,"<p>A Result object represents a value returned by an asynchronous\noperation at some point in the future (e.g.</p>\n"]]],[null,1,null,null,1],[null,null,"goog.result.Result.html"]]]],[[]],[],null,[],null,[[["cancelParentResults",[null,503,null,[null,null,"closure/goog/result/resultutil.js"],[null,null,"https://github.com/google/closure-library/blob/master/closure/goog/result/resultutil.js#L503"]],[[[null,"<p>Given a DependentResult, cancels the Results it depends on (that is, the\nresults returned by getParentResults). This function does not recurse,\nso e.g. parents of parents are not canceled; only the immediate parents of\nthe given Result are canceled.</p>\n<p>Example using &#64;see goog.result.combine:</p>\n <pre>\n var result1 &#61; xhr.get(&#39;testdata/xhr_test_text.data&#39;);\n\n // Get a second independent Result.\n var result2 &#61; xhr.getJson(&#39;testdata/xhr_test_json.data&#39;);\n\n // Create a Result that resolves when both prior results resolve.\n var combinedResult &#61; goog.result.combineOnSuccess(result1, result2);\n\n combinedResult.wait(function() {\n   if (combinedResult.isCanceled()) {\n     goog.result.cancelParentResults(combinedResult);\n   }\n });\n\n // Now, canceling combinedResult will cancel both result1 and result2.\n combinedResult.cancel();\n </pre>\n"]]],null,null,null,null,null,[],[]],[],null,[["dependentResult",[null,null,null,["goog.result.DependentResult",null,[null,null,[null,null,"goog.result.DependentResult.html"]],null,[]]],[[[null,"<p>A Result that is\ndependent on the values of other Results (for example the Result of a\ngoog.result.combine, goog.result.chain, or goog.result.transform call).</p>\n"]]]]],[null,[null,null,null,["boolean",null,null,1,[]]],[[[null,"<p>True if any results were successfully canceled; otherwise\nfalse.\nTODO(user): Implement a recursive version of this that cancels all\nancestor results.</p>\n"]]]],[]],[["canceledResult",[null,99,null,[null,null,"closure/goog/result/resultutil.js"],[null,null,"https://github.com/google/closure-library/blob/master/closure/goog/result/resultutil.js#L99"]],[[[null,"<p>Returns a canceled result.\nThe result will be resolved to an error of type CancelError.</p>\n<p>Example:</p>\n <pre>\n\n var result &#61; goog.result.canceledResult();\n assertEquals(goog.result.Result.State.ERROR, result.getState());\n var error &#61; result.getError();\n assertTrue(error instanceof goog.result.Result.CancelError);\n\n </pre>\n"]]],null,null,null,null,null,[],[]],[],null,[],[null,[null,null,null,["goog.result.Result",null,[null,null,[null,null,"goog.result.Result.html"]],null,[]]],[[[null,"<p>A canceled Result.</p>\n"]]]],[]],[["chain",[null,322,null,[null,null,"closure/goog/result/resultutil.js"],[null,null,"https://github.com/google/closure-library/blob/master/closure/goog/result/resultutil.js#L322"]],[[[null,"<p>The chain function aids in chaining of asynchronous Results. This provides a\nconvenience for use cases where asynchronous operations must happen serially\ni.e. subsequent asynchronous operations are dependent on data returned by\nprior asynchronous operations.</p>\n<p>It accepts a result and an action callback as arguments and returns a\nresult. The action callback is called when the first result succeeds and is\nsupposed to return a second result. The returned result is resolved when one\nof both of the results resolve (depending on their success or failure.) The\nstate and value of the returned result in the various cases is documented\nbelow:</p>\n <pre>\n\n First Result State:    Second Result State:    Returned Result State:\n SUCCESS                SUCCESS                 SUCCESS\n SUCCESS                ERROR                   ERROR\n ERROR                  Not created             ERROR\n </pre>\n<p>The value of the returned result, in the case both results succeed, is the\nvalue of the second result (the result returned by the action callback.)</p>\n<p>Example:</p>\n <pre>\n\n var testDataResult &#61; xhr.get(&#39;testdata/xhr_test_text.data&#39;);\n\n // Chain this result to perform another asynchronous operation when this\n // Result is resolved.\n var chainedResult &#61; goog.result.chain(testDataResult,\n     function(testDataResult) {\n\n       // The result value of testDataResult is the URL for JSON data.\n       var jsonDataUrl &#61; testDataResult.getValue();\n\n       // Create a new Result object when the original result is resolved.\n       var jsonResult &#61; xhr.getJson(jsonDataUrl);\n\n       // Return the newly created Result.\n       return jsonResult;\n     });\n\n // The chained result resolves to success when both results resolve to\n // success.\n goog.result.waitOnSuccess(chainedResult, function(resultValue, result) {\n\n   // At this point, both results have succeeded and we can use the JSON\n   // data returned by the second asynchronous call.\n   var jsonData &#61; resultValue;\n   assertEquals(&#39;ok&#39;, jsonData[&#39;stat&#39;]);\n });\n\n // Attach the error handler to be called when either Result fails.\n goog.result.waitOnError(chainedResult, function(result) {\n   alert(&#39;chained result failed!&#39;);\n });\n </pre>\n"]]],null,null,null,null,null,[],[]],["T"],null,[["result",[null,null,null,["goog.result.Result",null,[null,null,[null,null,"goog.result.Result.html"]],null,[]]],[[[null,"<p>The result to chain.</p>\n"]]]],["actionCallback",[null,null,[null,[null,null,null,null,null,[[[null,null,null,["T",null,null,null,[]]],[null,null,null,null,null,null,null,null,null,1]]]],[[null,null,null,["goog.result.Result",null,[null,null,[null,null,"goog.result.Result.html"]],null,[]]]],[null,null,null,["goog.result.Result",null,[null,null,[null,null,"goog.result.Result.html"]],null,[]]]]],[[[null,"<p>The callback called when the result is resolved. This\ncallback must return a Result.</p>\n"]]]],["opt_scope",[1,null,null,null,null,[[[null,null,null,["T",null,null,null,[]]],[null,null,null,null,null,null,null,null,null,1],[null,null,null,null,null,null,null,null,1]]]],[[[null,"<p>Optional scope for the action callback.</p>\n"]]]]],[null,[null,null,null,["goog.result.DependentResult",null,[null,null,[null,null,"goog.result.DependentResult.html"]],null,[]]],[[[null,"<p>A result that is resolved when both\nthe given Result and the Result returned by the actionCallback have\nresolved.</p>\n"]]]],[]],[["combine",[null,379,null,[null,null,"closure/goog/result/resultutil.js"],[null,null,"https://github.com/google/closure-library/blob/master/closure/goog/result/resultutil.js#L379"]],[[[null,"<p>Returns a result that waits on all given results to resolve. Once all have\nresolved, the returned result will succeed (and never error).</p>\n<p>Example:</p>\n <pre>\n\n var result1 &#61; xhr.get(&#39;testdata/xhr_test_text.data&#39;);\n\n // Get a second independent Result.\n var result2 &#61; xhr.getJson(&#39;testdata/xhr_test_json.data&#39;);\n\n // Create a Result that resolves when both prior results resolve.\n var combinedResult &#61; goog.result.combine(result1, result2);\n\n // Process data after resolution of both results.\n goog.result.waitOnSuccess(combinedResult, function(results) {\n   goog.array.forEach(results, function(result) {\n       alert(result.getState());\n   });\n });\n </pre>\n"]]],null,null,null,null,null,[],[]],[],null,[["var_args",[null,1,null,["goog.result.Result",null,[null,null,[null,null,"goog.result.Result.html"]],null,[]]],[[[null,"<p>The results to wait on.</p>\n"]]]]],[null,[null,null,null,["goog.result.DependentResult",null,[null,null,[null,null,"goog.result.DependentResult.html"]],null,[]]],[[[null,"<p>A new Result whose eventual value will\nbe the resolved given Result objects.</p>\n"]]]],[]],[["combineOnSuccess",[null,445,null,[null,null,"closure/goog/result/resultutil.js"],[null,null,"https://github.com/google/closure-library/blob/master/closure/goog/result/resultutil.js#L445"]],[[[null,"<p>Returns a result that waits on all given results to resolve. Once all have\nresolved, the returned result will succeed if and only if all given results\nsucceeded. Otherwise it will error.</p>\n<p>Example:</p>\n <pre>\n\n var result1 &#61; xhr.get(&#39;testdata/xhr_test_text.data&#39;);\n\n // Get a second independent Result.\n var result2 &#61; xhr.getJson(&#39;testdata/xhr_test_json.data&#39;);\n\n // Create a Result that resolves when both prior results resolve.\n var combinedResult &#61; goog.result.combineOnSuccess(result1, result2);\n\n // Process data after successful resolution of both results.\n goog.result.waitOnSuccess(combinedResult, function(results) {\n   var textData &#61; results[0].getValue();\n   var jsonData &#61; results[1].getValue();\n   assertEquals(&#39;Just some data.&#39;, textData);\n   assertEquals(&#39;ok&#39;, jsonData[&#39;stat&#39;]);\n });\n\n // Handle errors when either or both results failed.\n goog.result.waitOnError(combinedResult, function(combined) {\n   var results &#61; combined.getError();\n\n   if (results[0].getState() &#61;&#61; goog.result.Result.State.ERROR) {\n     alert(&#39;result1 failed&#39;);\n   }\n\n   if (results[1].getState() &#61;&#61; goog.result.Result.State.ERROR) {\n     alert(&#39;result2 failed&#39;);\n   }\n });\n </pre>\n"]]],null,null,null,null,null,[],[]],[],null,[["var_args",[null,1,null,["goog.result.Result",null,[null,null,[null,null,"goog.result.Result.html"]],null,[]]],[[[null,"<p>The results to wait on.</p>\n"]]]]],[null,[null,null,null,["goog.result.DependentResult",null,[null,null,[null,null,"goog.result.DependentResult.html"]],null,[]]],[[[null,"<p>A new Result whose eventual value will\nbe an array of values of the given Result objects.</p>\n"]]]],[]],[["failedResult",[null,76,null,[null,null,"closure/goog/result/resultutil.js"],[null,null,"https://github.com/google/closure-library/blob/master/closure/goog/result/resultutil.js#L76"]],[[[null,"<p>Returns a failed result with the optional error slug set.</p>\n<p>Example:</p>\n <pre>\n\n var error &#61; new Error(&#39;something-failed&#39;);\n var result &#61; goog.result.failedResult(error);\n assertEquals(goog.result.Result.State.ERROR, result.getState());\n assertEquals(error, result.getError());\n\n </pre>\n"]]],null,null,null,null,null,[],[]],[],null,[["opt_error",[1,null,null,null,null,null,1],[[[null,"<p>The error to which the result should resolve.</p>\n"]]]]],[null,[null,null,null,["goog.result.Result",null,[null,null,[null,null,"goog.result.Result.html"]],null,[]]],[[[null,"<p>A Result object that has already been resolved\nto the supplied Error.</p>\n"]]]],[]],[["successfulResult",[null,52,null,[null,null,"closure/goog/result/resultutil.js"],[null,null,"https://github.com/google/closure-library/blob/master/closure/goog/result/resultutil.js#L52"]],[[[null,"<p>Returns a successful result containing the provided value.</p>\n<p>Example:</p>\n <pre>\n\n var value &#61; &#39;some-value&#39;;\n var result &#61; goog.result.immediateResult(value);\n assertEquals(goog.result.Result.State.SUCCESS, result.getState());\n assertEquals(value, result.getValue());\n\n </pre>\n"]]],null,null,null,null,null,[],[]],[],null,[["value",[null,null,null,null,null,null,1],[[[null,"<p>The value of the result.</p>\n"]]]]],[null,[null,null,null,["goog.result.Result",null,[null,null,[null,null,"goog.result.Result.html"]],null,[]]],[[[null,"<p>A Result object that has already been resolved\nto the supplied value.</p>\n"]]]],[]],[["transform",[null,238,null,[null,null,"closure/goog/result/resultutil.js"],[null,null,"https://github.com/google/closure-library/blob/master/closure/goog/result/resultutil.js#L238"]],[[[null,"<p>Given a result and a transform function, returns a new result whose value,\non success, will be the value of the given result after having been passed\nthrough the transform function.</p>\n<p>If the given result is an error, the returned result is also an error and the\ntransform will not be called.</p>\n<p>Example:</p>\n <pre>\n\n var result &#61; xhr.getJson(&#39;testdata/xhr_test_json.data&#39;);\n\n // Transform contents of returned data using &#39;processJson&#39; and create a\n // transformed result to use returned JSON.\n var transformedResult &#61; goog.result.transform(result, processJson);\n\n // Attach success and failure handlers to the transformed result.\n goog.result.waitOnSuccess(transformedResult, function(resultValue, result) {\n   var jsonData &#61; resultValue;\n   assertEquals(&#39;ok&#39;, jsonData[&#39;stat&#39;]);\n });\n\n goog.result.waitOnError(transformedResult, function(error) {\n   // Failed getJson call\n });\n </pre>\n"]]],null,null,null,null,null,[],[]],[],null,[["result",[null,null,null,["goog.result.Result",null,[null,null,[null,null,"goog.result.Result.html"]],null,[]]],[[[null,"<p>The result whose value will be\ntransformed.</p>\n"]]]],["transformer",[null,null,[null,null,[[null,null,null,null,null,null,null,1]],[null,null,null,null,null,null,null,1]]],[[[null,"<p>The transformer\nfunction. The return value of this function will become the value of the\nreturned result.</p>\n"]]]]],[null,[null,null,null,["goog.result.DependentResult",null,[null,null,[null,null,"goog.result.DependentResult.html"]],null,[]]],[[[null,"<p>A new Result whose eventual value will\nbe the returned value of the transformer function.</p>\n"]]]],[]],[["wait",[null,128,null,[null,null,"closure/goog/result/resultutil.js"],[null,null,"https://github.com/google/closure-library/blob/master/closure/goog/result/resultutil.js#L128"]],[[[null,"<p>Calls the handler on resolution of the result (success or failure).\nThe handler is passed the result object as the only parameter. The call will\nbe immediate if the result is no longer pending.</p>\n<p>Example:</p>\n <pre>\n\n var result &#61; xhr.get(&#39;testdata/xhr_test_text.data&#39;);\n\n // Wait for the result to be resolved and alert it&#39;s state.\n goog.result.wait(result, function(result) {\n   alert(&#39;State: &#39; &#43; result.getState());\n });\n </pre>\n"]]],null,null,null,null,null,[],[]],["T"],null,[["result",[null,null,null,["goog.result.Result",null,[null,null,[null,null,"goog.result.Result.html"]],null,[]]],[[[null,"<p>The result to install the handlers.</p>\n"]]]],["handler",[null,null,[null,[null,null,null,null,null,[[[null,null,null,["T",null,null,null,[]]],[null,null,null,null,null,null,null,null,null,1]]]],[[null,null,null,["goog.result.Result",null,[null,null,[null,null,"goog.result.Result.html"]],null,[]]]],[null,null,null,null,null,null,null,1]]],[[[null,"<p>The handler to be\ncalled. The handler is passed the result object as the only parameter.</p>\n"]]]],["opt_scope",[1,null,null,null,null,[[[null,null,null,["T",null,null,null,[]]],[null,null,null,null,null,null,null,null,null,1],[null,null,null,null,null,null,null,null,1]]]],[[[null,"<p>Optional scope for the handler.</p>\n"]]]]],null,[]],[["waitOnError",[null,191,null,[null,null,"closure/goog/result/resultutil.js"],[null,null,"https://github.com/google/closure-library/blob/master/closure/goog/result/resultutil.js#L191"]],[[[null,"<p>Calls the handler if the result action errors. The result object is passed as\nthe only parameter to the handler. The call will be immediate if the result\nobject has already resolved to an error.</p>\n<p>Example:</p>\n <pre>\n\n var result &#61; xhr.get(&#39;testdata/xhr_test_text.data&#39;);\n\n // Attach a failure handler.\n goog.result.waitOnError(result, function(error) {\n  // Failed asynchronous call!\n });\n </pre>\n"]]],null,null,null,null,null,[],[]],["T"],null,[["result",[null,null,null,["goog.result.Result",null,[null,null,[null,null,"goog.result.Result.html"]],null,[]]],[[[null,"<p>The result to install the handlers.</p>\n"]]]],["handler",[null,null,[null,[null,null,null,null,null,[[[null,null,null,["T",null,null,null,[]]],[null,null,null,null,null,null,null,null,null,1]]]],[[null,null,null,null,null,null,null,1],[null,null,null,["goog.result.Result",null,[null,null,[null,null,"goog.result.Result.html"]],null,[]]]],[null,null,null,null,null,null,null,1]]],[[[null,"<p>The handler to be\ncalled. The handler is passed the error and the result object as\nparameters.</p>\n"]]]],["opt_scope",[1,null,null,null,null,[[[null,null,null,["T",null,null,null,[]]],[null,null,null,null,null,null,null,null,null,1],[null,null,null,null,null,null,null,null,1]]]],[[[null,"<p>Optional scope for the handler.</p>\n"]]]]],null,[]],[["waitOnSuccess",[null,157,null,[null,null,"closure/goog/result/resultutil.js"],[null,null,"https://github.com/google/closure-library/blob/master/closure/goog/result/resultutil.js#L157"]],[[[null,"<p>Calls the handler if the result succeeds. The result object is the only\nparameter passed to the handler. The call will be immediate if the result\nhas already succeeded.</p>\n<p>Example:</p>\n <pre>\n\n var result &#61; xhr.get(&#39;testdata/xhr_test_text.data&#39;);\n\n // attach a success handler.\n goog.result.waitOnSuccess(result, function(resultValue, result) {\n   var datavalue &#61; result.getvalue();\n   alert(&#39;value: &#39; &#43; datavalue &#43; &#39; &#61;&#61; &#39; &#43; resultValue);\n });\n </pre>\n"]]],null,null,null,null,null,[],[]],["T"],null,[["result",[null,null,null,["goog.result.Result",null,[null,null,[null,null,"goog.result.Result.html"]],null,[]]],[[[null,"<p>The result to install the handlers.</p>\n"]]]],["handler",[null,null,[null,[null,null,null,null,null,[[[null,null,null,["T",null,null,null,[]]],[null,null,null,null,null,null,null,null,null,1]]]],[[null,null,null,null,null,null,null,1],[null,null,null,["goog.result.Result",null,[null,null,[null,null,"goog.result.Result.html"]],null,[]]]],[null,null,null,null,null,null,null,1]]],[[[null,"<p>The handler to be\ncalled. The handler is passed the result value and the result as\nparameters.</p>\n"]]]],["opt_scope",[1,null,null,null,null,[[[null,null,null,["T",null,null,null,[]]],[null,null,null,null,null,null,null,null,null,1],[null,null,null,null,null,null,null,null,1]]]],[[[null,"<p>Optional scope for the handler.</p>\n"]]]]],null,[]]],[],null,[],[],null,[],[],[],[["goog.result",null,[null,null,[null,null,"goog.result.html"]],null,[]],null,null,1],null,"goog.result.html","goog.result",[],[],[],[]]]]]