{"2":{"1":[{"1":"goog.events","5":{"1":"closure/goog/events/browserfeature.js","2":21,"3":"https://github.com/google/closure-library/blob/master/closure/goog/events/browserfeature.js#L21"},"6":{"1":[{"1":"ActionEvent","2":"goog.events.ActionEvent.html","3":{"1":[{"2":"<p>This class is used for the goog.events.ActionHandler.EventType.ACTION event.</p>\n"}]}},{"1":"ActionEventWrapper_","2":"goog.events.ActionEventWrapper_.html","3":{"1":[{"2":"<p>Event wrapper for action handling.</p>\n"}]}},{"1":"ActionHandler","2":"goog.events.ActionHandler.html","3":{"1":[{"2":"<p>A wrapper around an element that you want to listen to ACTION events on.</p>\n"}]}},{"1":"BeforeActionEvent","2":"goog.events.BeforeActionEvent.html","3":{"1":[{"2":"<p>This class is used for the goog.events.ActionHandler.EventType.BEFOREACTION\nevent.</p>\n"}]}},{"1":"BrowserEvent","2":"goog.events.BrowserEvent.html","3":{"1":[{"2":"<p>Accepts a browser event object and creates a patched, cross browser event\nobject.</p>\n"}]}},{"1":"Event","2":"goog.events.Event.html","3":{"1":[{"2":"<p>A base class for event objects, so that they can support preventDefault and\nstopPropagation.</p>\n"}]}},{"1":"EventHandler","2":"goog.events.EventHandler.html","3":{"1":[{"2":"<p>Super class for objects that want to easily manage a number of event\nlisteners.</p>\n"}]}},{"1":"EventId","2":"goog.events.EventId.html","3":{"1":[{"2":"<p>A templated class that is used when registering for events.</p>\n"}]}},{"1":"EventTarget","2":"goog.events.EventTarget.html","3":{"1":[{"2":"<p>An implementation of <code>goog.events.Listenable</code> with full W3C\nEventTarget-like support (capture/bubble mechanism, stopping event\npropagation, preventing default actions).</p>\n"}]}},{"1":"FileDropHandler","2":"goog.events.FileDropHandler.html","3":{"1":[{"2":"<p>A files drag and drop event detector.</p>\n"}]}},{"1":"FocusHandler","2":"goog.events.FocusHandler.html","3":{"1":[{"2":"<p>This event handler allows you to catch focus events when descendants gain or\nloses focus.</p>\n"}]}},{"1":"ImeHandler","2":"goog.events.ImeHandler.html","3":{"1":[{"2":"<p>Dispatches high-level events for IMEs.</p>\n"}]}},{"1":"InputHandler","2":"goog.events.InputHandler.html","3":{"1":[{"2":"<p>This event handler will dispatch events when the user types into a text\ninput, password input or a textarea</p>\n"}]}},{"1":"KeyEvent","2":"goog.events.KeyEvent.html","3":{"1":[{"2":"<p>This class is used for the goog.events.KeyHandler.EventType.KEY event and\nit overrides the key code with the fixed key code.</p>\n"}]}},{"1":"KeyHandler","2":"goog.events.KeyHandler.html","3":{"1":[{"2":"<p>A wrapper around an element that you want to listen to keyboard events on.</p>\n"}]}},{"1":"Listener","2":"goog.events.Listener.html","3":{"1":[{"2":"<p>Simple class that stores information about a listener</p>\n"}]}},{"1":"ListenerMap","2":"goog.events.ListenerMap.html","3":{"1":[{"2":"<p>Creates a new listener map.</p>\n"}]}},{"1":"MouseWheelEvent","2":"goog.events.MouseWheelEvent.html","3":{"1":[{"2":"<p>A base class for mouse wheel events.</p>\n"}]}},{"1":"MouseWheelHandler","2":"goog.events.MouseWheelHandler.html","3":{"1":[{"2":"<p>This event handler allows you to catch mouse wheel events in a consistent\nmanner.</p>\n"}]}},{"1":"OnlineHandler","2":"goog.events.OnlineHandler.html","3":{"1":[{"2":"<p>Basic object for detecting whether the online state changes.</p>\n"}]}},{"1":"PasteHandler","2":"goog.events.PasteHandler.html","3":{"1":[{"2":"<p>A paste event detector.</p>\n"}]}},{"1":"WheelEvent","2":"goog.events.WheelEvent.html","3":{"1":[{"2":"<p>A common class for wheel events.</p>\n"}]}},{"1":"WheelHandler","2":"goog.events.WheelHandler.html","3":{"1":[{"2":"<p>This event handler allows you to catch wheel events in a consistent manner.</p>\n"}]}}],"2":[{"1":"BrowserFeature","2":"goog.events.BrowserFeature.html","3":{"1":[{"2":"<p>Enum of browser capabilities.</p>\n"}]}},{"1":"CaptureSimulationMode","2":"goog.events.CaptureSimulationMode.html","3":{}},{"1":"EventType","2":"goog.events.EventType.html","3":{"1":[{"2":"<p>Constants for event names.</p>\n"}]}},{"1":"KeyCodes","2":"goog.events.KeyCodes.html","3":{"1":[{"2":"<p>Key codes for common characters.</p>\n"}]}},{"1":"KeyNames","2":"goog.events.KeyNames.html","3":{"1":[{"2":"<p>Key names for common characters.</p>\n"}]}},{"1":"Keys","2":"goog.events.Keys.html","3":{"1":[{"2":"<p>Key values for common characters.</p>\n"}]}}],"3":[{"1":"EventWrapper","2":"goog.events.EventWrapper.html","3":{"1":[{"2":"<p>Interface for event wrappers.</p>\n"}]},"4":{"5":true}},{"1":"Listenable","2":"goog.events.Listenable.html","3":{"1":[{"2":"<p>A listenable interface.</p>\n"}]},"4":{"5":true}},{"1":"ListenableKey","2":"goog.events.ListenableKey.html","3":{"1":[{"2":"<p>An interface that describes a single registered listener.</p>\n"}]},"4":{"5":true}}]},"7":{},"8":{},"10":[{"1":{"1":"EventLike","2":{"1":"closure/goog/events/event.js","2":41,"3":"https://github.com/google/closure-library/blob/master/closure/goog/events/event.js#L41"},"3":{"1":[{"2":"<p>A typedef for event like objects that are dispatchable via the\ngoog.events.dispatchEvent function. strings are treated as the type for a\ngoog.events.Event. Objects are treated as an extension of a new\ngoog.events.Event with the type property of the object being used as the type\nof the Event.</p>\n"}]}},"2":{"6":{"1":[{"4":{"1":"string","4":true}},{"4":{"1":"Object","4":true}},{"10":true}]}}},{"1":{"1":"Key","2":{"1":"closure/goog/events/events.js","2":73,"3":"https://github.com/google/closure-library/blob/master/closure/goog/events/events.js#L73"},"3":{}},"2":{"6":{"1":[{"4":{"1":"number","4":true}},{"4":{"1":"goog.events.ListenableKey","3":{"1":"goog.events.ListenableKey.html"}}},{"10":true}]}}},{"1":{"1":"ListenableType","2":{"1":"closure/goog/events/events.js","2":79,"3":"https://github.com/google/closure-library/blob/master/closure/goog/events/events.js#L79"},"3":{}},"2":{"6":{"1":[{"4":{"1":"EventTarget"}},{"4":{"1":"goog.events.Listenable","3":{"1":"goog.events.Listenable.html"}}},{"10":true}]}}}],"12":[{"1":{"1":"dispatchEvent","2":{"1":"closure/goog/events/events.js","2":763,"3":"https://github.com/google/closure-library/blob/master/closure/goog/events/events.js#L763"},"3":{"1":[{"2":"<p>Dispatches an event (or event like object) and calls all listeners\nlistening for events of this type. The type of the event is decided by the\ntype property on the event object.</p>\n<p>If any of the listeners returns false OR calls preventDefault then this\nfunction will return false.  If one of the capture listeners calls\nstopPropagation, then the bubble listeners won&#39;t fire.</p>\n"}]}},"4":[{"1":"src","2":{"6":{"1":[{"4":{"1":"goog.events.Listenable","3":{"1":"goog.events.Listenable.html"}}},{"10":true}]}},"3":{"1":[{"2":"<p>The event target.</p>\n"}]}},{"1":"e","2":{"6":{"1":[{"4":{"1":"string","4":true}},{"4":{"1":"Object","4":true}},{"10":true}]}},"3":{"1":[{"2":"<p>Event object.</p>\n"}]}}],"5":{"2":{"4":{"1":"boolean","4":true}},"3":{"1":[{"2":"<p>If anyone called preventDefault on the event object (or\nif any of the handlers returns false) this will also return false.\nIf there are no handlers, or if all handlers return true, this returns\ntrue.</p>\n"}]}}},{"1":{"1":"expose","2":{"1":"closure/goog/events/events.js","2":631,"3":"https://github.com/google/closure-library/blob/master/closure/goog/events/events.js#L631"},"3":{"1":[{"2":"<p>Provides a nice string showing the normalized event objects public members</p>\n"}]}},"4":[{"1":"e","2":{"6":{"1":[{"4":{"1":"Object","4":true}},{"10":true}]}},"3":{"1":[{"2":"<p>Event Object.</p>\n"}]}}],"5":{"2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>String of the public members of the normalized event object.</p>\n"}]}}},{"1":{"1":"fireListener","2":{"1":"closure/goog/events/events.js","2":723,"3":"https://github.com/google/closure-library/blob/master/closure/goog/events/events.js#L723"},"3":{"1":[{"2":"<p>Fires a listener with a set of arguments</p>\n"}]}},"4":[{"1":"listener","2":{"6":{"1":[{"4":{"1":"goog.events.Listener","3":{"1":"goog.events.Listener.html"}}},{"10":true}]}},"3":{"1":[{"2":"<p>The listener object to call.</p>\n"}]}},{"1":"eventObject","2":{"6":{"1":[{"4":{"1":"Object","4":true}},{"10":true}]}},"3":{"1":[{"2":"<p>The event object to pass to the listener.</p>\n"}]}}],"5":{"2":{"7":true},"3":{"1":[{"2":"<p>Result of listener.</p>\n"}]}}},{"1":{"1":"fireListeners","2":{"1":"closure/goog/events/events.js","2":669,"3":"https://github.com/google/closure-library/blob/master/closure/goog/events/events.js#L669"},"3":{"1":[{"2":"<p>Fires an object&#39;s listeners of a particular type and phase</p>\n"}]}},"4":[{"1":"obj","2":{"6":{"1":[{"4":{"1":"Object","4":true}},{"10":true}]}},"3":{"1":[{"2":"<p>Object whose listeners to call.</p>\n"}]}},{"1":"type","2":{"6":{"1":[{"4":{"1":"string","4":true}},{"4":{"1":"goog.events.EventId","3":{"1":"goog.events.EventId.html"}}}]}},"3":{"1":[{"2":"<p>Event type.</p>\n"}]}},{"1":"capture","2":{"4":{"1":"boolean","4":true}},"3":{"1":[{"2":"<p>Which event phase.</p>\n"}]}},{"1":"eventObject","2":{"6":{"1":[{"4":{"1":"Object","4":true}},{"10":true}]}},"3":{"1":[{"2":"<p>Event object to be passed to listener.</p>\n"}]}}],"5":{"2":{"4":{"1":"boolean","4":true}},"3":{"1":[{"2":"<p>True if all listeners returned true else false.</p>\n"}]}}},{"1":{"1":"getListener","2":{"1":"closure/goog/events/events.js","2":578,"3":"https://github.com/google/closure-library/blob/master/closure/goog/events/events.js#L578"},"3":{"1":[{"2":"<p>Gets the goog.events.Listener for the event or null if no such listener is\nin use.</p>\n"}]}},"2":["EVENTOBJ"],"4":[{"1":"src","2":{"6":{"1":[{"4":{"1":"EventTarget"}},{"4":{"1":"goog.events.Listenable","3":{"1":"goog.events.Listenable.html"}}},{"10":true}]}},"3":{"1":[{"2":"<p>The target from\nwhich to get listeners.</p>\n"}]}},{"1":"type","2":{"6":{"1":[{"4":{"1":"string","4":true}},{"4":{"1":"goog.events.EventId","3":{"1":"goog.events.EventId.html"},"5":[{"6":{"1":[{"4":{"1":"EVENTOBJ"}},{"10":true}]}}]}},{"10":true}]}},"3":{"1":[{"2":"<p>The type of the event.</p>\n"}]}},{"1":"listener","2":{"6":{"1":[{"3":{"3":[{"6":{"1":[{"4":{"1":"EVENTOBJ"}},{"10":true}]}}],"4":{"8":true}}},{"5":{"1":[{"1":"handleEvent","2":{"3":{"3":[{"8":true}],"4":{"8":true}}}}]}},{"10":true}]}},"3":{"1":[{"2":"<p>The\nlistener function to get.</p>\n"}]}},{"1":"opt_capt","2":{"1":true,"6":{"1":[{"4":{"1":"boolean","4":true}},{"9":true}]}},"3":{"1":[{"2":"<p>In DOM-compliant browsers, this determines\nwhether the listener is fired during the\ncapture or bubble phase of the event.</p>\n"}]}},{"1":"opt_handler","2":{"1":true,"6":{"1":[{"4":{"1":"Object","4":true}},{"10":true},{"9":true}]}},"3":{"1":[{"2":"<p>Element in whose scope to call the listener.</p>\n"}]}}],"5":{"2":{"6":{"1":[{"4":{"1":"goog.events.ListenableKey","3":{"1":"goog.events.ListenableKey.html"}}},{"10":true}]}},"3":{"1":[{"2":"<p>the found listener or null if not found.</p>\n"}]}}},{"1":{"1":"getListeners","2":{"1":"closure/goog/events/events.js","2":544,"3":"https://github.com/google/closure-library/blob/master/closure/goog/events/events.js#L544"},"3":{"1":[{"2":"<p>Gets the listeners for a given object, type and capture phase.</p>\n"}]}},"4":[{"1":"obj","2":{"6":{"1":[{"4":{"1":"Object","4":true}},{"10":true}]}},"3":{"1":[{"2":"<p>Object to get listeners for.</p>\n"}]}},{"1":"type","2":{"6":{"1":[{"4":{"1":"string","4":true}},{"4":{"1":"goog.events.EventId","3":{"1":"goog.events.EventId.html"}}}]}},"3":{"1":[{"2":"<p>Event type.</p>\n"}]}},{"1":"capture","2":{"4":{"1":"boolean","4":true}},"3":{"1":[{"2":"<p>Capture phase?.</p>\n"}]}}],"5":{"2":{"6":{"1":[{"4":{"1":"Array","4":true,"5":[{"4":{"1":"goog.events.Listener","3":{"1":"goog.events.Listener.html"}}}]}},{"10":true}]}},"3":{"1":[{"2":"<p>Array of listener objects.</p>\n"}]}}},{"1":{"1":"getProxy","2":{"1":"closure/goog/events/events.js","2":273,"3":"https://github.com/google/closure-library/blob/master/closure/goog/events/events.js#L273"},"3":{"1":[{"2":"<p>Helper function for returning a proxy function.</p>\n"}]}},"5":{"2":{"4":{"1":"Function"}},"3":{"1":[{"2":"<p>A new or reused function object.</p>\n"}]}}},{"1":{"1":"getTotalListenerCount","2":{"1":"closure/goog/events/events.js","2":742,"3":"https://github.com/google/closure-library/blob/master/closure/goog/events/events.js#L742"},"3":{"1":[{"2":"<p>Gets the total number of listeners currently in the system.</p>\n"}]},"4":{"1":[{"2":"<p>This returns estimated count, now that Closure no longer\nstores a central listener registry. We still return an estimation\nto keep existing listener-related tests passing. In the near future,\nthis function will be removed.</p>\n"}]},"6":{"2":true}},"5":{"2":{"4":{"1":"number","4":true}},"3":{"1":[{"2":"<p>Number of listeners.</p>\n"}]}}},{"1":{"1":"getUniqueId","2":{"1":"closure/goog/events/events.js","2":925,"3":"https://github.com/google/closure-library/blob/master/closure/goog/events/events.js#L925"},"3":{"1":[{"2":"<p>Creates a unique event id.</p>\n"}]}},"4":[{"1":"identifier","2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>The identifier.</p>\n"}]}}],"5":{"2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>A unique identifier.</p>\n"}]}}},{"1":{"1":"hasListener","2":{"1":"closure/goog/events/events.js","2":615,"3":"https://github.com/google/closure-library/blob/master/closure/goog/events/events.js#L615"},"3":{"1":[{"2":"<p>Returns whether an event target has any active listeners matching the\nspecified signature. If either the type or capture parameters are\nunspecified, the function will match on the remaining criteria.</p>\n"}]}},"4":[{"1":"obj","2":{"6":{"1":[{"4":{"1":"EventTarget"}},{"4":{"1":"goog.events.Listenable","3":{"1":"goog.events.Listenable.html"}}},{"10":true}]}},"3":{"1":[{"2":"<p>Target to get\nlisteners for.</p>\n"}]}},{"1":"opt_type","2":{"1":true,"6":{"1":[{"4":{"1":"string","4":true}},{"4":{"1":"goog.events.EventId","3":{"1":"goog.events.EventId.html"}}},{"9":true}]}},"3":{"1":[{"2":"<p>Event type.</p>\n"}]}},{"1":"opt_capture","2":{"1":true,"6":{"1":[{"4":{"1":"boolean","4":true}},{"9":true}]}},"3":{"1":[{"2":"<p>Whether to check for capture or bubble-phase\nlisteners.</p>\n"}]}}],"5":{"2":{"4":{"1":"boolean","4":true}},"3":{"1":[{"2":"<p>Whether an event target has one or more listeners matching\nthe requested type and/or capture phase.</p>\n"}]}}},{"1":{"1":"listen","2":{"1":"closure/goog/events/events.js","2":169,"3":"https://github.com/google/closure-library/blob/master/closure/goog/events/events.js#L169"},"3":{"1":[{"2":"<p>Adds an event listener for a specific event on a native event\ntarget (such as a DOM element) or an object that has implemented\n<a href=\"goog.events.Listenable.html\"><code>goog.events.Listenable</code></a>. A listener can only be added once\nto an object and if it is added again the key for the listener is\nreturned. Note that if the existing listener is a one-off listener\n(registered via listenOnce), it will no longer be a one-off\nlistener after a call to listen().</p>\n"}]}},"2":["T","EVENTOBJ"],"4":[{"1":"src","2":{"6":{"1":[{"4":{"1":"EventTarget"}},{"4":{"1":"goog.events.Listenable","3":{"1":"goog.events.Listenable.html"}}},{"10":true}]}},"3":{"1":[{"2":"<p>The node to listen\nto events on.</p>\n"}]}},{"1":"type","2":{"6":{"1":[{"4":{"1":"string","4":true}},{"4":{"1":"goog.events.EventId","3":{"1":"goog.events.EventId.html"},"5":[{"6":{"1":[{"4":{"1":"EVENTOBJ"}},{"10":true}]}}]}},{"4":{"1":"Array","4":true}},{"10":true}]}},"3":{"1":[{"2":"<p>Event type or array of event types.</p>\n"}]}},{"1":"listener","2":{"6":{"1":[{"3":{"2":{"6":{"1":[{"4":{"1":"T"}},{"10":true}]}},"3":[{"6":{"1":[{"4":{"1":"EVENTOBJ"}},{"10":true}]}}],"4":{"8":true}}},{"5":{"1":[{"1":"handleEvent","2":{"3":{"3":[{"8":true}],"4":{"8":true}}}}]}},{"10":true}]}},"3":{"1":[{"2":"<p>Callback method, or an object with a handleEvent function.\nWARNING: passing an Object is now softly deprecated.</p>\n"}]}},{"1":"opt_capt","2":{"1":true,"6":{"1":[{"4":{"1":"boolean","4":true}},{"9":true}]}},"3":{"1":[{"2":"<p>Whether to fire in capture phase (defaults to\nfalse).</p>\n"}]}},{"1":"opt_handler","2":{"1":true,"6":{"1":[{"4":{"1":"T"}},{"10":true},{"9":true}]}},"3":{"1":[{"2":"<p>Element in whose scope to call the listener.</p>\n"}]}}],"5":{"2":{"6":{"1":[{"4":{"1":"number","4":true}},{"4":{"1":"goog.events.ListenableKey","3":{"1":"goog.events.ListenableKey.html"}}},{"10":true}]}},"3":{"1":[{"2":"<p>Unique key for the listener.</p>\n"}]}}},{"1":{"1":"listenOnce","2":{"1":"closure/goog/events/events.js","2":318,"3":"https://github.com/google/closure-library/blob/master/closure/goog/events/events.js#L318"},"3":{"1":[{"2":"<p>Adds an event listener for a specific event on a native event\ntarget (such as a DOM element) or an object that has implemented\n<a href=\"goog.events.Listenable.html\"><code>goog.events.Listenable</code></a>. After the event has fired the event\nlistener is removed from the target.</p>\n<p>If an existing listener already exists, listenOnce will do\nnothing. In particular, if the listener was previously registered\nvia listen(), listenOnce() will not turn the listener into a\none-off listener. Similarly, if there is already an existing\none-off listener, listenOnce does not modify the listeners (it is\nstill a once listener).</p>\n"}]}},"2":["T","EVENTOBJ"],"4":[{"1":"src","2":{"6":{"1":[{"4":{"1":"EventTarget"}},{"4":{"1":"goog.events.Listenable","3":{"1":"goog.events.Listenable.html"}}},{"10":true}]}},"3":{"1":[{"2":"<p>The node to listen\nto events on.</p>\n"}]}},{"1":"type","2":{"6":{"1":[{"4":{"1":"string","4":true}},{"4":{"1":"goog.events.EventId","3":{"1":"goog.events.EventId.html"},"5":[{"6":{"1":[{"4":{"1":"EVENTOBJ"}},{"10":true}]}}]}},{"4":{"1":"Array","4":true}},{"10":true}]}},"3":{"1":[{"2":"<p>Event type or array of event types.</p>\n"}]}},{"1":"listener","2":{"6":{"1":[{"3":{"2":{"6":{"1":[{"4":{"1":"T"}},{"10":true}]}},"3":[{"6":{"1":[{"4":{"1":"EVENTOBJ"}},{"10":true}]}}],"4":{"8":true}}},{"5":{"1":[{"1":"handleEvent","2":{"3":{"3":[{"8":true}],"4":{"8":true}}}}]}},{"10":true}]}},"3":{"1":[{"2":"<p>Callback method.</p>\n"}]}},{"1":"opt_capt","2":{"1":true,"6":{"1":[{"4":{"1":"boolean","4":true}},{"9":true}]}},"3":{"1":[{"2":"<p>Fire in capture phase?.</p>\n"}]}},{"1":"opt_handler","2":{"1":true,"6":{"1":[{"4":{"1":"T"}},{"10":true},{"9":true}]}},"3":{"1":[{"2":"<p>Element in whose scope to call the listener.</p>\n"}]}}],"5":{"2":{"6":{"1":[{"4":{"1":"number","4":true}},{"4":{"1":"goog.events.ListenableKey","3":{"1":"goog.events.ListenableKey.html"}}},{"10":true}]}},"3":{"1":[{"2":"<p>Unique key for the listener.</p>\n"}]}}},{"1":{"1":"listenWithWrapper","2":{"1":"closure/goog/events/events.js","2":355,"3":"https://github.com/google/closure-library/blob/master/closure/goog/events/events.js#L355"},"3":{"1":[{"2":"<p>Adds an event listener with a specific event wrapper on a DOM Node or an\nobject that has implemented <a href=\"goog.events.Listenable.html\"><code>goog.events.Listenable</code></a>. A listener can\nonly be added once to an object.</p>\n"}]}},"2":["T"],"4":[{"1":"src","2":{"6":{"1":[{"4":{"1":"EventTarget"}},{"4":{"1":"goog.events.Listenable","3":{"1":"goog.events.Listenable.html"}}},{"10":true}]}},"3":{"1":[{"2":"<p>The target to\nlisten to events on.</p>\n"}]}},{"1":"wrapper","2":{"6":{"1":[{"4":{"1":"goog.events.EventWrapper","3":{"1":"goog.events.EventWrapper.html"}}},{"10":true}]}},"3":{"1":[{"2":"<p>Event wrapper to use.</p>\n"}]}},{"1":"listener","2":{"6":{"1":[{"3":{"2":{"6":{"1":[{"4":{"1":"T"}},{"10":true}]}},"3":[{"8":true}],"4":{"8":true}}},{"5":{"1":[{"1":"handleEvent","2":{"3":{"3":[{"8":true}],"4":{"8":true}}}}]}},{"10":true}]}},"3":{"1":[{"2":"<p>Callback method, or an object with a handleEvent function.</p>\n"}]}},{"1":"opt_capt","2":{"1":true,"6":{"1":[{"4":{"1":"boolean","4":true}},{"9":true}]}},"3":{"1":[{"2":"<p>Whether to fire in capture phase (defaults to\nfalse).</p>\n"}]}},{"1":"opt_handler","2":{"1":true,"6":{"1":[{"4":{"1":"T"}},{"10":true},{"9":true}]}},"3":{"1":[{"2":"<p>Element in whose scope to call the listener.</p>\n"}]}}]},{"1":{"1":"protectBrowserEventEntryPoint","2":{"1":"closure/goog/events/events.js","2":779,"3":"https://github.com/google/closure-library/blob/master/closure/goog/events/events.js#L779"},"3":{"1":[{"2":"<p>Installs exception protection for the browser event entry point using the\ngiven error handler.</p>\n"}]}},"4":[{"1":"errorHandler","2":{"6":{"1":[{"4":{"1":"goog.debug.ErrorHandler","3":{"1":"goog.debug.ErrorHandler.html"}}},{"10":true}]}},"3":{"1":[{"2":"<p>Error handler with which to\nprotect the entry point.</p>\n"}]}}]},{"1":{"1":"removeAll","2":{"1":"closure/goog/events/events.js","2":500,"3":"https://github.com/google/closure-library/blob/master/closure/goog/events/events.js#L500"},"3":{"1":[{"2":"<p>Removes all listeners from an object. You can also optionally\nremove listeners of a particular type.</p>\n"}]}},"4":[{"1":"obj","2":{"6":{"1":[{"4":{"1":"Object","4":true}},{"10":true},{"9":true}]}},"3":{"1":[{"2":"<p>Object to remove listeners from. Must be an\nEventTarget or a goog.events.Listenable.</p>\n"}]}},{"1":"opt_type","2":{"1":true,"6":{"1":[{"4":{"1":"string","4":true}},{"4":{"1":"goog.events.EventId","3":{"1":"goog.events.EventId.html"}}},{"9":true}]}},"3":{"1":[{"2":"<p>Type of event to remove.\nDefault is all types.</p>\n"}]}}],"5":{"2":{"4":{"1":"number","4":true}},"3":{"1":[{"2":"<p>Number of listeners removed.</p>\n"}]}}},{"1":{"1":"unlisten","2":{"1":"closure/goog/events/events.js","2":378,"3":"https://github.com/google/closure-library/blob/master/closure/goog/events/events.js#L378"},"3":{"1":[{"2":"<p>Removes an event listener which was added with listen().</p>\n"}]}},"2":["EVENTOBJ"],"4":[{"1":"src","2":{"6":{"1":[{"4":{"1":"EventTarget"}},{"4":{"1":"goog.events.Listenable","3":{"1":"goog.events.Listenable.html"}}},{"10":true}]}},"3":{"1":[{"2":"<p>The target to stop\nlistening to events on.</p>\n"}]}},{"1":"type","2":{"6":{"1":[{"4":{"1":"string","4":true}},{"4":{"1":"goog.events.EventId","3":{"1":"goog.events.EventId.html"},"5":[{"6":{"1":[{"4":{"1":"EVENTOBJ"}},{"10":true}]}}]}},{"4":{"1":"Array","4":true}},{"10":true}]}},"3":{"1":[{"2":"<p>Event type or array of event types to unlisten to.</p>\n"}]}},{"1":"listener","2":{"6":{"1":[{"3":{"3":[{"8":true}],"4":{"8":true}}},{"5":{"1":[{"1":"handleEvent","2":{"3":{"3":[{"8":true}],"4":{"8":true}}}}]}},{"10":true}]}},"3":{"1":[{"2":"<p>The\nlistener function to remove.</p>\n"}]}},{"1":"opt_capt","2":{"1":true,"6":{"1":[{"4":{"1":"boolean","4":true}},{"9":true}]}},"3":{"1":[{"2":"<p>In DOM-compliant browsers, this determines\nwhether the listener is fired during the capture or bubble phase of the\nevent.</p>\n"}]}},{"1":"opt_handler","2":{"1":true,"6":{"1":[{"4":{"1":"Object","4":true}},{"10":true},{"9":true}]}},"3":{"1":[{"2":"<p>Element in whose scope to call the listener.</p>\n"}]}}],"5":{"2":{"6":{"1":[{"4":{"1":"boolean","4":true}},{"10":true}]}},"3":{"1":[{"2":"<p>indicating whether the listener was there to remove.</p>\n"}]}}},{"1":{"1":"unlistenByKey","2":{"1":"closure/goog/events/events.js","2":423,"3":"https://github.com/google/closure-library/blob/master/closure/goog/events/events.js#L423"},"3":{"1":[{"2":"<p>Removes an event listener which was added with listen() by the key\nreturned by listen().</p>\n"}]}},"4":[{"1":"key","2":{"6":{"1":[{"4":{"1":"number","4":true}},{"4":{"1":"goog.events.ListenableKey","3":{"1":"goog.events.ListenableKey.html"}}},{"10":true}]}},"3":{"1":[{"2":"<p>The key returned by listen() for this\nevent listener.</p>\n"}]}}],"5":{"2":{"4":{"1":"boolean","4":true}},"3":{"1":[{"2":"<p>indicating whether the listener was there to remove.</p>\n"}]}}},{"1":{"1":"unlistenWithWrapper","2":{"1":"closure/goog/events/events.js","2":484,"3":"https://github.com/google/closure-library/blob/master/closure/goog/events/events.js#L484"},"3":{"1":[{"2":"<p>Removes an event listener which was added with listenWithWrapper().</p>\n"}]}},"4":[{"1":"src","2":{"6":{"1":[{"4":{"1":"EventTarget"}},{"4":{"1":"goog.events.Listenable","3":{"1":"goog.events.Listenable.html"}}},{"10":true}]}},"3":{"1":[{"2":"<p>The target to stop\nlistening to events on.</p>\n"}]}},{"1":"wrapper","2":{"6":{"1":[{"4":{"1":"goog.events.EventWrapper","3":{"1":"goog.events.EventWrapper.html"}}},{"10":true}]}},"3":{"1":[{"2":"<p>Event wrapper to use.</p>\n"}]}},{"1":"listener","2":{"6":{"1":[{"3":{"3":[{"8":true}],"4":{"8":true}}},{"5":{"1":[{"1":"handleEvent","2":{"3":{"3":[{"8":true}],"4":{"8":true}}}}]}},{"10":true}]}},"3":{"1":[{"2":"<p>The\nlistener function to remove.</p>\n"}]}},{"1":"opt_capt","2":{"1":true,"6":{"1":[{"4":{"1":"boolean","4":true}},{"9":true}]}},"3":{"1":[{"2":"<p>In DOM-compliant browsers, this determines\nwhether the listener is fired during the capture or bubble phase of the\nevent.</p>\n"}]}},{"1":"opt_handler","2":{"1":true,"6":{"1":[{"4":{"1":"Object","4":true}},{"10":true},{"9":true}]}},"3":{"1":[{"2":"<p>Element in whose scope to call the listener.</p>\n"}]}}]},{"1":{"1":"wrapListener","2":{"1":"closure/goog/events/events.js","2":961,"3":"https://github.com/google/closure-library/blob/master/closure/goog/events/events.js#L961"},"3":{}},"4":[{"1":"listener","2":{"6":{"1":[{"4":{"1":"Object","4":true}},{"10":true}]}},"3":{"1":[{"2":"<p>The listener function or an\nobject that contains handleEvent method.</p>\n"}]}}],"5":{"2":{"4":{"1":"Function"}},"3":{"1":[{"2":"<p>Either the original function or a function that\ncalls obj.handleEvent. If the same listener is passed to this\nfunction more than once, the same function is guaranteed to be\nreturned.</p>\n"}]}}}],"13":[{"1":{"1":"actionEventWrapper","2":{"1":"closure/goog/events/actioneventwrapper.js","2":62,"3":"https://github.com/google/closure-library/blob/master/closure/goog/events/actioneventwrapper.js#L62"},"3":{"1":[{"2":"<p>Singleton instance of ActionEventWrapper_.</p>\n"}]}},"2":{"6":{"1":[{"4":{"1":"goog.events.ActionEventWrapper_","3":{"1":"goog.events.ActionEventWrapper_.html"}}},{"10":true}]}}}],"20":[{"1":{"1":"goog.events.CAPTURE_SIMULATION_MODE","2":{"1":"closure/goog/events/events.js","2":136,"3":"https://github.com/google/closure-library/blob/master/closure/goog/events/events.js#L136"},"3":{"1":[{"2":"<p>The capture simulation mode for IE8-. By default,\nthis is ON.</p>\n"}]},"6":{"1":true}},"2":{"4":{"1":"number","4":true}}}],"21":{"1":{"1":"goog.events","3":{"1":"goog.events.html"}},"2":4},"23":"goog.events.html","24":"goog.events"}]}}