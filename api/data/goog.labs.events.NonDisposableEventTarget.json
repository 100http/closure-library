{"2":{"1":[{"1":"goog.labs.events.NonDisposableEventTarget","5":{"1":"closure/goog/labs/events/nondisposableeventtarget.js","2":69,"3":"https://github.com/google/closure-library/blob/master/closure/goog/labs/events/nondisposableeventtarget.js#L69"},"7":{"1":[{"2":"<p>An implementation of <code>goog.events.Listenable</code> with full W3C\nEventTarget-like support (capture/bubble mechanism, stopping event\npropagation, preventing default actions).</p>\n<p>You may subclass this class to turn your class into a Listenable.</p>\n<p>Unlike <a href=\"goog.events.EventTarget.html\"><code>goog.events.EventTarget</code></a>, this class does not implement\n<a href=\"goog.disposable.IDisposable.html\"><code>goog.disposable.IDisposable</code></a>. Instances of this class that have had\nIt is not necessary to call <a href=\"goog.dispose.html\"><code>goog.dispose</code></a>\nor <a href=\"goog.labs.events.NonDisposableEventTarget.html#removeAllListeners\"><code>#removeAllListeners</code></a> in order for an instance of this class\nto be garbage collected.</p>\n<p>Unless propagation is stopped, an event dispatched by an\nEventTarget will bubble to the parent returned by\n<code>getParentEventTarget</code>. To set the parent, call\n<code>setParentEventTarget</code>. Subclasses that don&#39;t support\nchanging the parent can override the setter to throw an error.</p>\n<p>Example usage:</p>\n <pre>\n   var source &#61; new goog.labs.events.NonDisposableEventTarget();\n   function handleEvent(e) {\n     alert(&#39;Type: &#39; &#43; e.type &#43; &#39;; Target: &#39; &#43; e.target);\n   }\n   source.listen(&#39;foo&#39;, handleEvent);\n   source.dispatchEvent(&#39;foo&#39;); // will call handleEvent\n </pre>\n<p>TODO(chrishenry|johnlenz): Consider a more modern, less viral\n(not based on inheritance) replacement of goog.Disposable, which will allow\ngoog.events.EventTarget to not be disposable.</p>\n"}]},"8":{"4":true},"14":{"1":{"1":"NonDisposableEventTarget","2":{"1":"closure/goog/labs/events/nondisposableeventtarget.js","2":69,"3":"https://github.com/google/closure-library/blob/master/closure/goog/labs/events/nondisposableeventtarget.js#L69"},"3":{"1":[{"2":"<p>An implementation of <code>goog.events.Listenable</code> with full W3C\nEventTarget-like support (capture/bubble mechanism, stopping event\npropagation, preventing default actions).</p>\n<p>You may subclass this class to turn your class into a Listenable.</p>\n<p>Unlike <a href=\"goog.events.EventTarget.html\"><code>goog.events.EventTarget</code></a>, this class does not implement\n<a href=\"goog.disposable.IDisposable.html\"><code>goog.disposable.IDisposable</code></a>. Instances of this class that have had\nIt is not necessary to call <a href=\"goog.dispose.html\"><code>goog.dispose</code></a>\nor <a href=\"goog.labs.events.NonDisposableEventTarget.html#removeAllListeners\"><code>#removeAllListeners</code></a> in order for an instance of this class\nto be garbage collected.</p>\n<p>Unless propagation is stopped, an event dispatched by an\nEventTarget will bubble to the parent returned by\n<code>getParentEventTarget</code>. To set the parent, call\n<code>setParentEventTarget</code>. Subclasses that don&#39;t support\nchanging the parent can override the setter to throw an error.</p>\n<p>Example usage:</p>\n <pre>\n   var source &#61; new goog.labs.events.NonDisposableEventTarget();\n   function handleEvent(e) {\n     alert(&#39;Type: &#39; &#43; e.type &#43; &#39;; Target: &#39; &#43; e.target);\n   }\n   source.listen(&#39;foo&#39;, handleEvent);\n   source.dispatchEvent(&#39;foo&#39;); // will call handleEvent\n </pre>\n<p>TODO(chrishenry|johnlenz): Consider a more modern, less viral\n(not based on inheritance) replacement of goog.Disposable, which will allow\ngoog.events.EventTarget to not be disposable.</p>\n"}]}},"3":true},"15":[{"1":{"1":"dispatchEvent","2":{"1":"closure/goog/labs/events/nondisposableeventtarget.js","2":115,"3":"https://github.com/google/closure-library/blob/master/closure/goog/labs/events/nondisposableeventtarget.js#L115"},"3":{"1":[{"2":"<p>Dispatches an event (or event like object) and calls all listeners\nlistening for events of this type. The type of the event is decided by the\ntype property on the event object.</p>\n<p>If any of the listeners returns false OR calls preventDefault then this\nfunction will return false.  If one of the capture listeners calls\nstopPropagation, then the bubble listeners won&#39;t fire.</p>\n"}]},"9":[{"1":"goog.events.Listenable","3":{"1":"goog.events.Listenable.html#dispatchEvent"}}]},"4":[{"1":"e","2":{"6":{"1":[{"4":{"1":"string","4":true}},{"4":{"1":"Object","4":true}},{"10":true}]}},"3":{"1":[{"2":"<p>Event object.</p>\n"}]}}],"5":{"2":{"4":{"1":"boolean","4":true}},"3":{"1":[{"2":"<p>If anyone called preventDefault on the event object (or\nif any of the listeners returns false) this will also return false.</p>\n"}]}}},{"1":{"1":"fireListeners","2":{"1":"closure/goog/labs/events/nondisposableeventtarget.js","2":178,"3":"https://github.com/google/closure-library/blob/master/closure/goog/labs/events/nondisposableeventtarget.js#L178"},"3":{"1":[{"2":"<p>Fires all registered listeners in this listenable for the given\ntype and capture mode, passing them the given eventObject. This\ndoes not perform actual capture/bubble. Only implementors of the\ninterface should be using this.</p>\n"}]},"9":[{"1":"goog.events.Listenable","3":{"1":"goog.events.Listenable.html#fireListeners"}}]},"4":[{"1":"type","2":{"6":{"1":[{"4":{"1":"string","4":true}},{"4":{"1":"goog.events.EventId","3":{"1":"goog.events.EventId.html"},"5":[{"6":{"1":[{"4":{"1":"EVENTOBJ"}},{"10":true}]}}]}}]}},"3":{"1":[{"2":"<p>The type of the\nlisteners to fire.</p>\n"}]}},{"1":"capture","2":{"4":{"1":"boolean","4":true}},"3":{"1":[{"2":"<p>The capture mode of the listeners to fire.</p>\n"}]}},{"1":"eventObject","2":{"6":{"1":[{"4":{"1":"EVENTOBJ"}},{"10":true}]}},"3":{"1":[{"2":"<p>The event object to fire.</p>\n"}]}}],"5":{"2":{"4":{"1":"boolean","4":true}},"3":{"1":[{"2":"<p>Whether all listeners succeeded without\nattempting to prevent default behavior. If any listener returns\nfalse or called goog.events.Event#preventDefault, this returns\nfalse.</p>\n"}]}}},{"1":{"1":"getListener","2":{"1":"closure/goog/labs/events/nondisposableeventtarget.js","2":217,"3":"https://github.com/google/closure-library/blob/master/closure/goog/labs/events/nondisposableeventtarget.js#L217"},"3":{"1":[{"2":"<p>Gets the goog.events.ListenableKey for the event or null if no such\nlistener is in use.</p>\n"}]},"9":[{"1":"goog.events.Listenable","3":{"1":"goog.events.Listenable.html#getListener"}}]},"4":[{"1":"type","2":{"6":{"1":[{"4":{"1":"string","4":true}},{"4":{"1":"goog.events.EventId","3":{"1":"goog.events.EventId.html"},"5":[{"6":{"1":[{"4":{"1":"EVENTOBJ"}},{"10":true}]}}]}}]}},"3":{"1":[{"2":"<p>The name of the event\nwithout the &#39;on&#39; prefix.</p>\n"}]}},{"1":"listener","2":{"3":{"2":{"6":{"1":[{"4":{"1":"SCOPE"}},{"10":true}]}},"3":[{"6":{"1":[{"4":{"1":"EVENTOBJ"}},{"10":true}]}}],"4":{"6":{"1":[{"4":{"1":"boolean","4":true}},{"9":true}]}}}},"3":{"1":[{"2":"<p>The\nlistener function to get.</p>\n"}]}},{"1":"capture","2":{"4":{"1":"boolean","4":true}},"3":{"1":[{"2":"<p>Whether the listener is a capturing listener.</p>\n"}]}},{"1":"opt_listenerScope","2":{"1":true,"6":{"1":[{"4":{"1":"SCOPE"}},{"10":true},{"9":true}]}},"3":{"1":[{"2":"<p>Object in whose scope to call the\nlistener.</p>\n"}]}}],"5":{"2":{"6":{"1":[{"4":{"1":"goog.events.ListenableKey","3":{"1":"goog.events.ListenableKey.html"}}},{"10":true}]}},"3":{"1":[{"2":"<p>the found listener or null if not found.</p>\n"}]}}},{"1":{"1":"getListeners","2":{"1":"closure/goog/labs/events/nondisposableeventtarget.js","2":210,"3":"https://github.com/google/closure-library/blob/master/closure/goog/labs/events/nondisposableeventtarget.js#L210"},"3":{"1":[{"2":"<p>Gets all listeners in this listenable for the given type and\ncapture mode.</p>\n"}]},"9":[{"1":"goog.events.Listenable","3":{"1":"goog.events.Listenable.html#getListeners"}}]},"4":[{"1":"type","2":{"6":{"1":[{"4":{"1":"string","4":true}},{"4":{"1":"goog.events.EventId","3":{"1":"goog.events.EventId.html"}}}]}},"3":{"1":[{"2":"<p>The type of the listeners to fire.</p>\n"}]}},{"1":"capture","2":{"4":{"1":"boolean","4":true}},"3":{"1":[{"2":"<p>The capture mode of the listeners to fire.</p>\n"}]}}],"5":{"2":{"4":{"1":"Array","4":true,"5":[{"4":{"1":"goog.events.ListenableKey","3":{"1":"goog.events.ListenableKey.html"}}}]}},"3":{"1":[{"2":"<p>An array of registered\nlisteners.</p>\n"}]}}},{"1":{"1":"getParentEventTarget","2":{"1":"closure/goog/labs/events/nondisposableeventtarget.js","2":97,"3":"https://github.com/google/closure-library/blob/master/closure/goog/labs/events/nondisposableeventtarget.js#L97"},"3":{"1":[{"2":"<p>Returns the parent of this event target to use for capture/bubble\nmechanism.</p>\n<p>NOTE(chrishenry): The name reflects the original implementation of\ncustom event target (<code>goog.events.EventTarget</code>). We decided\nthat changing the name is not worth it.</p>\n"}]},"9":[{"1":"goog.events.Listenable","3":{"1":"goog.events.Listenable.html#getParentEventTarget"}}]},"5":{"2":{"6":{"1":[{"4":{"1":"goog.events.Listenable","3":{"1":"goog.events.Listenable.html"}}},{"10":true}]}},"3":{"1":[{"2":"<p>The parent EventTarget or null if\nthere is no parent.</p>\n"}]}}},{"1":{"1":"hasListener","2":{"1":"closure/goog/labs/events/nondisposableeventtarget.js","2":225,"3":"https://github.com/google/closure-library/blob/master/closure/goog/labs/events/nondisposableeventtarget.js#L225"},"3":{"1":[{"2":"<p>Whether there is any active listeners matching the specified\nsignature. If either the type or capture parameters are\nunspecified, the function will match on the remaining criteria.</p>\n"}]},"9":[{"1":"goog.events.Listenable","3":{"1":"goog.events.Listenable.html#hasListener"}}]},"4":[{"1":"opt_type","2":{"1":true,"6":{"1":[{"4":{"1":"string","4":true}},{"4":{"1":"goog.events.EventId","3":{"1":"goog.events.EventId.html"},"5":[{"6":{"1":[{"4":{"1":"EVENTOBJ"}},{"10":true}]}}]}},{"9":true}]}},"3":{"1":[{"2":"<p>Event type.</p>\n"}]}},{"1":"opt_capture","2":{"1":true,"6":{"1":[{"4":{"1":"boolean","4":true}},{"9":true}]}},"3":{"1":[{"2":"<p>Whether to check for capture or bubble\nlisteners.</p>\n"}]}}],"5":{"2":{"4":{"1":"boolean","4":true}},"3":{"1":[{"2":"<p>Whether there is any active listeners matching\nthe requested type and/or capture phase.</p>\n"}]}}},{"1":{"1":"listen","2":{"1":"closure/goog/labs/events/nondisposableeventtarget.js","2":137,"3":"https://github.com/google/closure-library/blob/master/closure/goog/labs/events/nondisposableeventtarget.js#L137"},"3":{"1":[{"2":"<p>Adds an event listener. A listener can only be added once to an\nobject and if it is added again the key for the listener is\nreturned. Note that if the existing listener is a one-off listener\n(registered via listenOnce), it will no longer be a one-off\nlistener after a call to listen().</p>\n"}]},"9":[{"1":"goog.events.Listenable","3":{"1":"goog.events.Listenable.html#listen"}}]},"4":[{"1":"type","2":{"6":{"1":[{"4":{"1":"string","4":true}},{"4":{"1":"goog.events.EventId","3":{"1":"goog.events.EventId.html"},"5":[{"6":{"1":[{"4":{"1":"EVENTOBJ"}},{"10":true}]}}]}}]}},"3":{"1":[{"2":"<p>The event type id.</p>\n"}]}},{"1":"listener","2":{"3":{"2":{"6":{"1":[{"4":{"1":"SCOPE"}},{"10":true}]}},"3":[{"6":{"1":[{"4":{"1":"EVENTOBJ"}},{"10":true}]}}],"4":{"6":{"1":[{"4":{"1":"boolean","4":true}},{"9":true}]}}}},"3":{"1":[{"2":"<p>Callback\nmethod.</p>\n"}]}},{"1":"opt_useCapture","2":{"1":true,"6":{"1":[{"4":{"1":"boolean","4":true}},{"9":true}]}},"3":{"1":[{"2":"<p>Whether to fire in capture phase\n(defaults to false).</p>\n"}]}},{"1":"opt_listenerScope","2":{"1":true,"6":{"1":[{"4":{"1":"SCOPE"}},{"10":true},{"9":true}]}},"3":{"1":[{"2":"<p>Object in whose scope to call the\nlistener.</p>\n"}]}}],"5":{"2":{"4":{"1":"goog.events.ListenableKey","3":{"1":"goog.events.ListenableKey.html"}}},"3":{"1":[{"2":"<p>Unique key for the listener.</p>\n"}]}}},{"1":{"1":"listenOnce","2":{"1":"closure/goog/labs/events/nondisposableeventtarget.js","2":147,"3":"https://github.com/google/closure-library/blob/master/closure/goog/labs/events/nondisposableeventtarget.js#L147"},"3":{"1":[{"2":"<p>Adds an event listener that is removed automatically after the\nlistener fired once.</p>\n<p>If an existing listener already exists, listenOnce will do\nnothing. In particular, if the listener was previously registered\nvia listen(), listenOnce() will not turn the listener into a\none-off listener. Similarly, if there is already an existing\none-off listener, listenOnce does not modify the listeners (it is\nstill a once listener).</p>\n"}]},"9":[{"1":"goog.events.Listenable","3":{"1":"goog.events.Listenable.html#listenOnce"}}]},"4":[{"1":"type","2":{"6":{"1":[{"4":{"1":"string","4":true}},{"4":{"1":"goog.events.EventId","3":{"1":"goog.events.EventId.html"},"5":[{"6":{"1":[{"4":{"1":"EVENTOBJ"}},{"10":true}]}}]}}]}},"3":{"1":[{"2":"<p>The event type id.</p>\n"}]}},{"1":"listener","2":{"3":{"2":{"6":{"1":[{"4":{"1":"SCOPE"}},{"10":true}]}},"3":[{"6":{"1":[{"4":{"1":"EVENTOBJ"}},{"10":true}]}}],"4":{"6":{"1":[{"4":{"1":"boolean","4":true}},{"9":true}]}}}},"3":{"1":[{"2":"<p>Callback\nmethod.</p>\n"}]}},{"1":"opt_useCapture","2":{"1":true,"6":{"1":[{"4":{"1":"boolean","4":true}},{"9":true}]}},"3":{"1":[{"2":"<p>Whether to fire in capture phase\n(defaults to false).</p>\n"}]}},{"1":"opt_listenerScope","2":{"1":true,"6":{"1":[{"4":{"1":"SCOPE"}},{"10":true},{"9":true}]}},"3":{"1":[{"2":"<p>Object in whose scope to call the\nlistener.</p>\n"}]}}],"5":{"2":{"4":{"1":"goog.events.ListenableKey","3":{"1":"goog.events.ListenableKey.html"}}},"3":{"1":[{"2":"<p>Unique key for the listener.</p>\n"}]}}},{"1":{"1":"removeAllListeners","2":{"1":"closure/goog/labs/events/nondisposableeventtarget.js","2":171,"3":"https://github.com/google/closure-library/blob/master/closure/goog/labs/events/nondisposableeventtarget.js#L171"},"3":{"1":[{"2":"<p>Removes all listeners from this listenable. If type is specified,\nit will only remove listeners of the particular type. otherwise all\nregistered listeners will be removed.</p>\n"}]},"9":[{"1":"goog.events.Listenable","3":{"1":"goog.events.Listenable.html#removeAllListeners"}}]},"4":[{"1":"opt_type","2":{"1":true,"6":{"1":[{"4":{"1":"string","4":true}},{"9":true}]}},"3":{"1":[{"2":"<p>Type of event to remove, default is to\nremove all types.</p>\n"}]}}],"5":{"2":{"4":{"1":"number","4":true}},"3":{"1":[{"2":"<p>Number of listeners removed.</p>\n"}]}}},{"1":{"1":"setParentEventTarget","2":{"1":"closure/goog/labs/events/nondisposableeventtarget.js","2":108,"3":"https://github.com/google/closure-library/blob/master/closure/goog/labs/events/nondisposableeventtarget.js#L108"},"3":{"1":[{"2":"<p>Sets the parent of this event target to use for capture/bubble\nmechanism.</p>\n"}]}},"4":[{"1":"parent","2":{"6":{"1":[{"4":{"1":"goog.events.Listenable","3":{"1":"goog.events.Listenable.html"}}},{"10":true}]}},"3":{"1":[{"2":"<p>Parent listenable (null if none).</p>\n"}]}}]},{"1":{"1":"unlisten","2":{"1":"closure/goog/labs/events/nondisposableeventtarget.js","2":156,"3":"https://github.com/google/closure-library/blob/master/closure/goog/labs/events/nondisposableeventtarget.js#L156"},"3":{"1":[{"2":"<p>Removes an event listener which was added with listen() or listenOnce().</p>\n"}]},"9":[{"1":"goog.events.Listenable","3":{"1":"goog.events.Listenable.html#unlisten"}}]},"4":[{"1":"type","2":{"6":{"1":[{"4":{"1":"string","4":true}},{"4":{"1":"goog.events.EventId","3":{"1":"goog.events.EventId.html"},"5":[{"6":{"1":[{"4":{"1":"EVENTOBJ"}},{"10":true}]}}]}}]}},"3":{"1":[{"2":"<p>The event type id.</p>\n"}]}},{"1":"listener","2":{"3":{"2":{"6":{"1":[{"4":{"1":"SCOPE"}},{"10":true}]}},"3":[{"6":{"1":[{"4":{"1":"EVENTOBJ"}},{"10":true}]}}],"4":{"6":{"1":[{"4":{"1":"boolean","4":true}},{"9":true}]}}}},"3":{"1":[{"2":"<p>Callback\nmethod.</p>\n"}]}},{"1":"opt_useCapture","2":{"1":true,"6":{"1":[{"4":{"1":"boolean","4":true}},{"9":true}]}},"3":{"1":[{"2":"<p>Whether to fire in capture phase\n(defaults to false).</p>\n"}]}},{"1":"opt_listenerScope","2":{"1":true,"6":{"1":[{"4":{"1":"SCOPE"}},{"10":true},{"9":true}]}},"3":{"1":[{"2":"<p>Object in whose scope to call\nthe listener.</p>\n"}]}}],"5":{"2":{"4":{"1":"boolean","4":true}},"3":{"1":[{"2":"<p>Whether any listener was removed.</p>\n"}]}}},{"1":{"1":"unlistenByKey","2":{"1":"closure/goog/labs/events/nondisposableeventtarget.js","2":164,"3":"https://github.com/google/closure-library/blob/master/closure/goog/labs/events/nondisposableeventtarget.js#L164"},"3":{"1":[{"2":"<p>Removes an event listener which was added with listen() by the key\nreturned by listen().</p>\n"}]},"9":[{"1":"goog.events.Listenable","3":{"1":"goog.events.Listenable.html#unlistenByKey"}}]},"4":[{"1":"key","2":{"4":{"1":"goog.events.ListenableKey","3":{"1":"goog.events.ListenableKey.html"}}},"3":{"1":[{"2":"<p>The key returned by\nlisten() or listenOnce().</p>\n"}]}}],"5":{"2":{"4":{"1":"boolean","4":true}},"3":{"1":[{"2":"<p>Whether any listener was removed.</p>\n"}]}}}],"19":[{"1":"goog.events.Listenable","3":{"1":"goog.events.Listenable.html"}}],"21":{"1":{"1":"goog.labs.events.NonDisposableEventTarget","3":{"1":"goog.labs.events.NonDisposableEventTarget.html"}},"2":4},"23":"goog.labs.events.NonDisposableEventTarget.html","24":"goog.labs.events.NonDisposableEventTarget"}]}}