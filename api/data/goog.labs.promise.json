{"2":{"1":[{"1":"goog.labs.promise","5":{"1":"closure/goog/labs/promise/promise.js","2":20,"3":"https://github.com/google/closure-library/blob/master/closure/goog/labs/promise/promise.js#L20"},"7":{"1":[{"2":"<p>Utilities for working with promises.\nNote that this file is written ES5-only.</p>\n"}]},"8":{"6":true},"12":[{"1":{"1":"run","2":{"1":"closure/goog/labs/promise/promise.js","2":66,"3":"https://github.com/google/closure-library/blob/master/closure/goog/labs/promise/promise.js#L66"},"3":{"1":[{"2":"<p>Executes an ES6 generator function that may yield Promises, blocking after\neach Promise until it settles.  Within the generator, the value of each\n&#39;yield&#39; expression becomes the resolved value of the yielded promise.</p>\n<p>If the generator function throws an exception or yields a rejected promise,\nexecution stops, and the promise returned by this function is rejected.</p>\n<p>A typical call uses generator function syntax:</p>\n<p>goog.labs.promise.run(function*() {\nconsole.log(&#39;about to start waiting&#39;);\nwhile (needsToWait()) {\n// Wait 10 seconds.\nyield goog.Timer.promise(10000);\nconsole.log(&#39;still waiting...&#39;);\n}\n}).then(() &#61;&gt; {\nconsole.log(&#39;done waiting&#39;);\n});</p>\n<p>This function can also be used to simplify asynchronous code:</p>\n<p>goog.labs.promise.run(function*()) {\nvar x &#61; yield somethingThatReturnsAPromise();\nvar y &#61; yield somethingElseThatReturnsAPromise();\nreturn x &#43; y;\n}).then(sum &#61;&gt; {\nconsole.log(&#39;The sum is:&#39;, sum);\n});</p>\n"}]}},"2":["CONTEXT","TYPE"],"4":[{"1":"generatorFunc","2":{"3":{"2":{"6":{"1":[{"4":{"1":"CONTEXT"}},{"10":true}]}},"4":{"6":{"1":[{"4":{"1":"TYPE"}},{"10":true}]}}}},"3":{"1":[{"2":"<p>A function which is\ncalled immediately and returns a generator.</p>\n"}]}},{"1":"opt_context","2":{"1":true,"6":{"1":[{"4":{"1":"CONTEXT"}},{"10":true},{"9":true}]}},"3":{"1":[{"2":"<p>The context in which generatorFunc should be\ncalled.</p>\n"}]}}],"5":{"2":{"4":{"1":"goog.Promise","3":{"1":"goog.Promise.html"},"5":[{"6":{"1":[{"4":{"1":"TYPE"}},{"10":true}]}},{"8":true}]}},"3":{"1":[{"2":"<p>A promise that is resolved when the generator\nreturned from generatorFunc is exhausted, or rejected if an error occurs.\nIf the generator function returns, this promise resolves to the returned\nvalue.</p>\n"}]}}}],"23":"goog.labs.promise.html","24":"goog.labs.promise"}]}}