{"2":{"1":[{"1":"goog.ui.KeyboardShortcutHandler","5":{"1":"closure/goog/ui/keyboardshortcuthandler.js","2":58,"3":"https://github.com/google/closure-library/blob/master/closure/goog/ui/keyboardshortcuthandler.js#L58"},"6":{"1":[{"1":"KeyboardShortcutHandler.SequenceNode_","2":"goog.ui.KeyboardShortcutHandler.SequenceNode_.html","3":{"1":[{"2":"<p>A node in a keyboard shortcut sequence tree.</p>\n"}]}}],"2":[{"1":"KeyboardShortcutHandler.EventType","2":"goog.ui.KeyboardShortcutHandler.EventType.html","3":{"1":[{"2":"<p>Events.</p>\n"}]}},{"1":"KeyboardShortcutHandler.Modifiers","2":"goog.ui.KeyboardShortcutHandler.Modifiers.html","3":{"1":[{"2":"<p>Bit values for modifier keys.</p>\n"}]}}]},"7":{"1":[{"2":"<p>Component for handling keyboard shortcuts. A shortcut is registered and bound\nto a specific identifier. Once the shortcut is triggered an event is fired\nwith the identifier for the shortcut. This allows keyboard shortcuts to be\ncustomized without modifying the code that listens for them.</p>\n<p>Supports keyboard shortcuts triggered by a single key, a stroke stroke (key\nplus at least one modifier) and a sequence of keys or strokes.</p>\n"}]},"8":{},"10":[{"1":{"1":"KeyboardShortcutHandler.SequenceTree_","2":{"1":"closure/goog/ui/keyboardshortcuthandler.js","2":209,"3":"https://github.com/google/closure-library/blob/master/closure/goog/ui/keyboardshortcuthandler.js#L209"},"3":{"1":[{"2":"<p>A map of strokes (represented as strings) to the nodes reached by those\nstrokes.</p>\n"}]},"5":2},"2":{"6":{"1":[{"4":{"1":"Object","4":true,"5":[{"4":{"1":"string","4":true}},{"6":{"1":[{"4":{"1":"goog.ui.KeyboardShortcutHandler.SequenceNode_","3":{"1":"goog.ui.KeyboardShortcutHandler.SequenceNode_.html"}}},{"10":true}]}}]}},{"10":true}]}}}],"12":[{"1":{"1":"KeyboardShortcutHandler.getKeyCode","2":{"1":"closure/goog/ui/keyboardshortcuthandler.js","2":317,"3":"https://github.com/google/closure-library/blob/master/closure/goog/ui/keyboardshortcuthandler.js#L317"},"3":{"1":[{"2":"<p>Static method for getting the key code for a given key.</p>\n"}]}},"4":[{"1":"name","2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>Name of key.</p>\n"}]}}],"5":{"2":{"4":{"1":"number","4":true}},"3":{"1":[{"2":"<p>The key code.</p>\n"}]}}},{"1":{"1":"KeyboardShortcutHandler.parseStringShortcut","2":{"1":"closure/goog/ui/keyboardshortcuthandler.js","2":648,"3":"https://github.com/google/closure-library/blob/master/closure/goog/ui/keyboardshortcuthandler.js#L648"},"3":{"1":[{"2":"<p>Builds stroke array from string representation of shortcut.</p>\n"}]}},"4":[{"1":"s","2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>String representation of shortcut.</p>\n"}]}}],"5":{"2":{"4":{"1":"Array","4":true,"5":[{"5":{"1":[{"1":"key","2":{"6":{"1":[{"4":{"1":"string","4":true}},{"10":true}]}}},{"1":"keyCode","2":{"6":{"1":[{"4":{"1":"number","4":true}},{"10":true}]}}},{"1":"modifiers","2":{"4":{"1":"number","4":true}}}]}}]}},"3":{"1":[{"2":"<p>The\nstroke array.  A null keyCode means no non-modifier key was part of the\nstroke.</p>\n"}]}}}],"13":[{"1":{"1":"KeyboardShortcutHandler.MAX_KEY_SEQUENCE_DELAY","2":{"1":"closure/goog/ui/keyboardshortcuthandler.js","2":217,"3":"https://github.com/google/closure-library/blob/master/closure/goog/ui/keyboardshortcuthandler.js#L217"},"3":{"1":[{"2":"<p>Maximum allowed delay, in milliseconds, allowed between the first and second\nkey in a key sequence.</p>\n"}]}},"2":{"4":{"1":"number","4":true}}}],"14":{"1":{"1":"KeyboardShortcutHandler","2":{"1":"closure/goog/ui/keyboardshortcuthandler.js","2":58,"3":"https://github.com/google/closure-library/blob/master/closure/goog/ui/keyboardshortcuthandler.js#L58"},"3":{"1":[{"2":"<p>Component for handling keyboard shortcuts. A shortcut is registered and bound\nto a specific identifier. Once the shortcut is triggered an event is fired\nwith the identifier for the shortcut. This allows keyboard shortcuts to be\ncustomized without modifying the code that listens for them.</p>\n<p>Supports keyboard shortcuts triggered by a single key, a stroke stroke (key\nplus at least one modifier) and a sequence of keys or strokes.</p>\n"}]}},"3":true,"4":[{"1":"keyTarget","2":{"6":{"1":[{"4":{"1":"goog.events.EventTarget","3":{"1":"goog.events.EventTarget.html"}}},{"4":{"1":"EventTarget"}},{"10":true}]}},"3":{"1":[{"2":"<p>Event target that the\nkey event listener is attached to, typically the applications root\ncontainer.</p>\n"}]}}]},"15":[{"1":{"1":"addEventListener","2":{"1":"closure/goog/events/eventtarget.js","2":150,"3":"https://github.com/google/closure-library/blob/master/closure/goog/events/eventtarget.js#L150"},"3":{"1":[{"2":"<p>Adds an event listener to the event target. The same handler can only be\nadded once per the type. Even if you add the same handler multiple times\nusing the same type then it will only be called once when the event is\ndispatched.</p>\n"}]},"4":{"1":[{"2":"<p>Use <code>#listen</code> instead, when possible. Otherwise, use\n<code>goog.events.listen</code> if you are passing Object\n(instead of Function) as handler.</p>\n"}]},"6":{"2":true},"7":{"1":"goog.events.EventTarget","3":{"1":"goog.events.EventTarget.html#addEventListener"}}},"4":[{"1":"type","2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>The type of the event to listen for.</p>\n"}]}},{"1":"handler","2":{"6":{"1":[{"3":{"3":[{"8":true}],"4":{"8":true}}},{"5":{"1":[{"1":"handleEvent","2":{"3":{"3":[{"8":true}],"4":{"8":true}}}}]}},{"10":true}]}},"3":{"1":[{"2":"<p>The function\nto handle the event. The handler can also be an object that implements\nthe handleEvent method which takes the event object as argument.</p>\n"}]}},{"1":"opt_capture","2":{"1":true,"6":{"1":[{"4":{"1":"boolean","4":true}},{"9":true}]}},"3":{"1":[{"2":"<p>In DOM-compliant browsers, this determines\nwhether the listener is fired during the capture or bubble phase\nof the event.</p>\n"}]}},{"1":"opt_handlerScope","2":{"1":true,"6":{"1":[{"4":{"1":"Object","4":true}},{"10":true},{"9":true}]}},"3":{"1":[{"2":"<p>Object in whose scope to call\nthe listener.</p>\n"}]}}]},{"1":{"1":"addOnDisposeCallback","2":{"1":"closure/goog/disposable/disposable.js","2":213,"3":"https://github.com/google/closure-library/blob/master/closure/goog/disposable/disposable.js#L213"},"3":{"1":[{"2":"<p>Invokes a callback function when this object is disposed. Callbacks are\ninvoked in the order in which they were added. If a callback is added to\nan already disposed Disposable, it will be called immediately.</p>\n"}]},"7":{"1":"goog.Disposable","3":{"1":"goog.Disposable.html#addOnDisposeCallback"}}},"2":["T"],"4":[{"1":"callback","2":{"3":{"2":{"6":{"1":[{"4":{"1":"T"}},{"10":true}]}},"4":{"8":true}}},"3":{"1":[{"2":"<p>The callback function.</p>\n"}]}},{"1":"opt_scope","2":{"1":true,"6":{"1":[{"4":{"1":"T"}},{"10":true},{"9":true}]}},"3":{"1":[{"2":"<p>An optional scope to call the callback in.</p>\n"}]}}]},{"1":{"1":"clearKeyListener","2":{"1":"closure/goog/ui/keyboardshortcuthandler.js","2":837,"3":"https://github.com/google/closure-library/blob/master/closure/goog/ui/keyboardshortcuthandler.js#L837"},"3":{"1":[{"2":"<p>Removes the listener that was added by link <a href=\"goog.ui.KeyboardShortcutHandler.html#initializeKeyListener\"><code>#initializeKeyListener</code></a>.</p>\n"}]},"5":1}},{"1":{"1":"dispatchEvent","2":{"1":"closure/goog/events/listenable.js","2":180,"3":"https://github.com/google/closure-library/blob/master/closure/goog/events/listenable.js#L180"},"3":{"1":[{"2":"<p>Dispatches an event (or event like object) and calls all listeners\nlistening for events of this type. The type of the event is decided by the\ntype property on the event object.</p>\n<p>If any of the listeners returns false OR calls preventDefault then this\nfunction will return false.  If one of the capture listeners calls\nstopPropagation, then the bubble listeners won&#39;t fire.</p>\n"}]},"8":{"1":"goog.events.EventTarget","3":{"1":"goog.events.EventTarget.html#dispatchEvent"}}},"4":[{"1":"e","2":{"6":{"1":[{"4":{"1":"string","4":true}},{"4":{"1":"Object","4":true}},{"10":true}]}},"3":{"1":[{"2":"<p>Event object.</p>\n"}]}}],"5":{"2":{"4":{"1":"boolean","4":true}},"3":{"1":[{"2":"<p>If anyone called preventDefault on the event object (or\nif any of the listeners returns false) this will also return false.</p>\n"}]}}},{"1":{"1":"dispose","2":{"1":"closure/goog/disposable/idisposable.js","2":39,"3":"https://github.com/google/closure-library/blob/master/closure/goog/disposable/idisposable.js#L39"},"3":{"1":[{"2":"<p>Disposes of the object and its resources.</p>\n"}]},"8":{"1":"goog.Disposable","3":{"1":"goog.Disposable.html#dispose"}}},"5":{"3":{"1":[{"2":"<p>Nothing.</p>\n"}]}}},{"1":{"1":"disposeInternal","2":{"1":"closure/goog/ui/keyboardshortcuthandler.js","2":623,"3":"https://github.com/google/closure-library/blob/master/closure/goog/ui/keyboardshortcuthandler.js#L623"},"3":{"1":[{"2":"<p>Removes listeners from this object.  Classes that extend EventTarget may\nneed to override this method in order to remove references to DOM Elements\nand additional listeners.</p>\n"}]},"5":1,"8":{"1":"goog.events.EventTarget","3":{"1":"goog.events.EventTarget.html#disposeInternal"}}}},{"1":{"1":"fireListeners","2":{"1":"closure/goog/events/listenable.js","2":225,"3":"https://github.com/google/closure-library/blob/master/closure/goog/events/listenable.js#L225"},"3":{"1":[{"2":"<p>Fires all registered listeners in this listenable for the given\ntype and capture mode, passing them the given eventObject. This\ndoes not perform actual capture/bubble. Only implementors of the\ninterface should be using this.</p>\n"}]},"8":{"1":"goog.events.EventTarget","3":{"1":"goog.events.EventTarget.html#fireListeners"}}},"2":["EVENTOBJ"],"4":[{"1":"type","2":{"6":{"1":[{"4":{"1":"string","4":true}},{"4":{"1":"goog.events.EventId","3":{"1":"goog.events.EventId.html"},"5":[{"6":{"1":[{"4":{"1":"EVENTOBJ"}},{"10":true}]}}]}}]}},"3":{"1":[{"2":"<p>The type of the\nlisteners to fire.</p>\n"}]}},{"1":"capture","2":{"4":{"1":"boolean","4":true}},"3":{"1":[{"2":"<p>The capture mode of the listeners to fire.</p>\n"}]}},{"1":"eventObject","2":{"6":{"1":[{"4":{"1":"EVENTOBJ"}},{"10":true}]}},"3":{"1":[{"2":"<p>The event object to fire.</p>\n"}]}}],"5":{"2":{"4":{"1":"boolean","4":true}},"3":{"1":[{"2":"<p>Whether all listeners succeeded without\nattempting to prevent default behavior. If any listener returns\nfalse or called goog.events.Event#preventDefault, this returns\nfalse.</p>\n"}]}}},{"1":{"1":"getAllShortcutsAreGlobal","2":{"1":"closure/goog/ui/keyboardshortcuthandler.js","2":403,"3":"https://github.com/google/closure-library/blob/master/closure/goog/ui/keyboardshortcuthandler.js#L403"},"3":{"1":[{"2":"<p>Returns whether all shortcuts (including modifier shortcuts) are treated as\nif the keys had been passed to the setGlobalKeys function.</p>\n"}]},"10":[{"1":[{"1":"#setAllShortcutsAreGlobal","3":{"1":"goog.ui.KeyboardShortcutHandler.html#setAllShortcutsAreGlobal"}}]}]},"5":{"2":{"4":{"1":"boolean","4":true}},"3":{"1":[{"2":"<p>Whether all shortcuts are treated as globals.</p>\n"}]}}},{"1":{"1":"getAlwaysPreventDefault","2":{"1":"closure/goog/ui/keyboardshortcuthandler.js","2":354,"3":"https://github.com/google/closure-library/blob/master/closure/goog/ui/keyboardshortcuthandler.js#L354"},"3":{"1":[{"2":"<p>Returns whether the default action will always be prevented when a shortcut\nevent is fired. The default value is true.</p>\n"}]},"10":[{"1":[{"1":"#setAlwaysPreventDefault","3":{"1":"goog.ui.KeyboardShortcutHandler.html#setAlwaysPreventDefault"}}]}]},"5":{"2":{"4":{"1":"boolean","4":true}},"3":{"1":[{"2":"<p>Whether preventDefault will always be called.</p>\n"}]}}},{"1":{"1":"getAlwaysStopPropagation","2":{"1":"closure/goog/ui/keyboardshortcuthandler.js","2":380,"3":"https://github.com/google/closure-library/blob/master/closure/goog/ui/keyboardshortcuthandler.js#L380"},"3":{"1":[{"2":"<p>Returns whether the event will always be stopped from propagating beyond its\ntarget when a shortcut event is fired. The default value is false.</p>\n"}]},"10":[{"1":[{"1":"#setAlwaysStopPropagation","3":{"1":"goog.ui.KeyboardShortcutHandler.html#setAlwaysStopPropagation"}}]}]},"5":{"2":{"4":{"1":"boolean","4":true}},"3":{"1":[{"2":"<p>Whether stopPropagation will always be called.</p>\n"}]}}},{"1":{"1":"getDisposed","2":{"1":"closure/goog/disposable/disposable.js","2":160,"3":"https://github.com/google/closure-library/blob/master/closure/goog/disposable/disposable.js#L160"},"3":{},"4":{"1":[{"2":"<p>Use <a href=\"goog.ui.KeyboardShortcutHandler.html#isDisposed\"><code>#isDisposed</code></a> instead.</p>\n"}]},"6":{"2":true},"7":{"1":"goog.Disposable","3":{"1":"goog.Disposable.html#getDisposed"}}},"5":{"2":{"4":{"1":"boolean","4":true}},"3":{"1":[{"2":"<p>Whether the object has been disposed of.</p>\n"}]}}},{"1":{"1":"getEventType","2":{"1":"closure/goog/ui/keyboardshortcuthandler.js","2":635,"3":"https://github.com/google/closure-library/blob/master/closure/goog/ui/keyboardshortcuthandler.js#L635"},"3":{"1":[{"2":"<p>Returns event type for a specific shortcut.</p>\n"}]}},"4":[{"1":"identifier","2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>Identifier for the shortcut task.</p>\n"}]}}],"5":{"2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>Theh event type.</p>\n"}]}}},{"1":{"1":"getGlobalKeys","2":{"1":"closure/goog/ui/keyboardshortcuthandler.js","2":617,"3":"https://github.com/google/closure-library/blob/master/closure/goog/ui/keyboardshortcuthandler.js#L617"},"3":{}},"5":{"2":{"4":{"1":"Array","4":true,"5":[{"4":{"1":"string","4":true}}]}},"3":{"1":[{"2":"<p>The global keys, i.e. keys that are safe to always\nregard as shortcuts, even if entered in a textarea or input field.</p>\n"}]}}},{"1":{"1":"getListener","2":{"1":"closure/goog/events/listenable.js","2":255,"3":"https://github.com/google/closure-library/blob/master/closure/goog/events/listenable.js#L255"},"3":{"1":[{"2":"<p>Gets the goog.events.ListenableKey for the event or null if no such\nlistener is in use.</p>\n"}]},"8":{"1":"goog.events.EventTarget","3":{"1":"goog.events.EventTarget.html#getListener"}}},"2":["SCOPE","EVENTOBJ"],"4":[{"1":"type","2":{"6":{"1":[{"4":{"1":"string","4":true}},{"4":{"1":"goog.events.EventId","3":{"1":"goog.events.EventId.html"},"5":[{"6":{"1":[{"4":{"1":"EVENTOBJ"}},{"10":true}]}}]}}]}},"3":{"1":[{"2":"<p>The name of the event\nwithout the &#39;on&#39; prefix.</p>\n"}]}},{"1":"listener","2":{"3":{"2":{"6":{"1":[{"4":{"1":"SCOPE"}},{"10":true}]}},"3":[{"6":{"1":[{"4":{"1":"EVENTOBJ"}},{"10":true}]}}],"4":{"6":{"1":[{"4":{"1":"boolean","4":true}},{"9":true}]}}}},"3":{"1":[{"2":"<p>The\nlistener function to get.</p>\n"}]}},{"1":"capture","2":{"4":{"1":"boolean","4":true}},"3":{"1":[{"2":"<p>Whether the listener is a capturing listener.</p>\n"}]}},{"1":"opt_listenerScope","2":{"1":true,"6":{"1":[{"4":{"1":"SCOPE"}},{"10":true},{"9":true}]}},"3":{"1":[{"2":"<p>Object in whose scope to call the\nlistener.</p>\n"}]}}],"5":{"2":{"6":{"1":[{"4":{"1":"goog.events.ListenableKey","3":{"1":"goog.events.ListenableKey.html"}}},{"10":true}]}},"3":{"1":[{"2":"<p>the found listener or null if not found.</p>\n"}]}}},{"1":{"1":"getListeners","2":{"1":"closure/goog/events/listenable.js","2":238,"3":"https://github.com/google/closure-library/blob/master/closure/goog/events/listenable.js#L238"},"3":{"1":[{"2":"<p>Gets all listeners in this listenable for the given type and\ncapture mode.</p>\n"}]},"8":{"1":"goog.events.EventTarget","3":{"1":"goog.events.EventTarget.html#getListeners"}}},"2":["EVENTOBJ"],"4":[{"1":"type","2":{"6":{"1":[{"4":{"1":"string","4":true}},{"4":{"1":"goog.events.EventId","3":{"1":"goog.events.EventId.html"}}}]}},"3":{"1":[{"2":"<p>The type of the listeners to fire.</p>\n"}]}},{"1":"capture","2":{"4":{"1":"boolean","4":true}},"3":{"1":[{"2":"<p>The capture mode of the listeners to fire.</p>\n"}]}}],"5":{"2":{"4":{"1":"Array","4":true,"5":[{"4":{"1":"goog.events.ListenableKey","3":{"1":"goog.events.ListenableKey.html"}}}]}},"3":{"1":[{"2":"<p>An array of registered\nlisteners.</p>\n"}]}}},{"1":{"1":"getModifierShortcutsAreGlobal","2":{"1":"closure/goog/ui/keyboardshortcuthandler.js","2":431,"3":"https://github.com/google/closure-library/blob/master/closure/goog/ui/keyboardshortcuthandler.js#L431"},"3":{"1":[{"2":"<p>Returns whether shortcuts with modifiers are treated as if the keys had been\npassed to the setGlobalKeys function.  Ignored if you have called\nsetAllShortcutsAreGlobal(true).  Applies only to form elements (not\ncontent-editable).</p>\n"}]},"10":[{"1":[{"1":"#setModifierShortcutsAreGlobal","3":{"1":"goog.ui.KeyboardShortcutHandler.html#setModifierShortcutsAreGlobal"}}]}]},"5":{"2":{"4":{"1":"boolean","4":true}},"3":{"1":[{"2":"<p>Whether shortcuts with modifiers are treated as globals.</p>\n"}]}}},{"1":{"1":"getParentEventTarget","2":{"1":"closure/goog/events/listenable.js","2":206,"3":"https://github.com/google/closure-library/blob/master/closure/goog/events/listenable.js#L206"},"3":{"1":[{"2":"<p>Returns the parent of this event target to use for capture/bubble\nmechanism.</p>\n<p>NOTE(chrishenry): The name reflects the original implementation of\ncustom event target (<code>goog.events.EventTarget</code>). We decided\nthat changing the name is not worth it.</p>\n"}]},"8":{"1":"goog.events.EventTarget","3":{"1":"goog.events.EventTarget.html#getParentEventTarget"}}},"5":{"2":{"6":{"1":[{"4":{"1":"goog.events.Listenable","3":{"1":"goog.events.Listenable.html"}}},{"10":true}]}},"3":{"1":[{"2":"<p>The parent EventTarget or null if\nthere is no parent.</p>\n"}]}}},{"1":{"1":"hasListener","2":{"1":"closure/goog/events/listenable.js","2":270,"3":"https://github.com/google/closure-library/blob/master/closure/goog/events/listenable.js#L270"},"3":{"1":[{"2":"<p>Whether there is any active listeners matching the specified\nsignature. If either the type or capture parameters are\nunspecified, the function will match on the remaining criteria.</p>\n"}]},"8":{"1":"goog.events.EventTarget","3":{"1":"goog.events.EventTarget.html#hasListener"}}},"2":["EVENTOBJ"],"4":[{"1":"opt_type","2":{"1":true,"6":{"1":[{"4":{"1":"string","4":true}},{"4":{"1":"goog.events.EventId","3":{"1":"goog.events.EventId.html"},"5":[{"6":{"1":[{"4":{"1":"EVENTOBJ"}},{"10":true}]}}]}},{"9":true}]}},"3":{"1":[{"2":"<p>Event type.</p>\n"}]}},{"1":"opt_capture","2":{"1":true,"6":{"1":[{"4":{"1":"boolean","4":true}},{"9":true}]}},"3":{"1":[{"2":"<p>Whether to check for capture or bubble\nlisteners.</p>\n"}]}}],"5":{"2":{"4":{"1":"boolean","4":true}},"3":{"1":[{"2":"<p>Whether there is any active listeners matching\nthe requested type and/or capture phase.</p>\n"}]}}},{"1":{"1":"initializeKeyListener","2":{"1":"closure/goog/ui/keyboardshortcuthandler.js","2":700,"3":"https://github.com/google/closure-library/blob/master/closure/goog/ui/keyboardshortcuthandler.js#L700"},"3":{"1":[{"2":"<p>Adds a key event listener that triggers <a href=\"goog.ui.KeyboardShortcutHandler.html#handleKeyDown_\"><code>#handleKeyDown_</code></a> when keys\nare pressed.</p>\n"}]},"5":1},"4":[{"1":"keyTarget","2":{"6":{"1":[{"4":{"1":"goog.events.EventTarget","3":{"1":"goog.events.EventTarget.html"}}},{"4":{"1":"EventTarget"}},{"10":true}]}},"3":{"1":[{"2":"<p>Event target that the\nevent listener should be attached to.</p>\n"}]}}]},{"1":{"1":"isDisposed","2":{"1":"closure/goog/disposable/idisposable.js","2":45,"3":"https://github.com/google/closure-library/blob/master/closure/goog/disposable/idisposable.js#L45"},"3":{},"8":{"1":"goog.Disposable","3":{"1":"goog.Disposable.html#isDisposed"}}},"5":{"2":{"4":{"1":"boolean","4":true}},"3":{"1":[{"2":"<p>Whether the object has been disposed of.</p>\n"}]}}},{"1":{"1":"isShortcutRegistered","2":{"1":"closure/goog/ui/keyboardshortcuthandler.js","2":541,"3":"https://github.com/google/closure-library/blob/master/closure/goog/ui/keyboardshortcuthandler.js#L541"},"3":{"1":[{"2":"<p>Verifies if a particular keyboard shortcut is registered already. It has\nthe same interface as the unregistering of shortcuts.</p>\n<p>param {number} keyCode Numeric code for key\nparam {number&#61;} opt_modifiers Bitmap indicating required modifier keys.\ngoog.ui.KeyboardShortcutHandler.Modifiers.SHIFT, CTRL, ALT,\nor META.</p>\n<p>The two parameters can be repeated any number of times to create a shortcut\nusing a sequence of strokes.</p>\n<p>A string representation of the shortcut can be supplied instead see\n<a href=\"goog.ui.KeyboardShortcutHandler.html#registerShortcut\"><code>#registerShortcut</code></a> for syntax. In that case the method only takes one\nargument.</p>\n"}]}},"4":[{"1":"var_args","2":{"2":true,"6":{"1":[{"4":{"1":"number","4":true}},{"4":{"1":"string","4":true}},{"4":{"1":"Array","4":true,"5":[{"4":{"1":"number","4":true}}]}},{"10":true}]}},"3":{"1":[{"2":"<p>String representation, or\narray or list of alternating key codes and modifiers.</p>\n"}]}}],"5":{"2":{"4":{"1":"boolean","4":true}},"3":{"1":[{"2":"<p>Whether the specified keyboard shortcut is registered.</p>\n"}]}}},{"1":{"1":"listen","2":{"1":"closure/goog/events/listenable.js","2":113,"3":"https://github.com/google/closure-library/blob/master/closure/goog/events/listenable.js#L113"},"3":{"1":[{"2":"<p>Adds an event listener. A listener can only be added once to an\nobject and if it is added again the key for the listener is\nreturned. Note that if the existing listener is a one-off listener\n(registered via listenOnce), it will no longer be a one-off\nlistener after a call to listen().</p>\n"}]},"8":{"1":"goog.events.EventTarget","3":{"1":"goog.events.EventTarget.html#listen"}}},"2":["SCOPE","EVENTOBJ"],"4":[{"1":"type","2":{"6":{"1":[{"4":{"1":"string","4":true}},{"4":{"1":"goog.events.EventId","3":{"1":"goog.events.EventId.html"},"5":[{"6":{"1":[{"4":{"1":"EVENTOBJ"}},{"10":true}]}}]}}]}},"3":{"1":[{"2":"<p>The event type id.</p>\n"}]}},{"1":"listener","2":{"3":{"2":{"6":{"1":[{"4":{"1":"SCOPE"}},{"10":true}]}},"3":[{"6":{"1":[{"4":{"1":"EVENTOBJ"}},{"10":true}]}}],"4":{"6":{"1":[{"4":{"1":"boolean","4":true}},{"9":true}]}}}},"3":{"1":[{"2":"<p>Callback\nmethod.</p>\n"}]}},{"1":"opt_useCapture","2":{"1":true,"6":{"1":[{"4":{"1":"boolean","4":true}},{"9":true}]}},"3":{"1":[{"2":"<p>Whether to fire in capture phase\n(defaults to false).</p>\n"}]}},{"1":"opt_listenerScope","2":{"1":true,"6":{"1":[{"4":{"1":"SCOPE"}},{"10":true},{"9":true}]}},"3":{"1":[{"2":"<p>Object in whose scope to call the\nlistener.</p>\n"}]}}],"5":{"2":{"4":{"1":"goog.events.ListenableKey","3":{"1":"goog.events.ListenableKey.html"}}},"3":{"1":[{"2":"<p>Unique key for the listener.</p>\n"}]}}},{"1":{"1":"listenOnce","2":{"1":"closure/goog/events/listenable.js","2":137,"3":"https://github.com/google/closure-library/blob/master/closure/goog/events/listenable.js#L137"},"3":{"1":[{"2":"<p>Adds an event listener that is removed automatically after the\nlistener fired once.</p>\n<p>If an existing listener already exists, listenOnce will do\nnothing. In particular, if the listener was previously registered\nvia listen(), listenOnce() will not turn the listener into a\none-off listener. Similarly, if there is already an existing\none-off listener, listenOnce does not modify the listeners (it is\nstill a once listener).</p>\n"}]},"8":{"1":"goog.events.EventTarget","3":{"1":"goog.events.EventTarget.html#listenOnce"}}},"2":["SCOPE","EVENTOBJ"],"4":[{"1":"type","2":{"6":{"1":[{"4":{"1":"string","4":true}},{"4":{"1":"goog.events.EventId","3":{"1":"goog.events.EventId.html"},"5":[{"6":{"1":[{"4":{"1":"EVENTOBJ"}},{"10":true}]}}]}}]}},"3":{"1":[{"2":"<p>The event type id.</p>\n"}]}},{"1":"listener","2":{"3":{"2":{"6":{"1":[{"4":{"1":"SCOPE"}},{"10":true}]}},"3":[{"6":{"1":[{"4":{"1":"EVENTOBJ"}},{"10":true}]}}],"4":{"6":{"1":[{"4":{"1":"boolean","4":true}},{"9":true}]}}}},"3":{"1":[{"2":"<p>Callback\nmethod.</p>\n"}]}},{"1":"opt_useCapture","2":{"1":true,"6":{"1":[{"4":{"1":"boolean","4":true}},{"9":true}]}},"3":{"1":[{"2":"<p>Whether to fire in capture phase\n(defaults to false).</p>\n"}]}},{"1":"opt_listenerScope","2":{"1":true,"6":{"1":[{"4":{"1":"SCOPE"}},{"10":true},{"9":true}]}},"3":{"1":[{"2":"<p>Object in whose scope to call the\nlistener.</p>\n"}]}}],"5":{"2":{"4":{"1":"goog.events.ListenableKey","3":{"1":"goog.events.ListenableKey.html"}}},"3":{"1":[{"2":"<p>Unique key for the listener.</p>\n"}]}}},{"1":{"1":"registerDisposable","2":{"1":"closure/goog/disposable/disposable.js","2":200,"3":"https://github.com/google/closure-library/blob/master/closure/goog/disposable/disposable.js#L200"},"3":{"1":[{"2":"<p>Associates a disposable object with this object so that they will be disposed\ntogether.</p>\n"}]},"7":{"1":"goog.Disposable","3":{"1":"goog.Disposable.html#registerDisposable"}}},"4":[{"1":"disposable","2":{"6":{"1":[{"4":{"1":"goog.disposable.IDisposable","3":{"1":"goog.disposable.IDisposable.html"}}},{"10":true}]}},"3":{"1":[{"2":"<p>that will be disposed when\nthis object is disposed.</p>\n"}]}}]},{"1":{"1":"registerShortcut","2":{"1":"closure/goog/ui/keyboardshortcuthandler.js","2":485,"3":"https://github.com/google/closure-library/blob/master/closure/goog/ui/keyboardshortcuthandler.js#L485"},"3":{"1":[{"2":"<p>Registers a keyboard shortcut.</p>\n"}]}},"4":[{"1":"identifier","2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>Identifier for the task performed by the keyboard\ncombination. Multiple shortcuts can be provided for the same\ntask by specifying the same identifier.</p>\n"}]}},{"1":"var_args","2":{"2":true,"6":{"1":[{"4":{"1":"number","4":true}},{"4":{"1":"string","4":true}},{"4":{"1":"Array","4":true,"5":[{"4":{"1":"number","4":true}}]}},{"10":true}]}},"3":{"1":[{"2":"<p>See below.</p>\n<p>param {number} keyCode Numeric code for key\nparam {number&#61;} opt_modifiers Bitmap indicating required modifier keys.\ngoog.ui.KeyboardShortcutHandler.Modifiers.SHIFT, CTRL, ALT,\nor META.</p>\n<p>The last two parameters can be repeated any number of times to create a\nshortcut using a sequence of strokes. Instead of varargs the second parameter\ncould also be an array where each element would be regarded as a parameter.</p>\n<p>A string representation of the shortcut can be supplied instead of the last\ntwo parameters. In that case the method only takes two arguments, the\nidentifier and the string.</p>\n<p>Examples:\ng               registerShortcut(str, G_KEYCODE)\nCtrl&#43;g          registerShortcut(str, G_KEYCODE, CTRL)\nCtrl&#43;Shift&#43;g    registerShortcut(str, G_KEYCODE, CTRL | SHIFT)\nCtrl&#43;g a        registerShortcut(str, G_KEYCODE, CTRL, A_KEYCODE)\nCtrl&#43;g Shift&#43;a  registerShortcut(str, G_KEYCODE, CTRL, A_KEYCODE, SHIFT)\ng a             registerShortcut(str, G_KEYCODE, NONE, A_KEYCODE)</p>\n<p>Examples using string representation for shortcuts:\ng               registerShortcut(str, &#39;g&#39;)\nCtrl&#43;g          registerShortcut(str, &#39;ctrl&#43;g&#39;)\nCtrl&#43;Shift&#43;g    registerShortcut(str, &#39;ctrl&#43;shift&#43;g&#39;)\nCtrl&#43;g a        registerShortcut(str, &#39;ctrl&#43;g a&#39;)\nCtrl&#43;g Shift&#43;a  registerShortcut(str, &#39;ctrl&#43;g shift&#43;a&#39;)\ng a             registerShortcut(str, &#39;g a&#39;).</p>\n"}]}}]},{"1":{"1":"removeAllListeners","2":{"1":"closure/goog/events/listenable.js","2":192,"3":"https://github.com/google/closure-library/blob/master/closure/goog/events/listenable.js#L192"},"3":{"1":[{"2":"<p>Removes all listeners from this listenable. If type is specified,\nit will only remove listeners of the particular type. otherwise all\nregistered listeners will be removed.</p>\n"}]},"8":{"1":"goog.events.EventTarget","3":{"1":"goog.events.EventTarget.html#removeAllListeners"}}},"4":[{"1":"opt_type","2":{"1":true,"6":{"1":[{"4":{"1":"string","4":true}},{"9":true}]}},"3":{"1":[{"2":"<p>Type of event to remove, default is to\nremove all types.</p>\n"}]}}],"5":{"2":{"4":{"1":"number","4":true}},"3":{"1":[{"2":"<p>Number of listeners removed.</p>\n"}]}}},{"1":{"1":"removeEventListener","2":{"1":"closure/goog/events/eventtarget.js","2":174,"3":"https://github.com/google/closure-library/blob/master/closure/goog/events/eventtarget.js#L174"},"3":{"1":[{"2":"<p>Removes an event listener from the event target. The handler must be the\nsame object as the one added. If the handler has not been added then\nnothing is done.</p>\n"}]},"4":{"1":[{"2":"<p>Use <code>#unlisten</code> instead, when possible. Otherwise, use\n<code>goog.events.unlisten</code> if you are passing Object\n(instead of Function) as handler.</p>\n"}]},"6":{"2":true},"7":{"1":"goog.events.EventTarget","3":{"1":"goog.events.EventTarget.html#removeEventListener"}}},"4":[{"1":"type","2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>The type of the event to listen for.</p>\n"}]}},{"1":"handler","2":{"6":{"1":[{"3":{"3":[{"8":true}],"4":{"8":true}}},{"5":{"1":[{"1":"handleEvent","2":{"3":{"3":[{"8":true}],"4":{"8":true}}}}]}},{"10":true}]}},"3":{"1":[{"2":"<p>The function\nto handle the event. The handler can also be an object that implements\nthe handleEvent method which takes the event object as argument.</p>\n"}]}},{"1":"opt_capture","2":{"1":true,"6":{"1":[{"4":{"1":"boolean","4":true}},{"9":true}]}},"3":{"1":[{"2":"<p>In DOM-compliant browsers, this determines\nwhether the listener is fired during the capture or bubble phase\nof the event.</p>\n"}]}},{"1":"opt_handlerScope","2":{"1":true,"6":{"1":[{"4":{"1":"Object","4":true}},{"10":true},{"9":true}]}},"3":{"1":[{"2":"<p>Object in whose scope to call\nthe listener.</p>\n"}]}}]},{"1":{"1":"setAllShortcutsAreGlobal","2":{"1":"closure/goog/ui/keyboardshortcuthandler.js","2":391,"3":"https://github.com/google/closure-library/blob/master/closure/goog/ui/keyboardshortcuthandler.js#L391"},"3":{"1":[{"2":"<p>Sets whether to treat all shortcuts (including modifier shortcuts) as if the\nkeys had been passed to the setGlobalKeys function.</p>\n"}]}},"4":[{"1":"allShortcutsGlobal","2":{"4":{"1":"boolean","4":true}},"3":{"1":[{"2":"<p>Whether to treat all shortcuts as global.</p>\n"}]}}]},{"1":{"1":"setAllowSpaceKeyOnButtons","2":{"1":"closure/goog/ui/keyboardshortcuthandler.js","2":443,"3":"https://github.com/google/closure-library/blob/master/closure/goog/ui/keyboardshortcuthandler.js#L443"},"3":{"1":[{"2":"<p>Sets whether to treat space key as a shortcut when the focused element is a\ncheckbox, radiobutton or button.</p>\n"}]}},"4":[{"1":"allowSpaceKeyOnButtons","2":{"4":{"1":"boolean","4":true}},"3":{"1":[{"2":"<p>Whether to treat space key as a\nshortcut when the focused element is a checkbox, radiobutton or button.</p>\n"}]}}]},{"1":{"1":"setAlwaysPreventDefault","2":{"1":"closure/goog/ui/keyboardshortcuthandler.js","2":342,"3":"https://github.com/google/closure-library/blob/master/closure/goog/ui/keyboardshortcuthandler.js#L342"},"3":{"1":[{"2":"<p>Sets whether to always prevent the default action when a shortcut event is\nfired. If false, the default action is prevented only if preventDefault is\ncalled on either of the corresponding SHORTCUT_TRIGGERED or SHORTCUT_PREFIX\nevents. If true, the default action is prevented whenever a shortcut event\nis fired. The default value is true.</p>\n"}]}},"4":[{"1":"alwaysPreventDefault","2":{"4":{"1":"boolean","4":true}},"3":{"1":[{"2":"<p>Whether to always call preventDefault.</p>\n"}]}}]},{"1":{"1":"setAlwaysStopPropagation","2":{"1":"closure/goog/ui/keyboardshortcuthandler.js","2":368,"3":"https://github.com/google/closure-library/blob/master/closure/goog/ui/keyboardshortcuthandler.js#L368"},"3":{"1":[{"2":"<p>Sets whether to always stop propagation for the event when fired. If false,\nthe propagation is stopped only if stopPropagation is called on either of the\ncorresponding SHORT_CUT_TRIGGERED or SHORTCUT_PREFIX events. If true, the\nevent is prevented from propagating beyond its target whenever it is fired.\nThe default value is false.</p>\n"}]}},"4":[{"1":"alwaysStopPropagation","2":{"4":{"1":"boolean","4":true}},"3":{"1":[{"2":"<p>Whether to always call\nstopPropagation.</p>\n"}]}}]},{"1":{"1":"setGlobalKeys","2":{"1":"closure/goog/ui/keyboardshortcuthandler.js","2":608,"3":"https://github.com/google/closure-library/blob/master/closure/goog/ui/keyboardshortcuthandler.js#L608"},"3":{"1":[{"2":"<p>Sets the global keys; keys that are safe to always regarded as shortcuts,\neven if entered in a textarea or input field.</p>\n"}]}},"4":[{"1":"keys","2":{"6":{"1":[{"4":{"1":"Array","4":true,"5":[{"4":{"1":"number","4":true}}]}},{"10":true}]}},"3":{"1":[{"2":"<p>List of keys.</p>\n"}]}}]},{"1":{"1":"setModifierShortcutsAreGlobal","2":{"1":"closure/goog/ui/keyboardshortcuthandler.js","2":417,"3":"https://github.com/google/closure-library/blob/master/closure/goog/ui/keyboardshortcuthandler.js#L417"},"3":{"1":[{"2":"<p>Sets whether to treat shortcuts with modifiers as if the keys had been\npassed to the setGlobalKeys function.  Ignored if you have called\nsetAllShortcutsAreGlobal(true).  Applies only to form elements (not\ncontent-editable).</p>\n"}]}},"4":[{"1":"modifierShortcutsGlobal","2":{"4":{"1":"boolean","4":true}},"3":{"1":[{"2":"<p>Whether to treat shortcuts with\nmodifiers as global.</p>\n"}]}}]},{"1":{"1":"setParentEventTarget","2":{"1":"closure/goog/events/eventtarget.js","2":126,"3":"https://github.com/google/closure-library/blob/master/closure/goog/events/eventtarget.js#L126"},"3":{"1":[{"2":"<p>Sets the parent of this event target to use for capture/bubble\nmechanism.</p>\n"}]},"7":{"1":"goog.events.EventTarget","3":{"1":"goog.events.EventTarget.html#setParentEventTarget"}}},"4":[{"1":"parent","2":{"6":{"1":[{"4":{"1":"goog.events.EventTarget","3":{"1":"goog.events.EventTarget.html"}}},{"10":true}]}},"3":{"1":[{"2":"<p>Parent listenable (null if none).</p>\n"}]}}]},{"1":{"1":"setTargetForTesting","2":{"1":"closure/goog/events/eventtarget.js","2":320,"3":"https://github.com/google/closure-library/blob/master/closure/goog/events/eventtarget.js#L320"},"3":{"1":[{"2":"<p>Sets the target to be used for <code>event.target</code> when firing\nevent. Mainly used for testing. For example, see\n<code>goog.testing.events.mixinListenable</code>.</p>\n"}]},"7":{"1":"goog.events.EventTarget","3":{"1":"goog.events.EventTarget.html#setTargetForTesting"}}},"4":[{"1":"target","2":{"4":{"1":"Object","4":true}},"3":{"1":[{"2":"<p>The target.</p>\n"}]}}]},{"1":{"1":"unlisten","2":{"1":"closure/goog/events/listenable.js","2":153,"3":"https://github.com/google/closure-library/blob/master/closure/goog/events/listenable.js#L153"},"3":{"1":[{"2":"<p>Removes an event listener which was added with listen() or listenOnce().</p>\n"}]},"8":{"1":"goog.events.EventTarget","3":{"1":"goog.events.EventTarget.html#unlisten"}}},"2":["SCOPE","EVENTOBJ"],"4":[{"1":"type","2":{"6":{"1":[{"4":{"1":"string","4":true}},{"4":{"1":"goog.events.EventId","3":{"1":"goog.events.EventId.html"},"5":[{"6":{"1":[{"4":{"1":"EVENTOBJ"}},{"10":true}]}}]}}]}},"3":{"1":[{"2":"<p>The event type id.</p>\n"}]}},{"1":"listener","2":{"3":{"2":{"6":{"1":[{"4":{"1":"SCOPE"}},{"10":true}]}},"3":[{"6":{"1":[{"4":{"1":"EVENTOBJ"}},{"10":true}]}}],"4":{"6":{"1":[{"4":{"1":"boolean","4":true}},{"9":true}]}}}},"3":{"1":[{"2":"<p>Callback\nmethod.</p>\n"}]}},{"1":"opt_useCapture","2":{"1":true,"6":{"1":[{"4":{"1":"boolean","4":true}},{"9":true}]}},"3":{"1":[{"2":"<p>Whether to fire in capture phase\n(defaults to false).</p>\n"}]}},{"1":"opt_listenerScope","2":{"1":true,"6":{"1":[{"4":{"1":"SCOPE"}},{"10":true},{"9":true}]}},"3":{"1":[{"2":"<p>Object in whose scope to call\nthe listener.</p>\n"}]}}],"5":{"2":{"4":{"1":"boolean","4":true}},"3":{"1":[{"2":"<p>Whether any listener was removed.</p>\n"}]}}},{"1":{"1":"unlistenByKey","2":{"1":"closure/goog/events/listenable.js","2":164,"3":"https://github.com/google/closure-library/blob/master/closure/goog/events/listenable.js#L164"},"3":{"1":[{"2":"<p>Removes an event listener which was added with listen() by the key\nreturned by listen().</p>\n"}]},"8":{"1":"goog.events.EventTarget","3":{"1":"goog.events.EventTarget.html#unlistenByKey"}}},"4":[{"1":"key","2":{"4":{"1":"goog.events.ListenableKey","3":{"1":"goog.events.ListenableKey.html"}}},"3":{"1":[{"2":"<p>The key returned by\nlisten() or listenOnce().</p>\n"}]}}],"5":{"2":{"4":{"1":"boolean","4":true}},"3":{"1":[{"2":"<p>Whether any listener was removed.</p>\n"}]}}},{"1":{"1":"unregisterAll","2":{"1":"closure/goog/ui/keyboardshortcuthandler.js","2":598,"3":"https://github.com/google/closure-library/blob/master/closure/goog/ui/keyboardshortcuthandler.js#L598"},"3":{"1":[{"2":"<p>Unregisters all keyboard shortcuts.</p>\n"}]}}},{"1":{"1":"unregisterShortcut","2":{"1":"closure/goog/ui/keyboardshortcuthandler.js","2":513,"3":"https://github.com/google/closure-library/blob/master/closure/goog/ui/keyboardshortcuthandler.js#L513"},"3":{"1":[{"2":"<p>Unregisters a keyboard shortcut by keyCode and modifiers or string\nrepresentation of sequence.</p>\n<p>param {number} keyCode Numeric code for key\nparam {number&#61;} opt_modifiers Bitmap indicating required modifier keys.\ngoog.ui.KeyboardShortcutHandler.Modifiers.SHIFT, CTRL, ALT,\nor META.</p>\n<p>The two parameters can be repeated any number of times to create a shortcut\nusing a sequence of strokes.</p>\n<p>A string representation of the shortcut can be supplied instead see\n<a href=\"goog.ui.KeyboardShortcutHandler.html#registerShortcut\"><code>#registerShortcut</code></a> for syntax. In that case the method only takes one\nargument.</p>\n"}]}},"4":[{"1":"var_args","2":{"2":true,"6":{"1":[{"4":{"1":"number","4":true}},{"4":{"1":"string","4":true}},{"4":{"1":"Array","4":true,"5":[{"4":{"1":"number","4":true}}]}},{"10":true}]}},"3":{"1":[{"2":"<p>String representation, or\narray or list of alternating key codes and modifiers.</p>\n"}]}}]}],"16":[{"1":{"1":"creationStack","2":{"1":"closure/goog/disposable/disposable.js","2":44,"3":"https://github.com/google/closure-library/blob/master/closure/goog/disposable/disposable.js#L44"},"3":{"1":[{"2":"<p>If monitoring the goog.Disposable instances is enabled, stores the creation\nstack trace of the Disposable instance.</p>\n"}]},"7":{"1":"goog.Disposable","3":{"1":"goog.Disposable.html#creationStack"}}},"2":{"6":{"1":[{"4":{"1":"string","4":true}},{"9":true}]}}}],"18":[{"1":"goog.events.EventTarget","3":{"1":"goog.events.EventTarget.html"}},{"1":"goog.Disposable","3":{"1":"goog.Disposable.html"}}],"19":[{"1":"goog.disposable.IDisposable","3":{"1":"goog.disposable.IDisposable.html"}},{"1":"goog.events.Listenable","3":{"1":"goog.events.Listenable.html"}}],"21":{"1":{"1":"goog.ui.KeyboardShortcutHandler","3":{"1":"goog.ui.KeyboardShortcutHandler.html"}},"2":4},"23":"goog.ui.KeyboardShortcutHandler.html","24":"goog.ui.KeyboardShortcutHandler"}]}}