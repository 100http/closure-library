{"2":{"1":[{"1":"goog","5":{"1":"closure/goog/base.js","2":45,"3":"https://github.com/google/closure-library/blob/master/closure/goog/base.js#L45"},"6":{"1":[{"1":"Delay","2":"goog.Delay.html","3":{"1":[{"2":"<p>A deprecated alias.</p>\n"}]},"4":{"2":true}},{"1":"Disposable","2":"goog.Disposable.html","3":{"1":[{"2":"<p>Class that provides the basic implementation for disposable objects.</p>\n"}]}},{"1":"History","2":"goog.History.html","3":{"1":[{"2":"<p>A history management object.</p>\n"}]}},{"1":"Promise","2":"goog.Promise.html","3":{"1":[{"2":"<p>NOTE: This class was created in anticipation of the built-in Promise type\nbeing standardized and implemented across browsers.</p>\n"}]}},{"1":"Throttle","2":"goog.Throttle.html","3":{"1":[{"2":"<p>A deprecated alias.</p>\n"}]},"4":{"2":true}},{"1":"Timer","2":"goog.Timer.html","3":{"1":[{"2":"<p>Class for handling timing events.</p>\n"}]}},{"1":"Uri","2":"goog.Uri.html","3":{"1":[{"2":"<p>This class contains setters and getters for the parts of the URI.</p>\n"}]}}],"3":[{"1":"Thenable","2":"goog.Thenable.html","3":{"1":[{"2":"<p>Provides a more strict interface for Thenables in terms of\nhttp://promisesaplus.com for interop with goog.Promise.</p>\n"}]},"4":{"5":true}}]},"7":{"1":[{"2":"<p>Base namespace for the Closure library.  Checks to see goog is already\ndefined in the current scope before assigning to prevent clobbering if\nbase.js is loaded more than once.</p>\n"}]},"8":{},"12":[{"1":{"1":"abstractMethod","2":{"1":"closure/goog/base.js","2":750,"3":"https://github.com/google/closure-library/blob/master/closure/goog/base.js#L750"},"3":{"1":[{"2":"<p>When defining a class Foo with an abstract method bar(), you can do:\nFoo.prototype.bar &#61; goog.abstractMethod</p>\n<p>Now if a subclass of Foo fails to override bar(), an error will be thrown\nwhen bar() is invoked.</p>\n<p>Note: This does not take the name of the function to override as an argument\nbecause that would make it more difficult to obfuscate our JavaScript code.</p>\n"}]}}},{"1":{"1":"addDependency","2":{"1":"closure/goog/base.js","2":590,"3":"https://github.com/google/closure-library/blob/master/closure/goog/base.js#L590"},"3":{"1":[{"2":"<p>Adds a dependency from a file to the files it requires.</p>\n"}]}},"4":[{"1":"relPath","2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>The path to the js file.</p>\n"}]}},{"1":"provides","2":{"4":{"1":"Array","4":true,"5":[{"4":{"1":"string","4":true}}]}},"3":{"1":[{"2":"<p>An array of strings with\nthe names of the objects this file provides.</p>\n"}]}},{"1":"requires","2":{"4":{"1":"Array","4":true,"5":[{"4":{"1":"string","4":true}}]}},"3":{"1":[{"2":"<p>An array of strings with\nthe names of the objects this file requires.</p>\n"}]}},{"1":"opt_loadFlags","2":{"1":true,"6":{"1":[{"4":{"1":"boolean","4":true}},{"4":{"1":"Object","4":true,"5":[{"8":true},{"4":{"1":"string","4":true}}]}},{"9":true}]}},"3":{"1":[{"2":"<p>Parameters indicating\nhow the file must be loaded.  The boolean &#39;true&#39; is equivalent\nto {&#39;module&#39;: &#39;goog&#39;} for backwards-compatibility.  Valid properties\nand values include {&#39;module&#39;: &#39;goog&#39;} and {&#39;lang&#39;: &#39;es6&#39;}.</p>\n"}]}}]},{"1":{"1":"addSingletonGetter","2":{"1":"closure/goog/base.js","2":761,"3":"https://github.com/google/closure-library/blob/master/closure/goog/base.js#L761"},"3":{"1":[{"2":"<p>Adds a <code>getInstance</code> static method that always returns the same\ninstance object.</p>\n"}]}},"4":[{"1":"ctor","2":{"4":{"1":"Function"}},"3":{"1":[{"2":"<p>The constructor for the class to add the static\nmethod to.</p>\n"}]}}]},{"1":{"1":"base","2":{"1":"closure/goog/base.js","2":2532,"3":"https://github.com/google/closure-library/blob/master/closure/goog/base.js#L2532"},"3":{"1":[{"2":"<p>Call up to the superclass.</p>\n<p>If this is called from a constructor, then this calls the superclass\nconstructor with arguments 1-N.</p>\n<p>If this is called from a prototype method, then you must pass the name of the\nmethod as the second argument to this function. If you do not, you will get a\nruntime error. This calls the superclass&#39; method with arguments 2-N.</p>\n<p>This function only works if you use goog.inherits to express inheritance\nrelationships between your classes.</p>\n<p>This function is a compiler primitive. At compile-time, the compiler will do\nmacro expansion to remove a lot of the extra overhead that this function\nintroduces. The compiler will also enforce a lot of the assumptions that this\nfunction makes, and treat it as a compiler error if you break them.</p>\n"}]}},"4":[{"1":"me","2":{"4":{"1":"Object","4":true}},"3":{"1":[{"2":"<p>Should always be &#34;this&#34;.</p>\n"}]}},{"1":"opt_methodName","2":{"1":true,"7":true},"3":{"1":[{"2":"<p>The method name if calling a super method.</p>\n"}]}},{"1":"var_args","2":{"2":true,"7":true},"3":{"1":[{"2":"<p>The rest of the arguments.</p>\n"}]}}],"5":{"2":{"7":true},"3":{"1":[{"2":"<p>The return value of the superclass method.</p>\n"}]}}},{"1":{"1":"bind","2":{"1":"closure/goog/base.js","2":2069,"3":"https://github.com/google/closure-library/blob/master/closure/goog/base.js#L2069"},"3":{"1":[{"2":"<p>Partially applies this function to a particular &#39;this object&#39; and zero or\nmore arguments. The result is a new function with some arguments of the first\nfunction pre-filled and the value of this &#39;pre-specified&#39;.</p>\n<p>Remaining arguments specified at call-time are appended to the pre-specified\nones.</p>\n<p>Also see: <a href=\"goog.html#partial\"><code>#partial</code></a>.</p>\n<p>Usage:</p>\n <pre>var barMethBound &#61; goog.bind(myFunction, myObj, &#39;arg1&#39;, &#39;arg2&#39;);\n barMethBound(&#39;arg3&#39;, &#39;arg4&#39;);</pre>\n"}]}},"2":["T"],"4":[{"1":"fn","2":{"6":{"1":[{"3":{"2":{"6":{"1":[{"4":{"1":"T"}},{"10":true}]}},"3":[{"2":true,"8":true}],"4":{"8":true}}},{"10":true}]}},"3":{"1":[{"2":"<p>A function to partially apply.</p>\n"}]}},{"1":"selfObj","2":{"6":{"1":[{"4":{"1":"T"}},{"10":true}]}},"3":{"1":[{"2":"<p>Specifies the object which this should point to when the\nfunction is run.</p>\n"}]}},{"1":"var_args","2":{"2":true,"7":true},"3":{"1":[{"2":"<p>Additional arguments that are partially applied to the\nfunction.</p>\n"}]}}],"5":{"2":{"4":{"1":"Function"}},"3":{"1":[{"2":"<p>A partially-applied form of the function goog.bind() was\ninvoked as a method of.</p>\n"}]}}},{"1":{"1":"cloneObject","2":{"1":"closure/goog/base.js","2":1977,"3":"https://github.com/google/closure-library/blob/master/closure/goog/base.js#L1977"},"3":{"1":[{"2":"<p>Clones a value. The input may be an Object, Array, or basic type. Objects and\narrays will be cloned recursively.</p>\n<p>WARNINGS:\n<code>goog.cloneObject</code> does not detect reference loops. Objects that\nrefer to themselves will cause infinite recursion.</p>\n<p><code>goog.cloneObject</code> is unaware of unique identifiers, and copies\nUIDs created by <code>getUid</code> into cloned results.</p>\n"}]},"4":{"1":[{"2":"<p>goog.cloneObject is unsafe. Prefer the goog.object methods.</p>\n"}]},"6":{"2":true}},"4":[{"1":"obj","2":{"7":true},"3":{"1":[{"2":"<p>The value to clone.</p>\n"}]}}],"5":{"2":{"7":true},"3":{"1":[{"2":"<p>A clone of the input value.</p>\n"}]}}},{"1":{"1":"define","2":{"1":"closure/goog/base.js","2":160,"3":"https://github.com/google/closure-library/blob/master/closure/goog/base.js#L160"},"3":{"1":[{"2":"<p>Defines a named value. In uncompiled mode, the value is retrieved from\nCLOSURE_DEFINES or CLOSURE_UNCOMPILED_DEFINES if the object is defined and\nhas the property specified, and otherwise used the defined defaultValue.\nWhen compiled the default can be overridden using the compiler\noptions or the value set in the CLOSURE_DEFINES object.</p>\n"}]}},"4":[{"1":"name","2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>The distinguished name to provide.</p>\n"}]}},{"1":"defaultValue","2":{"6":{"1":[{"4":{"1":"string","4":true}},{"4":{"1":"number","4":true}},{"4":{"1":"boolean","4":true}}]}}}]},{"1":{"1":"defineClass","2":{"1":"closure/goog/base.js","2":2643,"3":"https://github.com/google/closure-library/blob/master/closure/goog/base.js#L2643"},"3":{"1":[{"2":"<p>Creates a restricted form of a Closure &#34;class&#34;:</p>\n<ul><li>from the compiler&#39;s perspective, the instance returned from the\nconstructor is sealed (no new properties may be added).  This enables\nbetter checks.</li><li>the compiler will rewrite this definition to a form that is optimal\nfor type checking and optimization (initially this will be a more\ntraditional form).</li></ul>\n"}]}},"4":[{"1":"superClass","2":{"6":{"1":[{"4":{"1":"Function"}},{"10":true}]}},"3":{"1":[{"2":"<p>The superclass, Object or null.</p>\n"}]}},{"1":"def","2":{"5":{"1":[{"1":"constructor","2":{"6":{"1":[{"4":{"1":"Function"}},{"9":true}]}}},{"1":"statics","2":{"6":{"1":[{"4":{"1":"Object","4":true}},{"10":true},{"9":true}]}}}]}},"3":{"1":[{"2":"<p>An object literal describing\nthe class.  It may have the following properties:\n&#34;constructor&#34;: the constructor function\n&#34;statics&#34;: an object literal containing methods to add to the constructor\nas &#34;static&#34; methods or a function that will receive the constructor\nfunction as its only parameter to which static properties can\nbe added.\nall other properties are added to the prototype.</p>\n"}]}}],"5":{"2":{"4":{"1":"Function"}},"3":{"1":[{"2":"<p>The class constructor.</p>\n"}]}}},{"1":{"1":"exportProperty","2":{"1":"closure/goog/base.js","2":2444,"3":"https://github.com/google/closure-library/blob/master/closure/goog/base.js#L2444"},"3":{"1":[{"2":"<p>Exports a property unobfuscated into the object&#39;s namespace.\nex. goog.exportProperty(Foo, &#39;staticFunction&#39;, Foo.staticFunction);\nex. goog.exportProperty(Foo.prototype, &#39;myMethod&#39;, Foo.prototype.myMethod);</p>\n"}]}},"4":[{"1":"object","2":{"6":{"1":[{"4":{"1":"Object","4":true}},{"10":true}]}},"3":{"1":[{"2":"<p>Object whose static property is being exported.</p>\n"}]}},{"1":"publicName","2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>Unobfuscated name to export.</p>\n"}]}},{"1":"symbol","2":{"7":true},"3":{"1":[{"2":"<p>Object the name should point to.</p>\n"}]}}]},{"1":{"1":"exportSymbol","2":{"1":"closure/goog/base.js","2":2431,"3":"https://github.com/google/closure-library/blob/master/closure/goog/base.js#L2431"},"3":{"1":[{"2":"<p>Exposes an unobfuscated global namespace path for the given object.\nNote that fields of the exported object <em>will</em> be obfuscated, unless they are\nexported in turn via this function or goog.exportProperty.</p>\n<p>Also handy for making public items that are defined in anonymous closures.</p>\n<p>ex. goog.exportSymbol(&#39;public.path.Foo&#39;, Foo);</p>\n<p>ex. goog.exportSymbol(&#39;public.path.Foo.staticFunction&#39;, Foo.staticFunction);\npublic.path.Foo.staticFunction();</p>\n<p>ex. goog.exportSymbol(&#39;public.path.Foo.prototype.myMethod&#39;,\nFoo.prototype.myMethod);\nnew public.path.Foo().myMethod();</p>\n"}]}},"4":[{"1":"publicPath","2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>Unobfuscated name to export.</p>\n"}]}},{"1":"object","2":{"7":true},"3":{"1":[{"2":"<p>Object the name should point to.</p>\n"}]}},{"1":"opt_objectToExportTo","2":{"1":true,"6":{"1":[{"4":{"1":"Object","4":true}},{"10":true},{"9":true}]}},"3":{"1":[{"2":"<p>The object to add the path to; default\nis goog.global.</p>\n"}]}}]},{"1":{"1":"forwardDeclare","2":{"1":"closure/goog/base.js","2":493,"3":"https://github.com/google/closure-library/blob/master/closure/goog/base.js#L493"},"3":{"1":[{"2":"<p>Forward declares a symbol. This is an indication to the compiler that the\nsymbol may be used in the source yet is not required and may not be provided\nin compilation.</p>\n<p>The most common usage of forward declaration is code that takes a type as a\nfunction parameter but does not need to require it. By forward declaring\ninstead of requiring, no hard dependency is made, and (if not required\nelsewhere) the namespace may never be required and thus, not be pulled\ninto the JavaScript binary. If it is required elsewhere, it will be type\nchecked as normal.</p>\n<p>Before using goog.forwardDeclare, please read the documentation at\nhttps://github.com/google/closure-compiler/wiki/Bad-Type-Annotation to\nunderstand the options and tradeoffs when working with forward declarations.</p>\n"}]}},"4":[{"1":"name","2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>The namespace to forward declare in the form of\n&#34;goog.package.part&#34;.</p>\n"}]}}]},{"1":{"1":"getCssName","2":{"1":"closure/goog/base.js","2":2262,"3":"https://github.com/google/closure-library/blob/master/closure/goog/base.js#L2262"},"3":{"1":[{"2":"<p>Handles strings that are intended to be used as CSS class names.</p>\n<p>This function works in tandem with &#64;see goog.setCssNameMapping.</p>\n<p>Without any mapping set, the arguments are simple joined with a hyphen and\npassed through unaltered.</p>\n<p>When there is a mapping, there are two possible styles in which these\nmappings are used. In the BY_PART style, each part (i.e. in between hyphens)\nof the passed in css name is rewritten according to the map. In the BY_WHOLE\nstyle, the full css name is looked up in the map directly. If a rewrite is\nnot specified by the map, the compiler will output a warning.</p>\n<p>When the mapping is passed to the compiler, it will replace calls to\ngoog.getCssName with the strings from the mapping, e.g.\nvar x &#61; goog.getCssName(&#39;foo&#39;);\nvar y &#61; goog.getCssName(this.baseClass, &#39;active&#39;);\nbecomes:\nvar x &#61; &#39;foo&#39;;\nvar y &#61; this.baseClass &#43; &#39;-active&#39;;</p>\n<p>If one argument is passed it will be processed, if two are passed only the\nmodifier will be processed, as it is assumed the first argument was generated\nas a result of calling goog.getCssName.</p>\n"}]}},"4":[{"1":"className","2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>The class name.</p>\n"}]}},{"1":"opt_modifier","2":{"1":true,"6":{"1":[{"4":{"1":"string","4":true}},{"9":true}]}},"3":{"1":[{"2":"<p>A modifier to be appended to the class name.</p>\n"}]}}],"5":{"2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>The class name or the concatenation of the class name and\nthe modifier.</p>\n"}]}}},{"1":{"1":"getHashCode","2":{"1":"closure/goog/base.js","2":1951,"3":"https://github.com/google/closure-library/blob/master/closure/goog/base.js#L1951"},"3":{"1":[{"2":"<p>Adds a hash code field to an object. The hash code is unique for the\ngiven object.</p>\n"}]},"4":{"1":[{"2":"<p>Use goog.getUid instead.</p>\n"}]},"6":{"2":true}},"4":[{"1":"obj","2":{"6":{"1":[{"4":{"1":"Object","4":true}},{"10":true}]}},"3":{"1":[{"2":"<p>The object to get the hash code for.</p>\n"}]}}],"5":{"2":{"4":{"1":"number","4":true}},"3":{"1":[{"2":"<p>The hash code for the object.</p>\n"}]}}},{"1":{"1":"getMsg","2":{"1":"closure/goog/base.js","2":2379,"3":"https://github.com/google/closure-library/blob/master/closure/goog/base.js#L2379"},"3":{"1":[{"2":"<p>Gets a localized message.</p>\n<p>This function is a compiler primitive. If you give the compiler a localized\nmessage bundle, it will replace the string at compile-time with a localized\nversion, and expand goog.getMsg call to a concatenated string.</p>\n<p>Messages must be initialized in the form:\n<code>\nvar MSG_NAME &#61; goog.getMsg(&#39;Hello {$placeholder}&#39;, {&#39;placeholder&#39;: &#39;world&#39;});\n</code></p>\n<p>This function produces a string which should be treated as plain text. Use\n<a href=\"goog.html.SafeHtmlFormatter.html\"><code>goog.html.SafeHtmlFormatter</code></a> in conjunction with goog.getMsg to\nproduce SafeHtml.</p>\n"}]}},"4":[{"1":"str","2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>Translatable string, places holders in the form {$foo}.</p>\n"}]}},{"1":"opt_values","2":{"1":true,"6":{"1":[{"4":{"1":"Object","4":true,"5":[{"4":{"1":"string","4":true}},{"4":{"1":"string","4":true}}]}},{"10":true},{"9":true}]}},"3":{"1":[{"2":"<p>Maps place holder name to value.</p>\n"}]}}],"5":{"2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>message with placeholders filled.</p>\n"}]}}},{"1":{"1":"getMsgWithFallback","2":{"1":"closure/goog/base.js","2":2405,"3":"https://github.com/google/closure-library/blob/master/closure/goog/base.js#L2405"},"3":{"1":[{"2":"<p>Gets a localized message. If the message does not have a translation, gives a\nfallback message.</p>\n<p>This is useful when introducing a new message that has not yet been\ntranslated into all languages.</p>\n<p>This function is a compiler primitive. Must be used in the form:\n<code>var x &#61; goog.getMsgWithFallback(MSG_A, MSG_B);</code>\nwhere MSG_A and MSG_B were initialized with goog.getMsg.</p>\n"}]}},"4":[{"1":"a","2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>The preferred message.</p>\n"}]}},{"1":"b","2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>The fallback message.</p>\n"}]}}],"5":{"2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>The best translated message.</p>\n"}]}}},{"1":{"1":"getObjectByName","2":{"1":"closure/goog/base.js","2":548,"3":"https://github.com/google/closure-library/blob/master/closure/goog/base.js#L548"},"3":{"1":[{"2":"<p>Returns an object based on its fully qualified external name.  The object\nis not found if null or undefined.  If you are using a compilation pass that\nrenames property names beware that using this function will not find renamed\nproperties.</p>\n"}]}},"4":[{"1":"name","2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>The fully qualified name.</p>\n"}]}},{"1":"opt_obj","2":{"1":true,"6":{"1":[{"4":{"1":"Object","4":true}},{"10":true},{"9":true}]}},"3":{"1":[{"2":"<p>The object within which to look; default is\n|goog.global|.</p>\n"}]}}],"5":{"3":{"1":[{"2":"<p>The value (object or primitive) or, if not found, null.</p>\n"}]}}},{"1":{"1":"getUid","2":{"1":"closure/goog/base.js","2":1881,"3":"https://github.com/google/closure-library/blob/master/closure/goog/base.js#L1881"},"3":{"1":[{"2":"<p>Gets a unique ID for an object. This mutates the object so that further calls\nwith the same object as a parameter returns the same value. The unique ID is\nguaranteed to be unique across the current session amongst objects that are\npassed into <code>getUid</code>. There is no guarantee that the ID is unique or\nconsistent across sessions. It is unsafe to generate unique ID for function\nprototypes.</p>\n"}]}},"4":[{"1":"obj","2":{"6":{"1":[{"4":{"1":"Object","4":true}},{"10":true}]}},"3":{"1":[{"2":"<p>The object to get the unique ID for.</p>\n"}]}}],"5":{"2":{"4":{"1":"number","4":true}},"3":{"1":[{"2":"<p>The unique ID for the object.</p>\n"}]}}},{"1":{"1":"globalEval","2":{"1":"closure/goog/base.js","2":2151,"3":"https://github.com/google/closure-library/blob/master/closure/goog/base.js#L2151"},"3":{"1":[{"2":"<p>Evals JavaScript in the global scope.  In IE this uses execScript, other\nbrowsers use goog.global.eval. If goog.global.eval does not evaluate in the\nglobal scope (for example, in Safari), appends a script tag instead.\nThrows an exception if neither execScript or eval is defined.</p>\n"}]}},"4":[{"1":"script","2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>JavaScript string.</p>\n"}]}}]},{"1":{"1":"globalize","2":{"1":"closure/goog/base.js","2":570,"3":"https://github.com/google/closure-library/blob/master/closure/goog/base.js#L570"},"3":{"1":[{"2":"<p>Globalizes a whole namespace, such as goog or goog.lang.</p>\n"}]},"4":{"1":[{"2":"<p>Properties may be explicitly exported to the global scope, but\nthis should no longer be done in bulk.</p>\n"}]},"6":{"2":true}},"4":[{"1":"obj","2":{"4":{"1":"Object","4":true}},"3":{"1":[{"2":"<p>The namespace to globalize.</p>\n"}]}},{"1":"opt_global","2":{"1":true,"6":{"1":[{"4":{"1":"Object","4":true}},{"10":true},{"9":true}]}},"3":{"1":[{"2":"<p>The object to add the properties to.</p>\n"}]}}]},{"1":{"1":"hasUid","2":{"1":"closure/goog/base.js","2":1900,"3":"https://github.com/google/closure-library/blob/master/closure/goog/base.js#L1900"},"3":{"1":[{"2":"<p>Whether the given object is already assigned a unique ID.</p>\n<p>This does not modify the object.</p>\n"}]}},"4":[{"1":"obj","2":{"4":{"1":"Object","4":true}},"3":{"1":[{"2":"<p>The object to check.</p>\n"}]}}],"5":{"2":{"4":{"1":"boolean","4":true}},"3":{"1":[{"2":"<p>Whether there is an assigned unique id for the object.</p>\n"}]}}},{"1":{"1":"inherits","2":{"1":"closure/goog/base.js","2":2469,"3":"https://github.com/google/closure-library/blob/master/closure/goog/base.js#L2469"},"3":{"1":[{"2":"<p>Inherit the prototype methods from one constructor into another.</p>\n<p>Usage:</p>\n <pre>\n function ParentClass(a, b) { }\n ParentClass.prototype.foo &#61; function(a) { };\n\n function ChildClass(a, b, c) {\n   ChildClass.base(this, &#39;constructor&#39;, a, b);\n }\n goog.inherits(ChildClass, ParentClass);\n\n var child &#61; new ChildClass(&#39;a&#39;, &#39;b&#39;, &#39;see&#39;);\n child.foo(); // This works.\n </pre>\n"}]}},"4":[{"1":"childCtor","2":{"4":{"1":"Function"}},"3":{"1":[{"2":"<p>Child class.</p>\n"}]}},{"1":"parentCtor","2":{"4":{"1":"Function"}},"3":{"1":[{"2":"<p>Parent class.</p>\n"}]}}]},{"1":{"1":"isArray","2":{"1":"closure/goog/base.js","2":1785,"3":"https://github.com/google/closure-library/blob/master/closure/goog/base.js#L1785"},"3":{"1":[{"2":"<p>Returns true if the specified value is an array.</p>\n"}]}},"4":[{"1":"val","2":{"8":true},"3":{"1":[{"2":"<p>Variable to test.</p>\n"}]}}],"5":{"2":{"4":{"1":"boolean","4":true}},"3":{"1":[{"2":"<p>Whether variable is an array.</p>\n"}]}}},{"1":{"1":"isArrayLike","2":{"1":"closure/goog/base.js","2":1798,"3":"https://github.com/google/closure-library/blob/master/closure/goog/base.js#L1798"},"3":{"1":[{"2":"<p>Returns true if the object looks like an array. To qualify as array like\nthe value needs to be either a NodeList or an object with a Number length\nproperty. As a special case, a function value is not array like, because its\nlength property is fixed to correspond to the number of expected arguments.</p>\n"}]}},"4":[{"1":"val","2":{"8":true},"3":{"1":[{"2":"<p>Variable to test.</p>\n"}]}}],"5":{"2":{"4":{"1":"boolean","4":true}},"3":{"1":[{"2":"<p>Whether variable is an array.</p>\n"}]}}},{"1":{"1":"isBoolean","2":{"1":"closure/goog/base.js","2":1831,"3":"https://github.com/google/closure-library/blob/master/closure/goog/base.js#L1831"},"3":{"1":[{"2":"<p>Returns true if the specified value is a boolean.</p>\n"}]}},"4":[{"1":"val","2":{"8":true},"3":{"1":[{"2":"<p>Variable to test.</p>\n"}]}}],"5":{"2":{"4":{"1":"boolean","4":true}},"3":{"1":[{"2":"<p>Whether variable is boolean.</p>\n"}]}}},{"1":{"1":"isDateLike","2":{"1":"closure/goog/base.js","2":1811,"3":"https://github.com/google/closure-library/blob/master/closure/goog/base.js#L1811"},"3":{"1":[{"2":"<p>Returns true if the object looks like a Date. To qualify as Date-like the\nvalue needs to be an object and have a getFullYear() function.</p>\n"}]}},"4":[{"1":"val","2":{"8":true},"3":{"1":[{"2":"<p>Variable to test.</p>\n"}]}}],"5":{"2":{"4":{"1":"boolean","4":true}},"3":{"1":[{"2":"<p>Whether variable is a like a Date.</p>\n"}]}}},{"1":{"1":"isDef","2":{"1":"closure/goog/base.js","2":102,"3":"https://github.com/google/closure-library/blob/master/closure/goog/base.js#L102"},"3":{"1":[{"2":"<p>Returns true if the specified value is not undefined.\nWARNING: Do not use this to test if an object has a property. Use the in\noperator instead.</p>\n"}]}},"4":[{"1":"val","2":{"8":true},"3":{"1":[{"2":"<p>Variable to test.</p>\n"}]}}],"5":{"2":{"4":{"1":"boolean","4":true}},"3":{"1":[{"2":"<p>Whether variable is defined.</p>\n"}]}}},{"1":{"1":"isDefAndNotNull","2":{"1":"closure/goog/base.js","2":1774,"3":"https://github.com/google/closure-library/blob/master/closure/goog/base.js#L1774"},"3":{"1":[{"2":"<p>Returns true if the specified value is defined and not null.</p>\n"}]}},"4":[{"1":"val","2":{"8":true},"3":{"1":[{"2":"<p>Variable to test.</p>\n"}]}}],"5":{"2":{"4":{"1":"boolean","4":true}},"3":{"1":[{"2":"<p>Whether variable is defined and not null.</p>\n"}]}}},{"1":{"1":"isFunction","2":{"1":"closure/goog/base.js","2":1851,"3":"https://github.com/google/closure-library/blob/master/closure/goog/base.js#L1851"},"3":{"1":[{"2":"<p>Returns true if the specified value is a function.</p>\n"}]}},"4":[{"1":"val","2":{"8":true},"3":{"1":[{"2":"<p>Variable to test.</p>\n"}]}}],"5":{"2":{"4":{"1":"boolean","4":true}},"3":{"1":[{"2":"<p>Whether variable is a function.</p>\n"}]}}},{"1":{"1":"isNull","2":{"1":"closure/goog/base.js","2":1764,"3":"https://github.com/google/closure-library/blob/master/closure/goog/base.js#L1764"},"3":{"1":[{"2":"<p>Returns true if the specified value is null.</p>\n"}]}},"4":[{"1":"val","2":{"8":true},"3":{"1":[{"2":"<p>Variable to test.</p>\n"}]}}],"5":{"2":{"4":{"1":"boolean","4":true}},"3":{"1":[{"2":"<p>Whether variable is null.</p>\n"}]}}},{"1":{"1":"isNumber","2":{"1":"closure/goog/base.js","2":1841,"3":"https://github.com/google/closure-library/blob/master/closure/goog/base.js#L1841"},"3":{"1":[{"2":"<p>Returns true if the specified value is a number.</p>\n"}]}},"4":[{"1":"val","2":{"8":true},"3":{"1":[{"2":"<p>Variable to test.</p>\n"}]}}],"5":{"2":{"4":{"1":"boolean","4":true}},"3":{"1":[{"2":"<p>Whether variable is a number.</p>\n"}]}}},{"1":{"1":"isObject","2":{"1":"closure/goog/base.js","2":1862,"3":"https://github.com/google/closure-library/blob/master/closure/goog/base.js#L1862"},"3":{"1":[{"2":"<p>Returns true if the specified value is an object.  This includes arrays and\nfunctions.</p>\n"}]}},"4":[{"1":"val","2":{"8":true},"3":{"1":[{"2":"<p>Variable to test.</p>\n"}]}}],"5":{"2":{"4":{"1":"boolean","4":true}},"3":{"1":[{"2":"<p>Whether variable is an object.</p>\n"}]}}},{"1":{"1":"isString","2":{"1":"closure/goog/base.js","2":1821,"3":"https://github.com/google/closure-library/blob/master/closure/goog/base.js#L1821"},"3":{"1":[{"2":"<p>Returns true if the specified value is a string.</p>\n"}]}},"4":[{"1":"val","2":{"8":true},"3":{"1":[{"2":"<p>Variable to test.</p>\n"}]}}],"5":{"2":{"4":{"1":"boolean","4":true}},"3":{"1":[{"2":"<p>Whether variable is a string.</p>\n"}]}}},{"1":{"1":"loadModule","2":{"1":"closure/goog/base.js","2":1433,"3":"https://github.com/google/closure-library/blob/master/closure/goog/base.js#L1433"},"3":{}},"4":[{"1":"moduleDef","2":{"6":{"1":[{"3":{"3":[{"8":true}],"4":{"8":true}}},{"4":{"1":"string","4":true}}]}},"3":{"1":[{"2":"<p>The module definition.</p>\n"}]}}]},{"1":{"1":"loadModuleFromUrl","2":{"1":"closure/goog/base.js","2":1107,"3":"https://github.com/google/closure-library/blob/master/closure/goog/base.js#L1107"},"3":{"1":[{"2":"<p>Load a goog.module from the provided URL.  This is not a general purpose\ncode loader and does not support late loading code, that is it should only\nbe used during page load. This method exists to support unit tests and\n&#34;debug&#34; loaders that would otherwise have inserted script tags. Under the\nhood this needs to use a synchronous XHR and is not recommeneded for\nproduction code.</p>\n<p>The module&#39;s goog.requires must have already been satisified; an exception\nwill be thrown if this is not the case. This assumption is that no\n&#34;deps.js&#34; file exists, so there is no way to discover and locate the\nmodule-to-be-loaded&#39;s dependencies and no attempt is made to do so.</p>\n<p>There should only be one attempt to load a module.  If\n&#34;goog.loadModuleFromUrl&#34; is called for an already loaded module, an\nexception will be throw.</p>\n"}]}},"4":[{"1":"url","2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>The URL from which to attempt to load the goog.module.</p>\n"}]}}]},{"1":{"1":"mixin","2":{"1":"closure/goog/base.js","2":2119,"3":"https://github.com/google/closure-library/blob/master/closure/goog/base.js#L2119"},"3":{"1":[{"2":"<p>Copies all the members of a source object to a target object. This method\ndoes not work on all browsers for all objects that contain keys such as\ntoString or hasOwnProperty. Use goog.object.extend for this purpose.</p>\n"}]}},"4":[{"1":"target","2":{"6":{"1":[{"4":{"1":"Object","4":true}},{"10":true}]}},"3":{"1":[{"2":"<p>Target.</p>\n"}]}},{"1":"source","2":{"6":{"1":[{"4":{"1":"Object","4":true}},{"10":true}]}},"3":{"1":[{"2":"<p>Source.</p>\n"}]}}]},{"1":{"1":"now","2":{"1":"closure/goog/base.js","2":2136,"3":"https://github.com/google/closure-library/blob/master/closure/goog/base.js#L2136"},"3":{}},"5":{"2":{"4":{"1":"number","4":true}},"3":{"1":[{"2":"<p>An integer value representing the number of milliseconds\nbetween midnight, January 1, 1970 and the current time.</p>\n"}]}}},{"1":{"1":"nullFunction","2":{"1":"closure/goog/base.js","2":734,"3":"https://github.com/google/closure-library/blob/master/closure/goog/base.js#L734"},"3":{"1":[{"2":"<p>Null function used for default values of callbacks, etc.</p>\n"}]}},"5":{"3":{"1":[{"2":"<p>Nothing.</p>\n"}]}}},{"1":{"1":"partial","2":{"1":"closure/goog/base.js","2":2100,"3":"https://github.com/google/closure-library/blob/master/closure/goog/base.js#L2100"},"3":{"1":[{"2":"<p>Like goog.bind(), except that a &#39;this object&#39; is not required. Useful when\nthe target function is already bound.</p>\n<p>Usage:\nvar g &#61; goog.partial(f, arg1, arg2);\ng(arg3, arg4);</p>\n"}]}},"4":[{"1":"fn","2":{"6":{"1":[{"4":{"1":"Function"}},{"10":true}]}},"3":{"1":[{"2":"<p>A function to partially apply.</p>\n"}]}},{"1":"var_args","2":{"2":true,"7":true},"3":{"1":[{"2":"<p>Additional arguments that are partially applied to fn.</p>\n"}]}}],"5":{"2":{"4":{"1":"Function"}},"3":{"1":[{"2":"<p>A partially-applied form of the function goog.partial()\nwas invoked as a method of.</p>\n"}]}}},{"1":{"1":"provide","2":{"1":"closure/goog/base.js","2":272,"3":"https://github.com/google/closure-library/blob/master/closure/goog/base.js#L272"},"3":{"1":[{"2":"<p>Defines a namespace in Closure.</p>\n<p>A namespace may only be defined once in a codebase. It may be defined using\ngoog.provide() or goog.module().</p>\n<p>The presence of one or more goog.provide() calls in a file indicates\nthat the file defines the given objects/namespaces.\nProvided symbols must not be null or undefined.</p>\n<p>In addition, goog.provide() creates the object stubs for a namespace\n(for example, goog.provide(&#34;goog.foo.bar&#34;) will create the object\ngoog.foo.bar if it does not already exist).</p>\n<p>Build tools also scan for provide/require/module statements\nto discern dependencies, build dependency files (see deps.js), etc.</p>\n"}]},"10":[{"1":[{"1":"goog.require","3":{"1":"goog.html#require"}}]},{"1":[{"1":"goog.module","3":{"1":"goog.module.html"}}]}]},"4":[{"1":"name","2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>Namespace provided by this file in the form\n&#34;goog.package.part&#34;.</p>\n"}]}}]},{"1":{"1":"removeHashCode","2":{"1":"closure/goog/base.js","2":1959,"3":"https://github.com/google/closure-library/blob/master/closure/goog/base.js#L1959"},"3":{"1":[{"2":"<p>Removes the hash code field from an object.</p>\n"}]},"4":{"1":[{"2":"<p>Use goog.removeUid instead.</p>\n"}]},"6":{"2":true}},"4":[{"1":"obj","2":{"6":{"1":[{"4":{"1":"Object","4":true}},{"10":true}]}},"3":{"1":[{"2":"<p>The object to remove the field from.</p>\n"}]}}]},{"1":{"1":"removeUid","2":{"1":"closure/goog/base.js","2":1911,"3":"https://github.com/google/closure-library/blob/master/closure/goog/base.js#L1911"},"3":{"1":[{"2":"<p>Removes the unique ID from an object. This is useful if the object was\npreviously mutated using <code>goog.getUid</code> in which case the mutation is\nundone.</p>\n"}]}},"4":[{"1":"obj","2":{"6":{"1":[{"4":{"1":"Object","4":true}},{"10":true}]}},"3":{"1":[{"2":"<p>The object to remove the unique ID field from.</p>\n"}]}}]},{"1":{"1":"require","2":{"1":"closure/goog/base.js","2":668,"3":"https://github.com/google/closure-library/blob/master/closure/goog/base.js#L668"},"3":{"1":[{"2":"<p>Implements a system for the dynamic resolution of dependencies that works in\nparallel with the BUILD system. Note that all calls to goog.require will be\nstripped by the JSCompiler when the --process_closure_primitives option is\nused.</p>\n"}]},"10":[{"1":[{"1":"goog.provide","3":{"1":"goog.html#provide"}}]}]},"4":[{"1":"name","2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>Namespace to include (as was given in goog.provide()) in\nthe form &#34;goog.package.part&#34;.</p>\n"}]}}],"5":{"3":{"1":[{"2":"<p>If called within a goog.module file, the associated namespace or\nmodule otherwise null.</p>\n"}]}}},{"1":{"1":"scope","2":{"1":"closure/goog/base.js","2":2594,"3":"https://github.com/google/closure-library/blob/master/closure/goog/base.js#L2594"},"3":{"1":[{"2":"<p>Allow for aliasing within scope functions.  This function exists for\nuncompiled code - in compiled code the calls will be inlined and the aliases\napplied.  In uncompiled code the function is simply run since the aliases as\nwritten are valid JavaScript.</p>\n"}]}},"4":[{"1":"fn","2":{"3":{"4":{"8":true}}},"3":{"1":[{"2":"<p>Function to call.  This function can contain aliases\nto namespaces (e.g. &#34;var dom &#61; goog.dom&#34;) or classes\n(e.g. &#34;var Timer &#61; goog.Timer&#34;).</p>\n"}]}}]},{"1":{"1":"setCssNameMapping","2":{"1":"closure/goog/base.js","2":2331,"3":"https://github.com/google/closure-library/blob/master/closure/goog/base.js#L2331"},"3":{"1":[{"2":"<p>Sets the map to check when returning a value from goog.getCssName(). Example:</p>\n <pre>\n goog.setCssNameMapping({\n   &#34;goog&#34;: &#34;a&#34;,\n   &#34;disabled&#34;: &#34;b&#34;,\n });\n\n var x &#61; goog.getCssName(&#39;goog&#39;);\n // The following evaluates to: &#34;a a-b&#34;.\n goog.getCssName(&#39;goog&#39;) &#43; &#39; &#39; &#43; goog.getCssName(x, &#39;disabled&#39;)\n </pre>\n<p>When declared as a map of string literals to string literals, the JSCompiler\nwill replace all calls to goog.getCssName() using the supplied map if the\n--process_closure_primitives flag is set.</p>\n"}]},"10":[{"1":[{"2":"<p>goog.getCssName for a description.</p>\n"}]}]},"4":[{"1":"mapping","2":{"4":{"1":"Object","4":true}},"3":{"1":[{"2":"<p>A map of strings to strings where keys are possible\narguments to goog.getCssName() and values are the corresponding values\nthat should be returned.</p>\n"}]}},{"1":"opt_style","2":{"1":true,"6":{"1":[{"4":{"1":"string","4":true}},{"9":true}]}},"3":{"1":[{"2":"<p>The style of css name mapping. There are two valid\noptions: &#39;BY_PART&#39;, and &#39;BY_WHOLE&#39;.</p>\n"}]}}]},{"1":{"1":"setTestOnly","2":{"1":"closure/goog/base.js","2":464,"3":"https://github.com/google/closure-library/blob/master/closure/goog/base.js#L464"},"3":{"1":[{"2":"<p>Marks that the current file should only be used for testing, and never for\nlive code in production.</p>\n<p>In the case of unit tests, the message may optionally be an exact namespace\nfor the test (e.g. &#39;goog.stringTest&#39;). The linter will then ignore the extra\nprovide (if not explicitly defined in the code).</p>\n"}]}},"4":[{"1":"opt_message","2":{"1":true,"6":{"1":[{"4":{"1":"string","4":true}},{"9":true}]}},"3":{"1":[{"2":"<p>Optional message to add to the error that&#39;s\nraised when used in production code.</p>\n"}]}}]},{"1":{"1":"tagUnsealableClass","2":{"1":"closure/goog/base.js","2":2800,"3":"https://github.com/google/closure-library/blob/master/closure/goog/base.js#L2800"},"3":{"1":[{"2":"<p>Sealing classes breaks the older idiom of assigning properties on the\nprototype rather than in the constructor. As such, goog.defineClass\nmust not seal subclasses of these old-style classes until they are fixed.\nUntil then, this marks a class as &#34;broken&#34;, instructing defineClass\nnot to seal subclasses.</p>\n"}]}},"4":[{"1":"ctr","2":{"4":{"1":"Function"}},"3":{"1":[{"2":"<p>The legacy constructor to tag as unsealable.</p>\n"}]}}]},{"1":{"1":"typeOf","2":{"1":"closure/goog/base.js","2":1666,"3":"https://github.com/google/closure-library/blob/master/closure/goog/base.js#L1666"},"3":{"1":[{"2":"<p>This is a &#34;fixed&#34; version of the typeof operator.  It differs from the typeof\noperator in such a way that null returns &#39;null&#39; and arrays return &#39;array&#39;.</p>\n"}]}},"4":[{"1":"value","2":{"8":true},"3":{"1":[{"2":"<p>The value to get the type of.</p>\n"}]}}],"5":{"2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>The name of the type.</p>\n"}]}}},{"1":{"1":"useSafari10Workaround","2":{"1":"closure/goog/base.js","2":1399,"3":"https://github.com/google/closure-library/blob/master/closure/goog/base.js#L1399"},"3":{},"5":3},"5":{"2":{"4":{"1":"boolean","4":true}}}},{"1":{"1":"workaroundSafari10EvalBug","2":{"1":"closure/goog/base.js","2":1422,"3":"https://github.com/google/closure-library/blob/master/closure/goog/base.js#L1422"},"3":{},"5":3},"4":[{"1":"moduleDef","2":{"4":{"1":"string","4":true}}}],"5":{"2":{"4":{"1":"string","4":true}}}}],"13":[{"1":{"1":"DEPENDENCIES_ENABLED","2":{"1":"closure/goog/base.js","2":818,"3":"https://github.com/google/closure-library/blob/master/closure/goog/base.js#L818"},"3":{"1":[{"2":"<p>True if goog.dependencies_ is available.</p>\n"}]},"6":{"1":true}},"2":{"4":{"1":"boolean","4":true}}},{"1":{"1":"basePath","2":{"1":"closure/goog/base.js","2":700,"3":"https://github.com/google/closure-library/blob/master/closure/goog/base.js#L700"},"3":{"1":[{"2":"<p>Path for included scripts.</p>\n"}]}},"2":{"4":{"1":"string","4":true}}},{"1":{"1":"global","2":{"1":"closure/goog/base.js","2":51,"3":"https://github.com/google/closure-library/blob/master/closure/goog/base.js#L51"},"3":{"1":[{"2":"<p>Reference to the global context.  In most cases this will be &#39;window&#39;.</p>\n"}]}},"2":{"4":{"1":"global this"}}},{"1":{"1":"hasBadLetScoping","2":{"1":"closure/goog/base.js","2":1392,"3":"https://github.com/google/closure-library/blob/master/closure/goog/base.js#L1392"},"3":{},"5":3},"2":{"6":{"1":[{"4":{"1":"boolean","4":true}},{"10":true}]}}}],"20":[{"1":{"1":"goog.DEBUG","2":{"1":"closure/goog/base.js","2":186,"3":"https://github.com/google/closure-library/blob/master/closure/goog/base.js#L186"},"3":{"1":[{"2":"<p>DEBUG is provided as a convenience so that debugging code\nthat should not be included in a production js_binary can be easily stripped\nby specifying --define goog.DEBUG&#61;false to the JSCompiler. For example, most\ntoString() methods should be declared inside an &#34;if (goog.DEBUG)&#34; conditional\nbecause they are generally used for debugging purposes and it is difficult\nfor the JSCompiler to statically determine whether they are used.</p>\n"}]},"6":{"1":true}},"2":{"4":{"1":"boolean","4":true}}},{"1":{"1":"goog.DISALLOW_TEST_ONLY_CODE","2":{"1":"closure/goog/base.js","2":240,"3":"https://github.com/google/closure-library/blob/master/closure/goog/base.js#L240"},"3":{"1":[{"2":"<p>Whether code that calls <a href=\"goog.html#setTestOnly\"><code>goog.setTestOnly</code></a> should\nbe disallowed in the compilation unit.</p>\n"}]},"6":{"1":true}},"2":{"4":{"1":"boolean","4":true}}},{"1":{"1":"goog.ENABLE_CHROME_APP_SAFE_SCRIPT_LOADING","2":{"1":"closure/goog/base.js","2":247,"3":"https://github.com/google/closure-library/blob/master/closure/goog/base.js#L247"},"3":{"1":[{"2":"<p>Whether to use a Chrome app CSP-compliant method for\nloading scripts via goog.require. &#64;see appendScriptSrcNode_.</p>\n"}]},"6":{"1":true}},"2":{"4":{"1":"boolean","4":true}}},{"1":{"1":"goog.ENABLE_DEBUG_LOADER","2":{"1":"closure/goog/base.js","2":643,"3":"https://github.com/google/closure-library/blob/master/closure/goog/base.js#L643"},"3":{"1":[{"2":"<p>Whether to enable the debug loader.</p>\n<p>If enabled, a call to goog.require() will attempt to load the namespace by\nappending a script tag to the DOM (if the namespace has been registered).</p>\n<p>If disabled, goog.require() will simply assert that the namespace has been\nprovided (and depend on the fact that some outside tool correctly ordered\nthe script).</p>\n"}]},"6":{"1":true}},"2":{"4":{"1":"boolean","4":true}}},{"1":{"1":"goog.LOAD_MODULE_USING_EVAL","2":{"1":"closure/goog/base.js","2":796,"3":"https://github.com/google/closure-library/blob/master/closure/goog/base.js#L796"},"3":{"1":[{"2":"<p>Whether to load goog.modules using <code>eval</code> when using\nthe debug loader.  This provides a better debugging experience as the\nsource is unmodified and can be edited using Chrome Workspaces or similar.\nHowever in some environments the use of <code>eval</code> is banned\nso we provide an alternative.</p>\n"}]},"6":{"1":true}},"2":{"4":{"1":"boolean","4":true}}},{"1":{"1":"goog.LOCALE","2":{"1":"closure/goog/base.js","2":208,"3":"https://github.com/google/closure-library/blob/master/closure/goog/base.js#L208"},"3":{"1":[{"2":"<p>LOCALE defines the locale being used for compilation. It is\nused to select locale specific data to be compiled in js binary. BUILD rule\ncan specify this value by &#34;--define goog.LOCALE&#61;&lt;locale_name&gt;&#34; as JSCompiler\noption.</p>\n<p>Take into account that the locale code format is important. You should use\nthe canonical Unicode format with hyphen as a delimiter. Language must be\nlowercase, Language Script - Capitalized, Region - UPPERCASE.\nThere are few examples: pt-BR, en, en-US, sr-Latin-BO, zh-Hans-CN.</p>\n<p>See more info about locale codes here:\nhttp://www.unicode.org/reports/tr35/#Unicode_Language_and_Locale_Identifiers</p>\n<p>For language codes you should use values defined by ISO 693-1. See it here\nhttp://www.w3.org/WAI/ER/IG/ert/iso639.htm. There is only one exception from\nthis rule: the Hebrew language. For legacy reasons the old code (iw) should\nbe used instead of the new code (he), see http://wiki/Main/IIISynonyms.</p>\n"}]},"6":{"1":true}},"2":{"4":{"1":"string","4":true}}},{"1":{"1":"goog.NATIVE_ARRAY_PROTOTYPES","2":{"1":"closure/goog/array/array.js","2":42,"3":"https://github.com/google/closure-library/blob/master/closure/goog/array/array.js#L42"},"3":{"1":[{"2":"<p>NATIVE_ARRAY_PROTOTYPES indicates whether the code should\nrely on Array.prototype functions, if available.</p>\n<p>The Array.prototype functions can be defined by external libraries like\nPrototype and setting this flag to false forces closure to use its own\ngoog.array implementation.</p>\n<p>If your javascript can be loaded by a third party site and you are wary about\nrelying on the prototype functions, specify\n&#34;--define goog.NATIVE_ARRAY_PROTOTYPES&#61;false&#34; to the JSCompiler.</p>\n<p>Setting goog.TRUSTED_SITE to false will automatically set\nNATIVE_ARRAY_PROTOTYPES to false.</p>\n"}]},"6":{"1":true}},"2":{"4":{"1":"boolean","4":true}}},{"1":{"1":"goog.SEAL_MODULE_EXPORTS","2":{"1":"closure/goog/base.js","2":803,"3":"https://github.com/google/closure-library/blob/master/closure/goog/base.js#L803"},"3":{"1":[{"2":"<p>Whether the exports of goog.modules should be sealed when\npossible.</p>\n"}]},"6":{"1":true}},"2":{"4":{"1":"boolean","4":true}}},{"1":{"1":"goog.STRICT_MODE_COMPATIBLE","2":{"1":"closure/goog/base.js","2":233,"3":"https://github.com/google/closure-library/blob/master/closure/goog/base.js#L233"},"3":{"1":[{"2":"<p>Whether a project is expected to be running in strict mode.</p>\n<p>This define can be used to trigger alternate implementations compatible with\nrunning in EcmaScript Strict mode or warn about unavailable functionality.</p>\n"}]},"6":{"1":true},"10":[{"1":[{"2":"<p><a href=\"https://goo.gl/PudQ4y\">https://goo.gl/PudQ4y</a></p>\n"}]}]},"2":{"4":{"1":"boolean","4":true}}},{"1":{"1":"goog.TRANSPILE","2":{"1":"closure/goog/base.js","2":830,"3":"https://github.com/google/closure-library/blob/master/closure/goog/base.js#L830"},"3":{"1":[{"2":"<p>How to decide whether to transpile.  Valid values\nare &#39;always&#39;, &#39;never&#39;, and &#39;detect&#39;.  The default (&#39;detect&#39;) is to\nuse feature detection to determine which language levels need\ntranspilation.</p>\n"}]},"6":{"1":true}},"2":{"4":{"1":"string","4":true}}},{"1":{"1":"goog.TRANSPILER","2":{"1":"closure/goog/base.js","2":837,"3":"https://github.com/google/closure-library/blob/master/closure/goog/base.js#L837"},"3":{"1":[{"2":"<p>Path to the transpiler.  Executing the script at this\npath (relative to base.js) should define a function $jscomp.transpile.</p>\n"}]},"6":{"1":true}},"2":{"4":{"1":"string","4":true}}},{"1":{"1":"goog.TRUSTED_SITE","2":{"1":"closure/goog/base.js","2":222,"3":"https://github.com/google/closure-library/blob/master/closure/goog/base.js#L222"},"3":{"1":[{"2":"<p>Whether this code is running on trusted sites.</p>\n<p>On untrusted sites, several native functions can be defined or overridden by\nexternal libraries like Prototype, Datejs, and JQuery and setting this flag\nto false forces closure to use its own implementations when possible.</p>\n<p>If your JavaScript can be loaded by a third party site and you are wary about\nrelying on non-standard implementations, specify\n&#34;--define goog.TRUSTED_SITE&#61;false&#34; to the JSCompiler.</p>\n"}]},"6":{"1":true}},"2":{"4":{"1":"boolean","4":true}}}],"23":"goog.html","24":"goog"}]}}