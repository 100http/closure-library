{"2":{"1":[{"1":"goog.async.Deferred","5":{"1":"third_party/closure/goog/mochikit/async/deferred.js","2":78,"3":"https://github.com/google/closure-library/blob/master/third_party/closure/goog/mochikit/async/deferred.js#L78"},"6":{"1":[{"1":"Deferred.AlreadyCalledError","2":"goog.async.Deferred.AlreadyCalledError.html","3":{"1":[{"2":"<p>An error sub class that is used when a Deferred has already been called.</p>\n"}]}},{"1":"Deferred.CanceledError","2":"goog.async.Deferred.CanceledError.html","3":{"1":[{"2":"<p>An error sub class that is used when a Deferred is canceled.</p>\n"}]}},{"1":"Deferred.Error_","2":"goog.async.Deferred.Error_.html","3":{"1":[{"2":"<p>Wrapper around errors that are scheduled to be thrown by failing deferreds\nafter a timeout.</p>\n"}]}}]},"7":{"1":[{"2":"<p>A Deferred represents the result of an asynchronous operation. A Deferred\ninstance has no result when it is created, and is &#34;fired&#34; (given an initial\nresult) by calling <code>callback</code> or <code>errback</code>.</p>\n<p>Once fired, the result is passed through a sequence of callback functions\nregistered with <code>addCallback</code> or <code>addErrback</code>. The functions may\nmutate the result before it is passed to the next function in the sequence.</p>\n<p>Callbacks and errbacks may be added at any time, including after the Deferred\nhas been &#34;fired&#34;. If there are no pending actions in the execution sequence\nof a fired Deferred, any new callback functions will be called with the last\ncomputed result. Adding a callback function is the only way to access the\nresult of the Deferred.</p>\n<p>If a Deferred operation is canceled, an optional user-provided cancellation\nfunction is invoked which may perform any special cleanup, followed by firing\nthe Deferred&#39;s errback sequence with a <code>CanceledError</code>. If the\nDeferred has already fired, cancellation is ignored.</p>\n<p>Deferreds may be templated to a specific type they produce using generics\nwith syntax such as:</p>\n<pre><code>/** &#64;type {goog.async.Deferred&lt;string&gt;} *\\\nvar d &#61; new goog.async.Deferred();\n// Compiler can infer that foo is a string.\nd.addCallback(function(foo) {...});\nd.callback(&#39;string&#39;);  // Checked to be passed a string\n</code></pre>\n<p>Since deferreds are often used to produce different values across a chain,\nthe type information is not propagated across chains, but rather only\nassociated with specifically cast objects.</p>\n"}]},"8":{},"12":[{"1":{"1":"Deferred.assertNoErrors","2":{"1":"third_party/closure/goog/mochikit/async/deferred.js","2":939,"3":"https://github.com/google/closure-library/blob/master/third_party/closure/goog/mochikit/async/deferred.js#L939"},"3":{"1":[{"2":"<p>Asserts that there are no pending deferred errors. If there are any\nscheduled errors, one will be thrown immediately to make this function fail.</p>\n"}]}}},{"1":{"1":"Deferred.canceled","2":{"1":"third_party/closure/goog/mochikit/async/deferred.js","2":756,"3":"https://github.com/google/closure-library/blob/master/third_party/closure/goog/mochikit/async/deferred.js#L756"},"3":{"1":[{"2":"<p>Creates a Deferred that has already been canceled.</p>\n"}]}},"5":{"2":{"4":{"1":"goog.async.Deferred","3":{"1":"goog.async.Deferred.html"}}},"3":{"1":[{"2":"<p>The new Deferred.</p>\n"}]}}},{"1":{"1":"Deferred.fail","2":{"1":"third_party/closure/goog/mochikit/async/deferred.js","2":744,"3":"https://github.com/google/closure-library/blob/master/third_party/closure/goog/mochikit/async/deferred.js#L744"},"3":{"1":[{"2":"<p>Creates a Deferred that has an initial error result.</p>\n"}]}},"4":[{"1":"res","2":{"7":true},"3":{"1":[{"2":"<p>The error result.</p>\n"}]}}],"5":{"2":{"4":{"1":"goog.async.Deferred","3":{"1":"goog.async.Deferred.html"}}},"3":{"1":[{"2":"<p>The new Deferred.</p>\n"}]}}},{"1":{"1":"Deferred.fromPromise","2":{"1":"third_party/closure/goog/mochikit/async/deferred.js","2":728,"3":"https://github.com/google/closure-library/blob/master/third_party/closure/goog/mochikit/async/deferred.js#L728"},"3":{"1":[{"2":"<p>Creates a Deferred that fires when the given promise resolves.\nUse only during migration to Promises.</p>\n"}]}},"2":["T"],"4":[{"1":"promise","2":{"4":{"1":"goog.Promise","3":{"1":"goog.Promise.html"},"5":[{"6":{"1":[{"4":{"1":"T"}},{"10":true}]}},{"8":true}]}}}],"5":{"2":{"4":{"1":"goog.async.Deferred","3":{"1":"goog.async.Deferred.html"},"5":[{"6":{"1":[{"4":{"1":"T"}},{"10":true}]}}]}},"3":{"1":[{"2":"<p>The new Deferred.</p>\n"}]}}},{"1":{"1":"Deferred.succeed","2":{"1":"third_party/closure/goog/mochikit/async/deferred.js","2":713,"3":"https://github.com/google/closure-library/blob/master/third_party/closure/goog/mochikit/async/deferred.js#L713"},"3":{"1":[{"2":"<p>Creates a Deferred that has an initial result.</p>\n"}]}},"4":[{"1":"opt_result","2":{"1":true,"7":true},"3":{"1":[{"2":"<p>The result.</p>\n"}]}}],"5":{"2":{"4":{"1":"goog.async.Deferred","3":{"1":"goog.async.Deferred.html"}}},"3":{"1":[{"2":"<p>The new Deferred.</p>\n"}]}}},{"1":{"1":"Deferred.when","2":{"1":"third_party/closure/goog/mochikit/async/deferred.js","2":795,"3":"https://github.com/google/closure-library/blob/master/third_party/closure/goog/mochikit/async/deferred.js#L795"},"3":{"1":[{"2":"<p>Normalizes values that may or may not be Deferreds.</p>\n<p>If the input value is a Deferred, the Deferred is branched (so the original\nexecution sequence is not modified) and the input callback added to the new\nbranch. The branch is returned to the caller.</p>\n<p>If the input value is not a Deferred, the callback will be executed\nimmediately and an already firing Deferred will be returned to the caller.</p>\n<p>In the following (contrived) example, if <code>isImmediate</code> is true\nthen 3 is alerted immediately, otherwise 6 is alerted after a 2-second delay.</p>\n <pre>\n var value;\n if (isImmediate) {\n   value &#61; 3;\n } else {\n   value &#61; new goog.async.Deferred();\n   setTimeout(function() { value.callback(6); }, 2000);\n }\n\n var d &#61; goog.async.Deferred.when(value, alert);\n </pre>\n"}]}},"2":["T"],"4":[{"1":"value","2":{"7":true},"3":{"1":[{"2":"<p>Deferred or normal value to pass to the callback.</p>\n"}]}},{"1":"callback","2":{"3":{"2":{"6":{"1":[{"4":{"1":"T"}},{"10":true}]}},"3":[{"8":true}],"4":{"8":true}}},"3":{"1":[{"2":"<p>The callback to execute.</p>\n"}]}},{"1":"opt_scope","2":{"1":true,"6":{"1":[{"4":{"1":"T"}},{"10":true},{"9":true}]}},"3":{"1":[{"2":"<p>An optional scope to call the callback in.</p>\n"}]}}],"5":{"2":{"4":{"1":"goog.async.Deferred","3":{"1":"goog.async.Deferred.html"}}},"3":{"1":[{"2":"<p>A new Deferred that will call the input\ncallback with the input value.</p>\n"}]}}}],"14":{"1":{"1":"Deferred","2":{"1":"third_party/closure/goog/mochikit/async/deferred.js","2":78,"3":"https://github.com/google/closure-library/blob/master/third_party/closure/goog/mochikit/async/deferred.js#L78"},"3":{"1":[{"2":"<p>A Deferred represents the result of an asynchronous operation. A Deferred\ninstance has no result when it is created, and is &#34;fired&#34; (given an initial\nresult) by calling <code>callback</code> or <code>errback</code>.</p>\n<p>Once fired, the result is passed through a sequence of callback functions\nregistered with <code>addCallback</code> or <code>addErrback</code>. The functions may\nmutate the result before it is passed to the next function in the sequence.</p>\n<p>Callbacks and errbacks may be added at any time, including after the Deferred\nhas been &#34;fired&#34;. If there are no pending actions in the execution sequence\nof a fired Deferred, any new callback functions will be called with the last\ncomputed result. Adding a callback function is the only way to access the\nresult of the Deferred.</p>\n<p>If a Deferred operation is canceled, an optional user-provided cancellation\nfunction is invoked which may perform any special cleanup, followed by firing\nthe Deferred&#39;s errback sequence with a <code>CanceledError</code>. If the\nDeferred has already fired, cancellation is ignored.</p>\n<p>Deferreds may be templated to a specific type they produce using generics\nwith syntax such as:</p>\n<pre><code>/** &#64;type {goog.async.Deferred&lt;string&gt;} *\\\nvar d &#61; new goog.async.Deferred();\n// Compiler can infer that foo is a string.\nd.addCallback(function(foo) {...});\nd.callback(&#39;string&#39;);  // Checked to be passed a string\n</code></pre>\n<p>Since deferreds are often used to produce different values across a chain,\nthe type information is not propagated across chains, but rather only\nassociated with specifically cast objects.</p>\n"}]}},"2":["VALUE"],"3":true,"4":[{"1":"opt_onCancelFunction","2":{"1":true,"6":{"1":[{"4":{"1":"Function"}},{"10":true},{"9":true}]}},"3":{"1":[{"2":"<p>A function that will be called if the\nDeferred is canceled. If provided, this function runs before the\nDeferred is fired with a <code>CanceledError</code>.</p>\n"}]}},{"1":"opt_defaultScope","2":{"1":true,"6":{"1":[{"4":{"1":"Object","3":{"1":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object"},"4":true}},{"10":true},{"9":true}]}},"3":{"1":[{"2":"<p>The default object context to call\ncallbacks and errbacks in.</p>\n"}]}}]},"15":[{"1":{"1":"addBoth","2":{"1":"third_party/closure/goog/mochikit/async/deferred.js","2":433,"3":"https://github.com/google/closure-library/blob/master/third_party/closure/goog/mochikit/async/deferred.js#L433"},"3":{"1":[{"2":"<p>Registers one function as both a callback and errback.</p>\n"}]},"8":{"1":"goog.async.Deferred","3":{"1":"goog.async.Deferred.html#addBoth"}}},"2":["T"],"4":[{"1":"f","2":{"3":{"2":{"6":{"1":[{"4":{"1":"T"}},{"10":true}]}},"3":[{"8":true}],"4":{"8":true}}},"3":{"1":[{"2":"<p>The function to be called on any result.</p>\n"}]}},{"1":"opt_scope","2":{"1":true,"6":{"1":[{"4":{"1":"T"}},{"10":true},{"9":true}]}},"3":{"1":[{"2":"<p>An optional scope to call the function in.</p>\n"}]}}],"5":{"2":{"4":{"1":"goog.async.Deferred","3":{"1":"goog.async.Deferred.html"}}},"3":{"1":[{"2":"<p>This Deferred.</p>\n"}]}}},{"1":{"1":"addCallback","2":{"1":"third_party/closure/goog/mochikit/async/deferred.js","2":396,"3":"https://github.com/google/closure-library/blob/master/third_party/closure/goog/mochikit/async/deferred.js#L396"},"3":{"1":[{"2":"<p>Register a callback function to be called with a successful result. If no\nvalue is returned by the callback function, the result value is unchanged. If\na new value is returned, it becomes the Deferred result and will be passed to\nthe next callback in the execution sequence.</p>\n<p>If the function throws an error, the error becomes the new result and will be\npassed to the next errback in the execution chain.</p>\n<p>If the function returns a Deferred, the execution sequence will be blocked\nuntil that Deferred fires. Its result will be passed to the next callback (or\nerrback if it is an error result) in this Deferred&#39;s execution sequence.</p>\n"}]},"8":{"1":"goog.async.Deferred","3":{"1":"goog.async.Deferred.html#addCallback"}}},"2":["T"],"4":[{"1":"cb","2":{"3":{"2":{"6":{"1":[{"4":{"1":"T"}},{"10":true}]}},"3":[{"6":{"1":[{"4":{"1":"VALUE"}},{"10":true}]}}],"4":{"8":true}}},"3":{"1":[{"2":"<p>The function to be called with a\nsuccessful result.</p>\n"}]}},{"1":"opt_scope","2":{"1":true,"6":{"1":[{"4":{"1":"T"}},{"10":true},{"9":true}]}},"3":{"1":[{"2":"<p>An optional scope to call the callback in.</p>\n"}]}}],"5":{"2":{"4":{"1":"goog.async.Deferred","3":{"1":"goog.async.Deferred.html"}}},"3":{"1":[{"2":"<p>This Deferred.</p>\n"}]}}},{"1":{"1":"addCallbacks","2":{"1":"third_party/closure/goog/mochikit/async/deferred.js","2":474,"3":"https://github.com/google/closure-library/blob/master/third_party/closure/goog/mochikit/async/deferred.js#L474"},"3":{"1":[{"2":"<p>Registers a callback function and an errback function at the same position\nin the execution sequence. Only one of these functions will execute,\ndepending on the error state during the execution sequence.</p>\n<p>NOTE: This is not equivalent to <code>def.addCallback().addErrback()</code>! If\nthe callback is invoked, the errback will be skipped, and vice versa.</p>\n"}]},"8":{"1":"goog.async.Deferred","3":{"1":"goog.async.Deferred.html#addCallbacks"}}},"2":["T"],"4":[{"1":"cb","2":{"6":{"1":[{"3":{"2":{"6":{"1":[{"4":{"1":"T"}},{"10":true}]}},"3":[{"6":{"1":[{"4":{"1":"VALUE"}},{"10":true}]}}],"4":{"8":true}}},{"10":true}]}},"3":{"1":[{"2":"<p>The function to be called on a\nsuccessful result.</p>\n"}]}},{"1":"eb","2":{"6":{"1":[{"3":{"2":{"6":{"1":[{"4":{"1":"T"}},{"10":true}]}},"3":[{"8":true}],"4":{"8":true}}},{"10":true}]}},"3":{"1":[{"2":"<p>The function to be called on an\nunsuccessful result.</p>\n"}]}},{"1":"opt_scope","2":{"1":true,"6":{"1":[{"4":{"1":"T"}},{"10":true},{"9":true}]}},"3":{"1":[{"2":"<p>An optional scope to call the functions in.</p>\n"}]}}],"5":{"2":{"4":{"1":"goog.async.Deferred","3":{"1":"goog.async.Deferred.html"}}},"3":{"1":[{"2":"<p>This Deferred.</p>\n"}]}}},{"1":{"1":"addErrback","2":{"1":"third_party/closure/goog/mochikit/async/deferred.js","2":420,"3":"https://github.com/google/closure-library/blob/master/third_party/closure/goog/mochikit/async/deferred.js#L420"},"3":{"1":[{"2":"<p>Register a callback function to be called with an error result. If no value\nis returned by the function, the error result is unchanged. If a new error\nvalue is returned or thrown, that error becomes the Deferred result and will\nbe passed to the next errback in the execution sequence.</p>\n<p>If the errback function handles the error by returning a non-error value,\nthat result will be passed to the next normal callback in the sequence.</p>\n<p>If the function returns a Deferred, the execution sequence will be blocked\nuntil that Deferred fires. Its result will be passed to the next callback (or\nerrback if it is an error result) in this Deferred&#39;s execution sequence.</p>\n"}]},"8":{"1":"goog.async.Deferred","3":{"1":"goog.async.Deferred.html#addErrback"}}},"2":["T"],"4":[{"1":"eb","2":{"3":{"2":{"6":{"1":[{"4":{"1":"T"}},{"10":true}]}},"3":[{"8":true}],"4":{"8":true}}},"3":{"1":[{"2":"<p>The function to be called on an\nunsuccessful result.</p>\n"}]}},{"1":"opt_scope","2":{"1":true,"6":{"1":[{"4":{"1":"T"}},{"10":true},{"9":true}]}},"3":{"1":[{"2":"<p>An optional scope to call the errback in.</p>\n"}]}}],"5":{"2":{"4":{"1":"goog.async.Deferred","3":{"1":"goog.async.Deferred.html"},"5":[{"6":{"1":[{"4":{"1":"VALUE"}},{"10":true}]}}]}},"3":{"1":[{"2":"<p>This Deferred.</p>\n"}]}}},{"1":{"1":"addFinally","2":{"1":"third_party/closure/goog/mochikit/async/deferred.js","2":446,"3":"https://github.com/google/closure-library/blob/master/third_party/closure/goog/mochikit/async/deferred.js#L446"},"3":{"1":[{"2":"<p>Like addBoth, but propagates uncaught exceptions in the errback.</p>\n"}]},"8":{"1":"goog.async.Deferred","3":{"1":"goog.async.Deferred.html#addFinally"}}},"2":["T"],"4":[{"1":"f","2":{"3":{"2":{"6":{"1":[{"4":{"1":"T"}},{"10":true}]}},"3":[{"8":true}],"4":{"8":true}}},"3":{"1":[{"2":"<p>The function to be called on any result.</p>\n"}]}},{"1":"opt_scope","2":{"1":true,"6":{"1":[{"4":{"1":"T"}},{"10":true},{"9":true}]}},"3":{"1":[{"2":"<p>An optional scope to call the function in.</p>\n"}]}}],"5":{"2":{"4":{"1":"goog.async.Deferred","3":{"1":"goog.async.Deferred.html"},"5":[{"6":{"1":[{"4":{"1":"VALUE"}},{"10":true}]}}]}},"3":{"1":[{"2":"<p>This Deferred.</p>\n"}]}}},{"1":{"1":"awaitDeferred","2":{"1":"third_party/closure/goog/mochikit/async/deferred.js","2":543,"3":"https://github.com/google/closure-library/blob/master/third_party/closure/goog/mochikit/async/deferred.js#L543"},"3":{"1":[{"2":"<p>Makes this Deferred wait for another Deferred&#39;s execution sequence to\ncomplete before continuing.</p>\n<p>This is equivalent to adding a callback that returns <code>otherDeferred</code>,\nbut doesn&#39;t prevent additional callbacks from being added to\n<code>otherDeferred</code>.</p>\n"}]},"8":{"1":"goog.async.Deferred","3":{"1":"goog.async.Deferred.html#awaitDeferred"}}},"4":[{"1":"otherDeferred","2":{"4":{"1":"goog.Thenable","3":{"1":"goog.Thenable.html"}}},"3":{"1":[{"2":"<p>The Deferred\nto wait for.</p>\n"}]}}],"5":{"2":{"4":{"1":"goog.async.Deferred","3":{"1":"goog.async.Deferred.html"}}},"3":{"1":[{"2":"<p>This Deferred.</p>\n"}]}}},{"1":{"1":"branch","2":{"1":"third_party/closure/goog/mochikit/async/deferred.js","2":569,"3":"https://github.com/google/closure-library/blob/master/third_party/closure/goog/mochikit/async/deferred.js#L569"},"3":{"1":[{"2":"<p>Creates a branch off this Deferred&#39;s execution sequence, and returns it as a\nnew Deferred. The branched Deferred&#39;s starting result will be shared with the\nparent at the point of the branch, even if further callbacks are added to the\nparent.</p>\n<p>All branches at the same stage in the execution sequence will receive the\nsame starting value.</p>\n"}]},"8":{"1":"goog.async.Deferred","3":{"1":"goog.async.Deferred.html#branch"}}},"4":[{"1":"opt_propagateCancel","2":{"1":true,"6":{"1":[{"4":{"1":"boolean","3":{"1":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean"},"4":true}},{"9":true}]}},"3":{"1":[{"2":"<p>If cancel() is called on every child\nbranch created with opt_propagateCancel, the parent will be canceled as\nwell.</p>\n"}]}}],"5":{"2":{"4":{"1":"goog.async.Deferred","3":{"1":"goog.async.Deferred.html"},"5":[{"6":{"1":[{"4":{"1":"VALUE"}},{"10":true}]}}]}},"3":{"1":[{"2":"<p>A Deferred that will be started with\nthe computed result from this stage in the execution sequence.</p>\n"}]}}},{"1":{"1":"callback","2":{"1":"third_party/closure/goog/mochikit/async/deferred.js","2":323,"3":"https://github.com/google/closure-library/blob/master/third_party/closure/goog/mochikit/async/deferred.js#L323"},"3":{"1":[{"2":"<p>Fire the execution sequence for this Deferred by passing the starting result\nto the first registered callback.</p>\n"}]},"8":{"1":"goog.async.Deferred","3":{"1":"goog.async.Deferred.html#callback"}}},"4":[{"1":"opt_result","2":{"1":true,"6":{"1":[{"4":{"1":"VALUE"}},{"10":true},{"9":true}]}},"3":{"1":[{"2":"<p>The starting result.</p>\n"}]}}]},{"1":{"1":"cancel","2":{"1":"third_party/closure/goog/mochikit/async/deferred.js","2":228,"3":"https://github.com/google/closure-library/blob/master/third_party/closure/goog/mochikit/async/deferred.js#L228"},"3":{"1":[{"2":"<p>Cancels a Deferred that has not yet been fired, or is blocked on another\ndeferred operation. If this Deferred is waiting for a blocking Deferred to\nfire, the blocking Deferred will also be canceled.</p>\n<p>If this Deferred was created by calling branch() on a parent Deferred with\nopt_propagateCancel set to true, the parent may also be canceled. If\nopt_deepCancel is set, cancel() will be called on the parent (as well as any\nother ancestors if the parent is also a branch). If one or more branches were\ncreated with opt_propagateCancel set to true, the parent will be canceled if\ncancel() is called on all of those branches.</p>\n"}]},"8":{"1":"goog.async.Deferred","3":{"1":"goog.async.Deferred.html#cancel"}}},"4":[{"1":"opt_deepCancel","2":{"1":true,"6":{"1":[{"4":{"1":"boolean","3":{"1":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean"},"4":true}},{"9":true}]}},"3":{"1":[{"2":"<p>If true, cancels this Deferred&#39;s parent even\nif cancel() hasn&#39;t been called on some of the parent&#39;s branches. Has no\neffect on a branch without opt_propagateCancel set to true.</p>\n"}]}}]},{"1":{"1":"chainDeferred","2":{"1":"third_party/closure/goog/mochikit/async/deferred.js","2":524,"3":"https://github.com/google/closure-library/blob/master/third_party/closure/goog/mochikit/async/deferred.js#L524"},"3":{"1":[{"2":"<p>Links another Deferred to the end of this Deferred&#39;s execution sequence. The\nresult of this execution sequence will be passed as the starting result for\nthe chained Deferred, invoking either its first callback or errback.</p>\n"}]},"8":{"1":"goog.async.Deferred","3":{"1":"goog.async.Deferred.html#chainDeferred"}}},"4":[{"1":"otherDeferred","2":{"4":{"1":"goog.async.Deferred","3":{"1":"goog.async.Deferred.html"}}},"3":{"1":[{"2":"<p>The Deferred to chain.</p>\n"}]}}],"5":{"2":{"4":{"1":"goog.async.Deferred","3":{"1":"goog.async.Deferred.html"}}},"3":{"1":[{"2":"<p>This Deferred.</p>\n"}]}}},{"1":{"1":"errback","2":{"1":"third_party/closure/goog/mochikit/async/deferred.js","2":335,"3":"https://github.com/google/closure-library/blob/master/third_party/closure/goog/mochikit/async/deferred.js#L335"},"3":{"1":[{"2":"<p>Fire the execution sequence for this Deferred by passing the starting error\nresult to the first registered errback.</p>\n"}]},"8":{"1":"goog.async.Deferred","3":{"1":"goog.async.Deferred.html#errback"}}},"4":[{"1":"opt_result","2":{"1":true,"7":true},"3":{"1":[{"2":"<p>The starting error.</p>\n"}]}}]},{"1":{"1":"hasFired","2":{"1":"third_party/closure/goog/mochikit/async/deferred.js","2":584,"3":"https://github.com/google/closure-library/blob/master/third_party/closure/goog/mochikit/async/deferred.js#L584"},"3":{},"8":{"1":"goog.async.Deferred","3":{"1":"goog.async.Deferred.html#hasFired"}}},"5":{"2":{"4":{"1":"boolean","3":{"1":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean"},"4":true}},"3":{"1":[{"2":"<p>Whether the execution sequence has been started on this\nDeferred by invoking <code>callback</code> or <code>errback</code>.</p>\n"}]}}},{"1":{"1":"isError","2":{"1":"third_party/closure/goog/mochikit/async/deferred.js","2":596,"3":"https://github.com/google/closure-library/blob/master/third_party/closure/goog/mochikit/async/deferred.js#L596"},"3":{},"5":1,"8":{"1":"goog.async.Deferred","3":{"1":"goog.async.Deferred.html#isError"}}},"4":[{"1":"res","2":{"7":true},"3":{"1":[{"2":"<p>The latest result in the execution sequence.</p>\n"}]}}],"5":{"2":{"4":{"1":"boolean","3":{"1":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean"},"4":true}},"3":{"1":[{"2":"<p>Whether the current result is an error that should cause\nthe next errback to fire. May be overridden by subclasses to handle\nspecial error types.</p>\n"}]}}},{"1":{"1":"then","2":{"1":"third_party/closure/goog/mochikit/async/deferred.js","2":495,"3":"https://github.com/google/closure-library/blob/master/third_party/closure/goog/mochikit/async/deferred.js#L495"},"3":{"1":[{"2":"<p>Implements goog.Thenable for seamless integration with\ngoog.Promise.\nDeferred results are mutable and may represent multiple values over\ntheir lifetime. Calling <code>then</code> on a Deferred returns a Promise\nwith the result of the Deferred at that point in its callback chain.\nNote that if the Deferred result is never mutated, and only\n<code>then</code> calls are made, the Deferred will behave like a Promise.</p>\n"}]},"8":{"1":"goog.async.Deferred","3":{"1":"goog.async.Deferred.html#then"}},"9":[{"1":"goog.Thenable","3":{"1":"goog.Thenable.html#then"}},{"1":"IThenable","3":{"1":"https://github.com/google/closure-compiler/wiki/Special-types-in-the-Closure-Type-System#ithenable"},"4":true},{"1":"IThenable","3":{"1":"https://github.com/google/closure-compiler/wiki/Special-types-in-the-Closure-Type-System#ithenable"},"4":true}]},"4":[{"1":"opt_onFulfilled","2":{"1":true,"6":{"1":[{"3":{"2":{"6":{"1":[{"4":{"1":"THIS"}},{"10":true}]}},"3":[{"6":{"1":[{"4":{"1":"TYPE"}},{"10":true}]}}],"4":{"6":{"1":[{"4":{"1":"VALUE"}},{"10":true}]}}}},{"10":true},{"9":true}]}},"3":{"1":[{"2":"<p>A\nfunction that will be invoked with the fulfillment value if the Promise\nis fulfilled.</p>\n"}]}},{"1":"opt_onRejected","2":{"1":true,"6":{"1":[{"3":{"2":{"6":{"1":[{"4":{"1":"THIS"}},{"10":true}]}},"3":[{"7":true}],"4":{"7":true}}},{"10":true},{"9":true}]}},"3":{"1":[{"2":"<p>A function that will\nbe invoked with the rejection reason if the Promise is rejected.</p>\n"}]}},{"1":"opt_context","2":{"1":true,"6":{"1":[{"4":{"1":"THIS"}},{"10":true},{"9":true}]}},"3":{"1":[{"2":"<p>An optional context object that will be the\nexecution context for the callbacks. By default, functions are executed\nwith the default this.</p>\n"}]}}],"5":{"2":{"4":{"1":"RESULT"}},"3":{"1":[{"2":"<p>A new Promise that will receive the result\nof the fulfillment or rejection callback.</p>\n"}]}}}],"19":[{"1":"IThenable","3":{"1":"https://github.com/google/closure-compiler/wiki/Special-types-in-the-Closure-Type-System#ithenable"},"4":true,"5":[{"4":{"1":"VALUE"}}]},{"1":"goog.Thenable","3":{"1":"goog.Thenable.html"},"5":[{"4":{"1":"VALUE"}}]}],"26":[{"1":"goog.async.DeferredList","3":{"1":"goog.async.DeferredList.html"}},{"1":"goog.result.DeferredAdaptor","3":{"1":"goog.result.DeferredAdaptor.html"}}],"20":[{"1":{"1":"goog.async.Deferred.LONG_STACK_TRACES","2":{"1":"third_party/closure/goog/mochikit/async/deferred.js","2":209,"3":"https://github.com/google/closure-library/blob/master/third_party/closure/goog/mochikit/async/deferred.js#L209"},"3":{"1":[{"2":"<p>Whether to attempt to make stack traces long.  Defaults to\nthe value of goog.DEBUG.</p>\n"}]},"6":{"1":true}},"2":{"4":{"1":"boolean","3":{"1":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean"},"4":true}}},{"1":{"1":"goog.async.Deferred.STRICT_ERRORS","2":{"1":"third_party/closure/goog/mochikit/async/deferred.js","2":202,"3":"https://github.com/google/closure-library/blob/master/third_party/closure/goog/mochikit/async/deferred.js#L202"},"3":{"1":[{"2":"<p>Whether unhandled errors should always get rethrown to the\nglobal scope. Defaults to the value of goog.DEBUG.</p>\n"}]},"6":{"1":true}},"2":{"4":{"1":"boolean","3":{"1":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean"},"4":true}}}],"21":{"1":{"1":"goog.async","3":{"1":"goog.async.html"}}},"23":"goog.async.Deferred.html","24":"goog.async.Deferred"}]}}