{"2":{"1":[{"1":"goog.i18n.BidiFormatter","5":{"1":"closure/goog/i18n/bidiformatter.js","2":85,"3":"https://github.com/google/closure-library/blob/master/closure/goog/i18n/bidiformatter.js#L85"},"7":{"1":[{"2":"<p>Utility class for formatting text for display in a potentially\nopposite-directionality context without garbling. Provides the following\nfunctionality:</p>\n<ol><li>\n<p>BiDi Wrapping\nWhen text in one language is mixed into a document in another, opposite-\ndirectionality language, e.g. when an English business name is embedded in a\nHebrew web page, both the inserted string and the text following it may be\ndisplayed incorrectly unless the inserted string is explicitly separated\nfrom the surrounding text in a &#34;wrapper&#34; that declares its directionality at\nthe start and then resets it back at the end. This wrapping can be done in\nHTML mark-up (e.g. a &#39;span dir&#61;&#34;rtl&#34;&#39; tag) or - only in contexts where\nmark-up can not be used - in Unicode BiDi formatting codes (LRE|RLE and PDF).\nProviding such wrapping services is the basic purpose of the BiDi formatter.</p>\n</li><li>\n<p>Directionality estimation\nHow does one know whether a string about to be inserted into surrounding\ntext has the same directionality? Well, in many cases, one knows that this\nmust be the case when writing the code doing the insertion, e.g. when a\nlocalized message is inserted into a localized page. In such cases there is\nno need to involve the BiDi formatter at all. In the remaining cases, e.g.\nwhen the string is user-entered or comes from a database, the language of\nthe string (and thus its directionality) is not known a priori, and must be\nestimated at run-time. The BiDi formatter does this automatically.</p>\n</li><li>\n<p>Escaping\nWhen wrapping plain text - i.e. text that is not already HTML or HTML-\nescaped - in HTML mark-up, the text must first be HTML-escaped to prevent XSS\nattacks and other nasty business. This of course is always true, but the\nescaping can not be done after the string has already been wrapped in\nmark-up, so the BiDi formatter also serves as a last chance and includes\nescaping services.</p>\n</li></ol>\n<p>Thus, in a single call, the formatter will escape the input string as\nspecified, determine its directionality, and wrap it as necessary. It is\nthen up to the caller to insert the return value in the output.</p>\n<p>See http://wiki/Main/TemplatesAndBiDi for more information.</p>\n"}]},"8":{"4":true},"14":{"1":{"1":"BidiFormatter","2":{"1":"closure/goog/i18n/bidiformatter.js","2":85,"3":"https://github.com/google/closure-library/blob/master/closure/goog/i18n/bidiformatter.js#L85"},"3":{"1":[{"2":"<p>Utility class for formatting text for display in a potentially\nopposite-directionality context without garbling. Provides the following\nfunctionality:</p>\n<ol><li>\n<p>BiDi Wrapping\nWhen text in one language is mixed into a document in another, opposite-\ndirectionality language, e.g. when an English business name is embedded in a\nHebrew web page, both the inserted string and the text following it may be\ndisplayed incorrectly unless the inserted string is explicitly separated\nfrom the surrounding text in a &#34;wrapper&#34; that declares its directionality at\nthe start and then resets it back at the end. This wrapping can be done in\nHTML mark-up (e.g. a &#39;span dir&#61;&#34;rtl&#34;&#39; tag) or - only in contexts where\nmark-up can not be used - in Unicode BiDi formatting codes (LRE|RLE and PDF).\nProviding such wrapping services is the basic purpose of the BiDi formatter.</p>\n</li><li>\n<p>Directionality estimation\nHow does one know whether a string about to be inserted into surrounding\ntext has the same directionality? Well, in many cases, one knows that this\nmust be the case when writing the code doing the insertion, e.g. when a\nlocalized message is inserted into a localized page. In such cases there is\nno need to involve the BiDi formatter at all. In the remaining cases, e.g.\nwhen the string is user-entered or comes from a database, the language of\nthe string (and thus its directionality) is not known a priori, and must be\nestimated at run-time. The BiDi formatter does this automatically.</p>\n</li><li>\n<p>Escaping\nWhen wrapping plain text - i.e. text that is not already HTML or HTML-\nescaped - in HTML mark-up, the text must first be HTML-escaped to prevent XSS\nattacks and other nasty business. This of course is always true, but the\nescaping can not be done after the string has already been wrapped in\nmark-up, so the BiDi formatter also serves as a last chance and includes\nescaping services.</p>\n</li></ol>\n<p>Thus, in a single call, the formatter will escape the input string as\nspecified, determine its directionality, and wrap it as necessary. It is\nthen up to the caller to insert the return value in the output.</p>\n<p>See http://wiki/Main/TemplatesAndBiDi for more information.</p>\n"}]}},"3":true,"4":[{"1":"contextDir","2":{"6":{"1":[{"4":{"1":"number","4":true}},{"4":{"1":"boolean","4":true}},{"10":true}]}},"3":{"1":[{"2":"<p>The context\ndirectionality, in one of the following formats:\n1. A goog.i18n.bidi.Dir constant. NEUTRAL is treated the same as null,\ni.e. unknown, for backward compatibility with legacy calls.\n2. A number (positive &#61; LTR, negative &#61; RTL, 0 &#61; unknown).\n3. A boolean (true &#61; RTL, false &#61; LTR).\n4. A null for unknown directionality.</p>\n"}]}},{"1":"opt_alwaysSpan","2":{"1":true,"6":{"1":[{"4":{"1":"boolean","4":true}},{"9":true}]}},"3":{"1":[{"2":"<p>Whether <a href=\"goog.i18n.BidiFormatter.html\"><code>#spanWrap</code></a> should always\nuse a &#39;span&#39; tag, even when the input directionality is neutral or\nmatches the context, so that the DOM structure of the output does not\ndepend on the combination of directionalities. Default: false.</p>\n"}]}}]},"15":[{"1":{"1":"dirAttr","2":{"1":"closure/goog/i18n/bidiformatter.js","2":251,"3":"https://github.com/google/closure-library/blob/master/closure/goog/i18n/bidiformatter.js#L251"},"3":{"1":[{"2":"<p>Returns &#39;dir&#61;&#34;ltr&#34;&#39; or &#39;dir&#61;&#34;rtl&#34;&#39;, depending on <code>str</code>&#39;s estimated\ndirectionality, if it is not the same as the context directionality.\nOtherwise, returns the empty string.</p>\n"}]}},"4":[{"1":"str","2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>Text whose directionality is to be estimated.</p>\n"}]}},{"1":"opt_isHtml","2":{"1":true,"6":{"1":[{"4":{"1":"boolean","4":true}},{"9":true}]}},"3":{"1":[{"2":"<p>Whether <code>str</code> is HTML / HTML-escaped.\nDefault: false.</p>\n"}]}}],"5":{"2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>&#39;dir&#61;&#34;rtl&#34;&#39; for RTL text in non-RTL context; &#39;dir&#61;&#34;ltr&#34;&#39; for\nLTR text in non-LTR context; else, the empty string.</p>\n"}]}}},{"1":{"1":"dirAttrValue","2":{"1":"closure/goog/i18n/bidiformatter.js","2":221,"3":"https://github.com/google/closure-library/blob/master/closure/goog/i18n/bidiformatter.js#L221"},"3":{"1":[{"2":"<p>Returns &#34;rtl&#34; if <code>str</code>&#39;s estimated directionality is RTL, and &#34;ltr&#34; if\nit is LTR. In case it&#39;s NEUTRAL, returns &#34;rtl&#34; if the context directionality\nis RTL, and &#34;ltr&#34; otherwise.\nNeeded for GXP, which can&#39;t handle dirAttr.\nExample use case:\n&lt;td expr:dir&#61;&#39;bidiFormatter.dirAttrValue(foo)&#39;&gt;\n&lt;gxp:eval expr&#61;&#39;foo&#39;&gt;\n&lt;/td&gt;</p>\n"}]}},"4":[{"1":"str","2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>Text whose directionality is to be estimated.</p>\n"}]}},{"1":"opt_isHtml","2":{"1":true,"6":{"1":[{"4":{"1":"boolean","4":true}},{"9":true}]}},"3":{"1":[{"2":"<p>Whether <code>str</code> is HTML / HTML-escaped.\nDefault: false.</p>\n"}]}}],"5":{"2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>&#34;rtl&#34; or &#34;ltr&#34;, according to the logic described above.</p>\n"}]}}},{"1":{"1":"endEdge","2":{"1":"closure/goog/i18n/bidiformatter.js","2":552,"3":"https://github.com/google/closure-library/blob/master/closure/goog/i18n/bidiformatter.js#L552"},"3":{"1":[{"2":"<p>Returns &#39;left&#39; for RTL context directionality. Otherwise (LTR or neutral /\nunknown context directionality) returns &#39;right&#39;.</p>\n"}]}},"5":{"2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>&#39;left&#39; for RTL context directionality and &#39;right&#39; for other\ncontext directionality.</p>\n"}]}}},{"1":{"1":"estimateDirection","2":{"1":"closure/goog/i18n/bidiformatter.js","2":155,"3":"https://github.com/google/closure-library/blob/master/closure/goog/i18n/bidiformatter.js#L155"},"3":{"1":[{"2":"<p>Returns the directionality of input argument <code>str</code>.\nIdentical to <a href=\"goog.i18n.bidi.html#estimateDirection\"><code>goog.i18n.bidi.estimateDirection</code></a>.</p>\n"}]}},"4":[{"1":"str","2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>The input text.</p>\n"}]}},{"1":"opt_isHtml","2":{"1":true,"6":{"1":[{"4":{"1":"boolean","4":true}},{"9":true}]}},"3":{"1":[{"2":"<p>Whether <code>str</code> is HTML / HTML-escaped.\nDefault: false.</p>\n"}]}}],"5":{"2":{"4":{"1":"goog.i18n.bidi.Dir","3":{"1":"goog.i18n.bidi.Dir.html"}}},"3":{"1":[{"2":"<p>Estimated overall directionality of <code>str</code>.</p>\n"}]}}},{"1":{"1":"getAlwaysSpan","2":{"1":"closure/goog/i18n/bidiformatter.js","2":116,"3":"https://github.com/google/closure-library/blob/master/closure/goog/i18n/bidiformatter.js#L116"},"3":{}},"5":{"2":{"4":{"1":"boolean","4":true}},"3":{"1":[{"2":"<p>Whether alwaysSpan is set.</p>\n"}]}}},{"1":{"1":"getContextDir","2":{"1":"closure/goog/i18n/bidiformatter.js","2":108,"3":"https://github.com/google/closure-library/blob/master/closure/goog/i18n/bidiformatter.js#L108"},"3":{}},"5":{"2":{"6":{"1":[{"4":{"1":"goog.i18n.bidi.Dir","3":{"1":"goog.i18n.bidi.Dir.html"}}},{"10":true}]}},"3":{"1":[{"2":"<p>The context directionality.</p>\n"}]}}},{"1":{"1":"knownDirAttr","2":{"1":"closure/goog/i18n/bidiformatter.js","2":265,"3":"https://github.com/google/closure-library/blob/master/closure/goog/i18n/bidiformatter.js#L265"},"3":{"1":[{"2":"<p>Returns &#39;dir&#61;&#34;ltr&#34;&#39; or &#39;dir&#61;&#34;rtl&#34;&#39;, depending on the given directionality, if\nit is not the same as the context directionality. Otherwise, returns the\nempty string.</p>\n"}]}},"4":[{"1":"dir","2":{"4":{"1":"goog.i18n.bidi.Dir","3":{"1":"goog.i18n.bidi.Dir.html"}}},"3":{"1":[{"2":"<p>A directionality.</p>\n"}]}}],"5":{"2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>&#39;dir&#61;&#34;rtl&#34;&#39; for RTL text in non-RTL context; &#39;dir&#61;&#34;ltr&#34;&#39; for\nLTR text in non-LTR context; else, the empty string.</p>\n"}]}}},{"1":{"1":"knownDirAttrValue","2":{"1":"closure/goog/i18n/bidiformatter.js","2":234,"3":"https://github.com/google/closure-library/blob/master/closure/goog/i18n/bidiformatter.js#L234"},"3":{"1":[{"2":"<p>Returns &#34;rtl&#34; if the given directionality is RTL, and &#34;ltr&#34; if it is LTR. In\ncase it&#39;s NEUTRAL, returns &#34;rtl&#34; if the context directionality is RTL, and\n&#34;ltr&#34; otherwise.</p>\n"}]}},"4":[{"1":"dir","2":{"4":{"1":"goog.i18n.bidi.Dir","3":{"1":"goog.i18n.bidi.Dir.html"}}},"3":{"1":[{"2":"<p>A directionality.</p>\n"}]}}],"5":{"2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>&#34;rtl&#34; or &#34;ltr&#34;, according to the logic described above.</p>\n"}]}}},{"1":{"1":"mark","2":{"1":"closure/goog/i18n/bidiformatter.js","2":520,"3":"https://github.com/google/closure-library/blob/master/closure/goog/i18n/bidiformatter.js#L520"},"3":{"1":[{"2":"<p>Returns the Unicode BiDi mark matching the context directionality (LRM for\nLTR context directionality, RLM for RTL context directionality), or the\nempty string for neutral / unknown context directionality.</p>\n"}]}},"5":{"2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>LRM for LTR context directionality and RLM for RTL context\ndirectionality.</p>\n"}]}}},{"1":{"1":"markAfter","2":{"1":"closure/goog/i18n/bidiformatter.js","2":485,"3":"https://github.com/google/closure-library/blob/master/closure/goog/i18n/bidiformatter.js#L485"},"3":{"1":[{"2":"<p>Returns a Unicode BiDi mark matching the context directionality (LRM or RLM)\nif the directionality or the exit directionality of <code>str</code> are opposite\nto the context directionality. Otherwise returns the empty string.</p>\n"}]}},"4":[{"1":"str","2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>The input text.</p>\n"}]}},{"1":"opt_isHtml","2":{"1":true,"6":{"1":[{"4":{"1":"boolean","4":true}},{"9":true}]}},"3":{"1":[{"2":"<p>Whether <code>str</code> is HTML / HTML-escaped.\nDefault: false.</p>\n"}]}}],"5":{"2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>A Unicode bidi mark matching the global directionality or\nthe empty string.</p>\n"}]}}},{"1":{"1":"markAfterKnownDir","2":{"1":"closure/goog/i18n/bidiformatter.js","2":503,"3":"https://github.com/google/closure-library/blob/master/closure/goog/i18n/bidiformatter.js#L503"},"3":{"1":[{"2":"<p>Returns a Unicode BiDi mark matching the context directionality (LRM or RLM)\nif the given directionality or the exit directionality of <code>str</code> are\nopposite to the context directionality. Otherwise returns the empty string.</p>\n"}]}},"4":[{"1":"dir","2":{"6":{"1":[{"4":{"1":"goog.i18n.bidi.Dir","3":{"1":"goog.i18n.bidi.Dir.html"}}},{"10":true}]}},"3":{"1":[{"2":"<p><code>str</code>&#39;s overall directionality, or\nnull if unknown and needs to be estimated.</p>\n"}]}},{"1":"str","2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>The input text.</p>\n"}]}},{"1":"opt_isHtml","2":{"1":true,"6":{"1":[{"4":{"1":"boolean","4":true}},{"9":true}]}},"3":{"1":[{"2":"<p>Whether <code>str</code> is HTML / HTML-escaped.\nDefault: false.</p>\n"}]}}],"5":{"2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>A Unicode bidi mark matching the global directionality or\nthe empty string.</p>\n"}]}}},{"1":{"1":"setAlwaysSpan","2":{"1":"closure/goog/i18n/bidiformatter.js","2":141,"3":"https://github.com/google/closure-library/blob/master/closure/goog/i18n/bidiformatter.js#L141"},"3":{}},"4":[{"1":"alwaysSpan","2":{"4":{"1":"boolean","4":true}},"3":{"1":[{"2":"<p>Whether <a href=\"goog.i18n.BidiFormatter.html\"><code>#spanWrap</code></a> should always use a\n&#39;span&#39; tag, even when the input directionality is neutral or matches the\ncontext, so that the DOM structure of the output does not depend on the\ncombination of directionalities.</p>\n"}]}}]},{"1":{"1":"setContextDir","2":{"1":"closure/goog/i18n/bidiformatter.js","2":130,"3":"https://github.com/google/closure-library/blob/master/closure/goog/i18n/bidiformatter.js#L130"},"3":{}},"4":[{"1":"contextDir","2":{"6":{"1":[{"4":{"1":"number","4":true}},{"4":{"1":"boolean","4":true}},{"10":true}]}},"3":{"1":[{"2":"<p>The context\ndirectionality, in one of the following formats:\n1. A goog.i18n.bidi.Dir constant. NEUTRAL is treated the same as null,\ni.e. unknown.\n2. A number (positive &#61; LTR, negative &#61; RTL, 0 &#61; unknown).\n3. A boolean (true &#61; RTL, false &#61; LTR).\n4. A null for unknown directionality.</p>\n"}]}}]},{"1":{"1":"spanWrapSafeHtml","2":{"1":"closure/goog/i18n/bidiformatter.js","2":296,"3":"https://github.com/google/closure-library/blob/master/closure/goog/i18n/bidiformatter.js#L296"},"3":{"1":[{"2":"<p>Formats a string of unknown directionality for use in HTML output of the\ncontext directionality, so an opposite-directionality string is neither\ngarbled nor garbles what follows it.\nThe algorithm: estimates the directionality of input argument <code>html</code>.\nIn case its directionality doesn&#39;t match the context directionality, wraps it\nwith a &#39;span&#39; tag and adds a &#34;dir&#34; attribute (either &#39;dir&#61;&#34;rtl&#34;&#39; or\n&#39;dir&#61;&#34;ltr&#34;&#39;). If setAlwaysSpan(true) was used, the input is always wrapped\nwith &#39;span&#39;, skipping just the dir attribute when it&#39;s not needed.</p>\n<p>If <code>opt_dirReset</code>, and if the overall directionality or the exit\ndirectionality of <code>str</code> are opposite to the context directionality, a\ntrailing unicode BiDi mark matching the context directionality is appened\n(LRM or RLM).</p>\n"}]}},"4":[{"1":"html","2":{"4":{"1":"goog.html.SafeHtml","3":{"1":"goog.html.SafeHtml.html"}}},"3":{"1":[{"2":"<p>The input HTML.</p>\n"}]}},{"1":"opt_dirReset","2":{"1":true,"6":{"1":[{"4":{"1":"boolean","4":true}},{"9":true}]}},"3":{"1":[{"2":"<p>Whether to append a trailing unicode bidi mark\nmatching the context directionality, when needed, to prevent the possible\ngarbling of whatever may follow <code>html</code>. Default: true.</p>\n"}]}}],"5":{"2":{"4":{"1":"goog.html.SafeHtml","3":{"1":"goog.html.SafeHtml.html"}}},"3":{"1":[{"2":"<p>Input text after applying the processing.</p>\n"}]}}},{"1":{"1":"spanWrapSafeHtmlWithKnownDir","2":{"1":"closure/goog/i18n/bidiformatter.js","2":323,"3":"https://github.com/google/closure-library/blob/master/closure/goog/i18n/bidiformatter.js#L323"},"3":{"1":[{"2":"<p>Formats a string of given directionality for use in HTML output of the\ncontext directionality, so an opposite-directionality string is neither\ngarbled nor garbles what follows it.\nThe algorithm: If <code>dir</code> doesn&#39;t match the context directionality, wraps\n<code>html</code> with a &#39;span&#39; tag and adds a &#34;dir&#34; attribute (either &#39;dir&#61;&#34;rtl&#34;&#39;\nor &#39;dir&#61;&#34;ltr&#34;&#39;). If setAlwaysSpan(true) was used, the input is always wrapped\nwith &#39;span&#39;, skipping just the dir attribute when it&#39;s not needed.</p>\n<p>If <code>opt_dirReset</code>, and if <code>dir</code> or the exit directionality of\n<code>html</code> are opposite to the context directionality, a trailing unicode\nBiDi mark matching the context directionality is appened (LRM or RLM).</p>\n"}]}},"4":[{"1":"dir","2":{"6":{"1":[{"4":{"1":"goog.i18n.bidi.Dir","3":{"1":"goog.i18n.bidi.Dir.html"}}},{"10":true}]}},"3":{"1":[{"2":"<p><code>html</code>&#39;s overall directionality, or\nnull if unknown and needs to be estimated.</p>\n"}]}},{"1":"html","2":{"4":{"1":"goog.html.SafeHtml","3":{"1":"goog.html.SafeHtml.html"}}},"3":{"1":[{"2":"<p>The input HTML.</p>\n"}]}},{"1":"opt_dirReset","2":{"1":true,"6":{"1":[{"4":{"1":"boolean","4":true}},{"9":true}]}},"3":{"1":[{"2":"<p>Whether to append a trailing unicode bidi mark\nmatching the context directionality, when needed, to prevent the possible\ngarbling of whatever may follow <code>html</code>. Default: true.</p>\n"}]}}],"5":{"2":{"4":{"1":"goog.html.SafeHtml","3":{"1":"goog.html.SafeHtml.html"}}},"3":{"1":[{"2":"<p>Input text after applying the processing.</p>\n"}]}}},{"1":{"1":"startEdge","2":{"1":"closure/goog/i18n/bidiformatter.js","2":539,"3":"https://github.com/google/closure-library/blob/master/closure/goog/i18n/bidiformatter.js#L539"},"3":{"1":[{"2":"<p>Returns &#39;right&#39; for RTL context directionality. Otherwise (LTR or neutral /\nunknown context directionality) returns &#39;left&#39;.</p>\n"}]}},"5":{"2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>&#39;right&#39; for RTL context directionality and &#39;left&#39; for other\ncontext directionality.</p>\n"}]}}},{"1":{"1":"unicodeWrap","2":{"1":"closure/goog/i18n/bidiformatter.js","2":397,"3":"https://github.com/google/closure-library/blob/master/closure/goog/i18n/bidiformatter.js#L397"},"3":{"1":[{"2":"<p>Formats a string of unknown directionality for use in plain-text output of\nthe context directionality, so an opposite-directionality string is neither\ngarbled nor garbles what follows it.\nAs opposed to <a href=\"goog.i18n.BidiFormatter.html\"><code>#spanWrap</code></a>, this makes use of unicode BiDi formatting\ncharacters. In HTML, its <em>only</em> valid use is inside of elements that do not\nallow mark-up, e.g. an &#39;option&#39; tag.\nThe algorithm: estimates the directionality of input argument <code>str</code>.\nIn case it doesn&#39;t match  the context directionality, wraps it with Unicode\nBiDi formatting characters: RLE<code>str</code>PDF for RTL text, and\nLRE<code>str</code>PDF for LTR text.</p>\n<p>If <code>opt_dirReset</code>, and if the overall directionality or the exit\ndirectionality of <code>str</code> are opposite to the context directionality, a\ntrailing unicode BiDi mark matching the context directionality is appended\n(LRM or RLM).</p>\n<p>Does <em>not</em> do HTML-escaping regardless of the value of <code>opt_isHtml</code>.\nThe return value can be HTML-escaped as necessary.</p>\n"}]}},"4":[{"1":"str","2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>The input text.</p>\n"}]}},{"1":"opt_isHtml","2":{"1":true,"6":{"1":[{"4":{"1":"boolean","4":true}},{"9":true}]}},"3":{"1":[{"2":"<p>Whether <code>str</code> is HTML / HTML-escaped.\nDefault: false.</p>\n"}]}},{"1":"opt_dirReset","2":{"1":true,"6":{"1":[{"4":{"1":"boolean","4":true}},{"9":true}]}},"3":{"1":[{"2":"<p>Whether to append a trailing unicode bidi mark\nmatching the context directionality, when needed, to prevent the possible\ngarbling of whatever may follow <code>str</code>. Default: true.</p>\n"}]}}],"5":{"2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>Input text after applying the above processing.</p>\n"}]}}},{"1":{"1":"unicodeWrapWithKnownDir","2":{"1":"closure/goog/i18n/bidiformatter.js","2":432,"3":"https://github.com/google/closure-library/blob/master/closure/goog/i18n/bidiformatter.js#L432"},"3":{"1":[{"2":"<p>Formats a string of given directionality for use in plain-text output of the\ncontext directionality, so an opposite-directionality string is neither\ngarbled nor garbles what follows it.\nAs opposed to <a href=\"goog.i18n.BidiFormatter.html\"><code>#spanWrapWithKnownDir</code></a>, makes use of unicode BiDi\nformatting characters. In HTML, its <em>only</em> valid use is inside of elements\nthat do not allow mark-up, e.g. an &#39;option&#39; tag.\nThe algorithm: If <code>dir</code> doesn&#39;t match the context directionality, wraps\n<code>str</code> with Unicode BiDi formatting characters: RLE<code>str</code>PDF for\nRTL text, and LRE<code>str</code>PDF for LTR text.</p>\n<p>If <code>opt_dirReset</code>, and if the overall directionality or the exit\ndirectionality of <code>str</code> are opposite to the context directionality, a\ntrailing unicode BiDi mark matching the context directionality is appended\n(LRM or RLM).</p>\n<p>Does <em>not</em> do HTML-escaping regardless of the value of <code>opt_isHtml</code>.\nThe return value can be HTML-escaped as necessary.</p>\n"}]}},"4":[{"1":"dir","2":{"6":{"1":[{"4":{"1":"goog.i18n.bidi.Dir","3":{"1":"goog.i18n.bidi.Dir.html"}}},{"10":true}]}},"3":{"1":[{"2":"<p><code>str</code>&#39;s overall directionality, or\nnull if unknown and needs to be estimated.</p>\n"}]}},{"1":"str","2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>The input text.</p>\n"}]}},{"1":"opt_isHtml","2":{"1":true,"6":{"1":[{"4":{"1":"boolean","4":true}},{"9":true}]}},"3":{"1":[{"2":"<p>Whether <code>str</code> is HTML / HTML-escaped.\nDefault: false.</p>\n"}]}},{"1":"opt_dirReset","2":{"1":true,"6":{"1":[{"4":{"1":"boolean","4":true}},{"9":true}]}},"3":{"1":[{"2":"<p>Whether to append a trailing unicode bidi mark\nmatching the context directionality, when needed, to prevent the possible\ngarbling of whatever may follow <code>str</code>. Default: true.</p>\n"}]}}],"5":{"2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>Input text after applying the above processing.</p>\n"}]}}}],"21":{"1":{"1":"goog.i18n.BidiFormatter","3":{"1":"goog.i18n.BidiFormatter.html"}},"2":4},"23":"goog.i18n.BidiFormatter.html","24":"goog.i18n.BidiFormatter"}]}}