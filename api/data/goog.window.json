{"2":{"1":[{"1":"goog.window","5":{"1":"closure/goog/window/window.js","2":20,"3":"https://github.com/google/closure-library/blob/master/closure/goog/window/window.js#L20"},"7":{},"8":{},"12":[{"1":{"1":"open","2":{"1":"closure/goog/window/window.js","2":97,"3":"https://github.com/google/closure-library/blob/master/closure/goog/window/window.js#L97"},"3":{"1":[{"2":"<p>Opens a new window.</p>\n"}]}},"4":[{"1":"linkRef","2":{"6":{"1":[{"4":{"1":"string","4":true}},{"4":{"1":"Object","4":true}},{"10":true}]}},"3":{"1":[{"2":"<p>If an Object with an &#39;href&#39;\nattribute (such as HTMLAnchorElement) is passed then the value of &#39;href&#39;\nis used, otherwise its toString method is called. Note that if a\nstring|Object is used, it will be sanitized with SafeUrl.sanitize().</p>\n"}]}},{"1":"opt_options","2":{"1":true,"6":{"1":[{"4":{"1":"Object","4":true}},{"10":true},{"9":true}]}},"3":{"1":[{"2":"<p>supports the following options:\n&#39;target&#39;: (string) target (window name). If null, linkRef.target will\nbe used.\n&#39;width&#39;: (number) window width.\n&#39;height&#39;: (number) window height.\n&#39;top&#39;: (number) distance from top of screen\n&#39;left&#39;: (number) distance from left of screen\n&#39;toolbar&#39;: (boolean) show toolbar\n&#39;scrollbars&#39;: (boolean) show scrollbars\n&#39;location&#39;: (boolean) show location\n&#39;statusbar&#39;: (boolean) show statusbar\n&#39;menubar&#39;: (boolean) show menubar\n&#39;resizable&#39;: (boolean) resizable\n&#39;noreferrer&#39;: (boolean) whether to attempt to remove the referrer header\nfrom the request headers. Does this by opening a blank window that\nthen redirects to the target url, so users may see some flickering.</p>\n"}]}},{"1":"opt_parentWin","2":{"1":true,"6":{"1":[{"4":{"1":"Window"}},{"10":true},{"9":true}]}},"3":{"1":[{"2":"<p>Parent window that should be used to open the\nnew window.</p>\n"}]}}],"5":{"2":{"6":{"1":[{"4":{"1":"Window"}},{"10":true}]}},"3":{"1":[{"2":"<p>Returns the window object that was opened. This returns\nnull if a popup blocker prevented the window from being\nopened. In case when a new window is opened in a different\nbrowser sandbox (such as iOS standalone mode), the returned\nobject is a emulated Window object that functions as if\na cross-origin window has been opened.</p>\n"}]}}},{"1":{"1":"openBlank","2":{"1":"closure/goog/window/window.js","2":258,"3":"https://github.com/google/closure-library/blob/master/closure/goog/window/window.js#L258"},"3":{"1":[{"2":"<p>Opens a new window without any real content in it.</p>\n<p>This can be used to get around popup blockers if you need to open a window\nin response to a user event, but need to do asynchronous work to determine\nthe URL to open, and then set the URL later.</p>\n<p>Example usage:</p>\n<p>var newWin &#61; goog.window.openBlank(&#39;Loading...&#39;);\nsetTimeout(\nfunction() {\nnewWin.location.href &#61; &#39;http://www.google.com&#39;;\n}, 100);</p>\n"}]}},"4":[{"1":"opt_message","2":{"1":true,"6":{"1":[{"4":{"1":"string","4":true}},{"9":true}]}},"3":{"1":[{"2":"<p>String to show in the new window. This string\nwill be HTML-escaped to avoid XSS issues.</p>\n"}]}},{"1":"opt_options","2":{"1":true,"6":{"1":[{"4":{"1":"Object","4":true}},{"10":true},{"9":true}]}},"3":{"1":[{"2":"<p>Options to open window with.\ngoog.window.open for exact option semantics.</p>\n"}]}},{"1":"opt_parentWin","2":{"1":true,"6":{"1":[{"4":{"1":"Window"}},{"10":true},{"9":true}]}},"3":{"1":[{"2":"<p>Parent window that should be used to open the\nnew window.</p>\n"}]}}],"5":{"2":{"6":{"1":[{"4":{"1":"Window"}},{"10":true}]}},"3":{"1":[{"2":"<p>Returns the window object that was opened. This returns\nnull if a popup blocker prevented the window from being\nopened.</p>\n"}]}}},{"1":{"1":"popup","2":{"1":"closure/goog/window/window.js","2":310,"3":"https://github.com/google/closure-library/blob/master/closure/goog/window/window.js#L310"},"3":{"1":[{"2":"<p>Raise a help popup window, defaulting to &#34;Google standard&#34; size and name.</p>\n<p>(If your project is using GXPs, consider using <code>PopUpLink.gxp</code>.)</p>\n"}]}},"4":[{"1":"linkRef","2":{"6":{"1":[{"4":{"1":"string","4":true}},{"4":{"1":"Object","4":true}},{"10":true}]}},"3":{"1":[{"2":"<p>If an Object with an &#39;href&#39;\nattribute (such as HTMLAnchorElement) is passed then the value of &#39;href&#39;\nis used, otherwise  otherwise its toString method is called. Note that\nif a string|Object is used, it will be sanitized with SafeUrl.sanitize().</p>\n"}]}},{"1":"opt_options","2":{"1":true,"6":{"1":[{"4":{"1":"Object","4":true}},{"10":true},{"9":true}]}},"3":{"1":[{"2":"<p>Options to open window with.\ngoog.window.open for exact option semantics\nAdditional wrinkles to the options:\n- if &#39;target&#39; field is null, linkRef.target will be used. If <em>that&#39;s</em>\nnull, the default is &#34;google_popup&#34;.\n- if &#39;width&#39; field is not specified, the default is 690.\n- if &#39;height&#39; field is not specified, the default is 500.</p>\n"}]}}],"5":{"2":{"4":{"1":"boolean","4":true}},"3":{"1":[{"2":"<p>true if the window was not popped up, false if it was.</p>\n"}]}}}],"13":[{"1":{"1":"DEFAULT_POPUP_HEIGHT","2":{"1":"closure/goog/window/window.js","2":36,"3":"https://github.com/google/closure-library/blob/master/closure/goog/window/window.js#L36"},"3":{"1":[{"2":"<p>Default height for popup windows</p>\n"}]}},"2":{"4":{"1":"number","4":true}}},{"1":{"1":"DEFAULT_POPUP_TARGET","2":{"1":"closure/goog/window/window.js","2":50,"3":"https://github.com/google/closure-library/blob/master/closure/goog/window/window.js#L50"},"3":{"1":[{"2":"<p>Default target for popup windows</p>\n"}]}},"2":{"4":{"1":"string","4":true}}},{"1":{"1":"DEFAULT_POPUP_WIDTH","2":{"1":"closure/goog/window/window.js","2":43,"3":"https://github.com/google/closure-library/blob/master/closure/goog/window/window.js#L43"},"3":{"1":[{"2":"<p>Default width for popup windows</p>\n"}]}},"2":{"4":{"1":"number","4":true}}}],"21":{"1":{"1":"goog.window","3":{"1":"goog.window.html"}},"2":4},"23":"goog.window.html","24":"goog.window"}]}}