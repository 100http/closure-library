{"2":{"1":[{"1":"goog.html.SafeUrl","5":{"1":"closure/goog/html/safeurl.js","2":72,"3":"https://github.com/google/closure-library/blob/master/closure/goog/html/safeurl.js#L72"},"7":{"1":[{"2":"<p>A string that is safe to use in URL context in DOM APIs and HTML documents.</p>\n<p>A SafeUrl is a string-like object that carries the security type contract\nthat its value as a string will not cause untrusted script execution\nwhen evaluated as a hyperlink URL in a browser.</p>\n<p>Values of this type are guaranteed to be safe to use in URL/hyperlink\ncontexts, such as assignment to URL-valued DOM properties, in the sense that\nthe use will not result in a Cross-Site-Scripting vulnerability. Similarly,\nSafeUrls can be interpolated into the URL context of an HTML template (e.g.,\ninside a href attribute). However, appropriate HTML-escaping must still be\napplied.</p>\n<p>Note that, as documented in <code>goog.html.SafeUrl.unwrap</code>, this type&#39;s\ncontract does not guarantee that instances are safe to interpolate into HTML\nwithout appropriate escaping.</p>\n<p>Note also that this type&#39;s contract does not imply any guarantees regarding\nthe resource the URL refers to.  In particular, SafeUrls are <b>not</b>\nsafe to use in a context where the referred-to resource is interpreted as\ntrusted code, e.g., as the src of a script tag.</p>\n<p>Instances of this type must be created via the factory methods\n(<code>goog.html.SafeUrl.fromConstant</code>, <code>goog.html.SafeUrl.sanitize</code>),\netc and not by invoking its constructor.  The constructor intentionally\ntakes no parameters and the type is immutable; hence only a default instance\ncorresponding to the empty string can be obtained via constructor invocation.</p>\n"}]},"8":{"4":true,"7":true},"12":[{"1":{"1":"SafeUrl.createSafeUrlSecurityPrivateDoNotAccessOrElse","2":{"1":"closure/goog/html/safeurl.js","2":437,"3":"https://github.com/google/closure-library/blob/master/closure/goog/html/safeurl.js#L437"},"3":{"1":[{"2":"<p>Package-internal utility method to create SafeUrl instances.</p>\n"}]},"5":3},"4":[{"1":"url","2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>The string to initialize the SafeUrl object with.</p>\n"}]}}],"5":{"2":{"4":{"1":"goog.html.SafeUrl","3":{"1":"goog.html.SafeUrl.html"}}},"3":{"1":[{"2":"<p>The initialized SafeUrl object.</p>\n"}]}}},{"1":{"1":"SafeUrl.fromBlob","2":{"1":"closure/goog/html/safeurl.js","2":267,"3":"https://github.com/google/closure-library/blob/master/closure/goog/html/safeurl.js#L267"},"3":{"1":[{"2":"<p>Creates a SafeUrl wrapping a blob URL for the given <code>blob</code>.</p>\n<p>The blob URL is created with <code>URL.createObjectURL</code>. If the MIME type\nfor <code>blob</code> is not of a known safe image or video MIME type, then the\nSafeUrl will wrap <a href=\"goog.html.SafeUrl.html#SafeUrl.INNOCUOUS_STRING\"><code>#INNOCUOUS_STRING</code></a>.</p>\n"}]},"10":[{"1":[{"2":"<p><a href=\"http://www.w3.org/TR/FileAPI/#url\">http://www.w3.org/TR/FileAPI/#url</a></p>\n"}]}]},"4":[{"1":"blob","2":{"4":{"1":"Blob"}}}],"5":{"2":{"4":{"1":"goog.html.SafeUrl","3":{"1":"goog.html.SafeUrl.html"}}},"3":{"1":[{"2":"<p>The blob URL, or an innocuous string wrapped\nas a SafeUrl.</p>\n"}]}}},{"1":{"1":"SafeUrl.fromConstant","2":{"1":"closure/goog/html/safeurl.js","2":238,"3":"https://github.com/google/closure-library/blob/master/closure/goog/html/safeurl.js#L238"},"3":{"1":[{"2":"<p>Creates a SafeUrl object from a compile-time constant string.</p>\n<p>Compile-time constant strings are inherently program-controlled and hence\ntrusted.</p>\n"}]}},"4":[{"1":"url","2":{"4":{"1":"goog.string.Const","3":{"1":"goog.string.Const.html"}}},"3":{"1":[{"2":"<p>A compile-time-constant string from which to\ncreate a SafeUrl.</p>\n"}]}}],"5":{"2":{"4":{"1":"goog.html.SafeUrl","3":{"1":"goog.html.SafeUrl.html"}}},"3":{"1":[{"2":"<p>A SafeUrl object initialized to <code>url</code>.</p>\n"}]}}},{"1":{"1":"SafeUrl.fromDataUrl","2":{"1":"closure/goog/html/safeurl.js","2":292,"3":"https://github.com/google/closure-library/blob/master/closure/goog/html/safeurl.js#L292"},"3":{"1":[{"2":"<p>Creates a SafeUrl wrapping a data: URL, after validating it matches a\nknown-safe image or video MIME type.</p>\n"}]}},"4":[{"1":"dataUrl","2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>A valid base64 data URL with one of the whitelisted\nimage or video MIME types.</p>\n"}]}}],"5":{"2":{"4":{"1":"goog.html.SafeUrl","3":{"1":"goog.html.SafeUrl.html"}}},"3":{"1":[{"2":"<p>A matching safe URL, or <code>INNOCUOUS_STRING</code>\nwrapped as a SafeUrl if it does not pass.</p>\n"}]}}},{"1":{"1":"SafeUrl.fromTelUrl","2":{"1":"closure/goog/html/safeurl.js","2":312,"3":"https://github.com/google/closure-library/blob/master/closure/goog/html/safeurl.js#L312"},"3":{"1":[{"2":"<p>Creates a SafeUrl wrapping a tel: URL.</p>\n"}]}},"4":[{"1":"telUrl","2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>A tel URL.</p>\n"}]}}],"5":{"2":{"4":{"1":"goog.html.SafeUrl","3":{"1":"goog.html.SafeUrl.html"}}},"3":{"1":[{"2":"<p>A matching safe URL, or <code>INNOCUOUS_STRING</code>\nwrapped as a SafeUrl if it does not pass.</p>\n"}]}}},{"1":{"1":"SafeUrl.fromTrustedResourceUrl","2":{"1":"closure/goog/html/safeurl.js","2":331,"3":"https://github.com/google/closure-library/blob/master/closure/goog/html/safeurl.js#L331"},"3":{"1":[{"2":"<p>Creates a SafeUrl from TrustedResourceUrl. This is safe because\nTrustedResourceUrl is more tightly restricted than SafeUrl.</p>\n"}]}},"4":[{"1":"trustedResourceUrl","2":{"4":{"1":"goog.html.TrustedResourceUrl","3":{"1":"goog.html.TrustedResourceUrl.html"}}}}],"5":{"2":{"4":{"1":"goog.html.SafeUrl","3":{"1":"goog.html.SafeUrl.html"}}}}},{"1":{"1":"SafeUrl.sanitize","2":{"1":"closure/goog/html/safeurl.js","2":374,"3":"https://github.com/google/closure-library/blob/master/closure/goog/html/safeurl.js#L374"},"3":{"1":[{"2":"<p>Creates a SafeUrl object from <code>url</code>. If <code>url</code> is a\ngoog.html.SafeUrl then it is simply returned. Otherwise the input string is\nvalidated to match a pattern of commonly used safe URLs.</p>\n<p><code>url</code> may be a URL with the http, https, mailto or ftp scheme,\nor a relative URL (i.e., a URL without a scheme; specifically, a\nscheme-relative, absolute-path-relative, or path-relative URL).</p>\n"}]},"10":[{"1":[{"2":"<p><a href=\"http://url.spec.whatwg.org/#concept-relative-url\">http://url.spec.whatwg.org/#concept-relative-url</a></p>\n"}]}]},"4":[{"1":"url","2":{"6":{"1":[{"4":{"1":"string","4":true}},{"4":{"1":"goog.string.TypedString","3":{"1":"goog.string.TypedString.html"}}}]}},"3":{"1":[{"2":"<p>The URL to validate.</p>\n"}]}}],"5":{"2":{"4":{"1":"goog.html.SafeUrl","3":{"1":"goog.html.SafeUrl.html"}}},"3":{"1":[{"2":"<p>The validated URL, wrapped as a SafeUrl.</p>\n"}]}}},{"1":{"1":"SafeUrl.sanitizeAssertUnchanged","2":{"1":"closure/goog/html/safeurl.js","2":405,"3":"https://github.com/google/closure-library/blob/master/closure/goog/html/safeurl.js#L405"},"3":{"1":[{"2":"<p>Creates a SafeUrl object from <code>url</code>. If <code>url</code> is a\ngoog.html.SafeUrl then it is simply returned. Otherwise the input string is\nvalidated to match a pattern of commonly used safe URLs.</p>\n<p><code>url</code> may be a URL with the http, https, mailto or ftp scheme,\nor a relative URL (i.e., a URL without a scheme; specifically, a\nscheme-relative, absolute-path-relative, or path-relative URL).</p>\n<p>This function asserts (using goog.asserts) that the URL matches this pattern.\nIf it does not, in addition to failing the assert, an innocous URL will be\nreturned.</p>\n"}]},"10":[{"1":[{"2":"<p><a href=\"http://url.spec.whatwg.org/#concept-relative-url\">http://url.spec.whatwg.org/#concept-relative-url</a></p>\n"}]}]},"4":[{"1":"url","2":{"6":{"1":[{"4":{"1":"string","4":true}},{"4":{"1":"goog.string.TypedString","3":{"1":"goog.string.TypedString.html"}}}]}},"3":{"1":[{"2":"<p>The URL to validate.</p>\n"}]}}],"5":{"2":{"4":{"1":"goog.html.SafeUrl","3":{"1":"goog.html.SafeUrl.html"}}},"3":{"1":[{"2":"<p>The validated URL, wrapped as a SafeUrl.</p>\n"}]}}},{"1":{"1":"SafeUrl.unwrap","2":{"1":"closure/goog/html/safeurl.js","2":205,"3":"https://github.com/google/closure-library/blob/master/closure/goog/html/safeurl.js#L205"},"3":{"1":[{"2":"<p>Performs a runtime check that the provided object is indeed a SafeUrl\nobject, and returns its value.</p>\n<p>IMPORTANT: The guarantees of the SafeUrl type contract only extend to the\nbehavior of  browsers when interpreting URLs. Values of SafeUrl objects MUST\nbe appropriately escaped before embedding in a HTML document. Note that the\nrequired escaping is context-sensitive (e.g. a different escaping is\nrequired for embedding a URL in a style property within a style\nattribute, as opposed to embedding in a href attribute).</p>\n"}]}},"4":[{"1":"safeUrl","2":{"4":{"1":"goog.html.SafeUrl","3":{"1":"goog.html.SafeUrl.html"}}},"3":{"1":[{"2":"<p>The object to extract from.</p>\n"}]}}],"5":{"2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>The SafeUrl object&#39;s contained string, unless the run-time\ntype check fails. In that case, <code>unwrap</code> returns an innocuous\nstring, or, if assertions are enabled, throws\n<code>goog.asserts.AssertionError</code>.</p>\n"}]}}}],"13":[{"1":{"1":"SafeUrl.ABOUT_BLANK","2":{"1":"closure/goog/html/safeurl.js","2":449,"3":"https://github.com/google/closure-library/blob/master/closure/goog/html/safeurl.js#L449"},"3":{"1":[{"2":"<p>A SafeUrl corresponding to the special about:blank url.</p>\n"}]},"6":{"1":true}},"2":{"4":{"1":"goog.html.SafeUrl","3":{"1":"goog.html.SafeUrl.html"}}}},{"1":{"1":"SafeUrl.INNOCUOUS_STRING","2":{"1":"closure/goog/html/safeurl.js","2":112,"3":"https://github.com/google/closure-library/blob/master/closure/goog/html/safeurl.js#L112"},"3":{"1":[{"2":"<p>The innocuous string generated by goog.html.SafeUrl.sanitize when passed\nan unsafe URL.</p>\n<p>about:invalid is registered in\nhttp://www.w3.org/TR/css3-values/#about-invalid.\nhttp://tools.ietf.org/html/rfc6694#section-2.2.1 permits about URLs to\ncontain a fragment, which is not to be considered when determining if an\nabout URL is well-known.</p>\n<p>Using about:invalid seems preferable to using a fixed data URL, since\nbrowsers might choose to not report CSP violations on it, as legitimate\nCSS function calls to attr() can result in this URL being produced. It is\nalso a standard URL which matches exactly the semantics we need:\n&#34;The about:invalid URI references a non-existent document with a generic\nerror condition. It can be used when a URI is necessary, but the default\nvalue shouldn&#39;t be resolveable as any type of document&#34;.</p>\n"}]},"6":{"1":true}},"2":{"4":{"1":"string","4":true}}}],"14":{"1":{"1":"SafeUrl","2":{"1":"closure/goog/html/safeurl.js","2":72,"3":"https://github.com/google/closure-library/blob/master/closure/goog/html/safeurl.js#L72"},"3":{"1":[{"2":"<p>A string that is safe to use in URL context in DOM APIs and HTML documents.</p>\n<p>A SafeUrl is a string-like object that carries the security type contract\nthat its value as a string will not cause untrusted script execution\nwhen evaluated as a hyperlink URL in a browser.</p>\n<p>Values of this type are guaranteed to be safe to use in URL/hyperlink\ncontexts, such as assignment to URL-valued DOM properties, in the sense that\nthe use will not result in a Cross-Site-Scripting vulnerability. Similarly,\nSafeUrls can be interpolated into the URL context of an HTML template (e.g.,\ninside a href attribute). However, appropriate HTML-escaping must still be\napplied.</p>\n<p>Note that, as documented in <code>goog.html.SafeUrl.unwrap</code>, this type&#39;s\ncontract does not guarantee that instances are safe to interpolate into HTML\nwithout appropriate escaping.</p>\n<p>Note also that this type&#39;s contract does not imply any guarantees regarding\nthe resource the URL refers to.  In particular, SafeUrls are <b>not</b>\nsafe to use in a context where the referred-to resource is interpreted as\ntrusted code, e.g., as the src of a script tag.</p>\n<p>Instances of this type must be created via the factory methods\n(<code>goog.html.SafeUrl.fromConstant</code>, <code>goog.html.SafeUrl.sanitize</code>),\netc and not by invoking its constructor.  The constructor intentionally\ntakes no parameters and the type is immutable; hence only a default instance\ncorresponding to the empty string can be obtained via constructor invocation.</p>\n"}]},"10":[{"1":[{"1":"goog.html.SafeUrl#fromConstant","3":{"1":"goog.html.SafeUrl.html#SafeUrl.fromConstant"}}]},{"1":[{"1":"goog.html.SafeUrl#from","3":{"1":"goog.html.SafeUrl.html"}}]},{"1":[{"1":"goog.html.SafeUrl#sanitize","3":{"1":"goog.html.SafeUrl.html#SafeUrl.sanitize"}}]}]},"3":true},"15":[{"1":{"1":"getDirection","2":{"1":"closure/goog/html/safeurl.js","2":166,"3":"https://github.com/google/closure-library/blob/master/closure/goog/html/safeurl.js#L166"},"3":{"1":[{"2":"<p>Returns this URLs directionality, which is always <code>LTR</code>.</p>\n"}]},"9":[{"1":"goog.i18n.bidi.DirectionalString","3":{"1":"goog.i18n.bidi.DirectionalString.html#getDirection"}}]},"5":{"2":{"6":{"1":[{"4":{"1":"goog.i18n.bidi.Dir","3":{"1":"goog.i18n.bidi.Dir.html"}}},{"10":true}]}},"3":{"1":[{"2":"<p>The known direction. Null if unknown.</p>\n"}]}}},{"1":{"1":"getTypedStringValue","2":{"1":"closure/goog/html/safeurl.js","2":150,"3":"https://github.com/google/closure-library/blob/master/closure/goog/html/safeurl.js#L150"},"3":{"1":[{"2":"<p>Returns this SafeUrl&#39;s value a string.</p>\n<p>IMPORTANT: In code where it is security relevant that an object&#39;s type is\nindeed <code>SafeUrl</code>, use <code>goog.html.SafeUrl.unwrap</code> instead of this\nmethod. If in doubt, assume that it&#39;s security relevant. In particular, note\nthat goog.html functions which return a goog.html type do not guarantee that\nthe returned instance is of the right type. For example:</p>\n <pre>\n var fakeSafeHtml &#61; new String(&#39;fake&#39;);\n fakeSafeHtml.__proto__ &#61; goog.html.SafeHtml.prototype;\n var newSafeHtml &#61; goog.html.SafeHtml.htmlEscape(fakeSafeHtml);\n // newSafeHtml is just an alias for fakeSafeHtml, it&#39;s passed through by\n // goog.html.SafeHtml.htmlEscape() as fakeSafeHtml instanceof\n // goog.html.SafeHtml.\n </pre>\n<p>IMPORTANT: The guarantees of the SafeUrl type contract only extend to the\nbehavior of browsers when interpreting URLs. Values of SafeUrl objects MUST\nbe appropriately escaped before embedding in a HTML document. Note that the\nrequired escaping is context-sensitive (e.g. a different escaping is\nrequired for embedding a URL in a style property within a style\nattribute, as opposed to embedding in a href attribute).</p>\n"}]},"9":[{"1":"goog.string.TypedString","3":{"1":"goog.string.TypedString.html#getTypedStringValue"}}],"10":[{"1":[{"1":"goog.html.SafeUrl#unwrap","3":{"1":"goog.html.SafeUrl.html#SafeUrl.unwrap"}}]}]},"5":{"2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>The wrapped string&#39;s value.</p>\n"}]}}},{"1":{"1":"toString","2":{"1":"closure/goog/html/safeurl.js","2":181,"3":"https://github.com/google/closure-library/blob/master/closure/goog/html/safeurl.js#L181"},"3":{"1":[{"2":"<p>Returns a debug string-representation of this value.</p>\n<p>To obtain the actual string value wrapped in a SafeUrl, use\n<code>goog.html.SafeUrl.unwrap</code>.</p>\n"}]},"10":[{"1":[{"1":"goog.html.SafeUrl#unwrap","3":{"1":"goog.html.SafeUrl.html#SafeUrl.unwrap"}}]}]},"5":{"2":{"4":{"1":"string","4":true}}}}],"16":[{"1":{"1":"implementsGoogI18nBidiDirectionalString","2":{"1":"closure/goog/html/safeurl.js","2":159,"3":"https://github.com/google/closure-library/blob/master/closure/goog/html/safeurl.js#L159"},"3":{"1":[{"2":"<p>Interface marker of the DirectionalString interface.</p>\n<p>This property can be used to determine at runtime whether or not an object\nimplements this interface.  All implementations of this interface set this\nproperty to <code>true</code>.</p>\n"}]},"6":{"1":true},"9":[{"1":"goog.i18n.bidi.DirectionalString","3":{"1":"goog.i18n.bidi.DirectionalString.html#implementsGoogI18nBidiDirectionalString"}}]},"2":{"4":{"1":"boolean","4":true}}},{"1":{"1":"implementsGoogStringTypedString","2":{"1":"closure/goog/html/safeurl.js","2":119,"3":"https://github.com/google/closure-library/blob/master/closure/goog/html/safeurl.js#L119"},"3":{"1":[{"2":"<p>Interface marker of the TypedString interface.</p>\n<p>This property can be used to determine at runtime whether or not an object\nimplements this interface.  All implementations of this interface set this\nproperty to <code>true</code>.</p>\n"}]},"6":{"1":true},"9":[{"1":"goog.string.TypedString","3":{"1":"goog.string.TypedString.html#implementsGoogStringTypedString"}}]},"2":{"4":{"1":"boolean","4":true}}}],"19":[{"1":"goog.i18n.bidi.DirectionalString","3":{"1":"goog.i18n.bidi.DirectionalString.html"}},{"1":"goog.string.TypedString","3":{"1":"goog.string.TypedString.html"}}],"21":{"1":{"1":"goog.html.SafeUrl","3":{"1":"goog.html.SafeUrl.html"}},"2":4},"23":"goog.html.SafeUrl.html","24":"goog.html.SafeUrl"}]}}