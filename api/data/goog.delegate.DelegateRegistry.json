[null,[[["goog.delegate.DelegateRegistry",null,null,null,[null,281,null,[null,null,"closure/goog/delegate/delegateregistry.js"],[null,null,"https://github.com/google/closure-library/blob/master/closure/goog/delegate/delegateregistry.js#L281"]],[[["Prioritized",null,[[[null,"<p>A delegate registry that allows multiple delegates, which must each have a\nnumeric priority specified when they are registered.</p>\n"]]],null,[null,null,"goog.delegate.DelegateRegistry.Prioritized.html"]]],[],[]],[[[null,"<p>Delegates provide a system for hygienic modification of a delegating class&#39;s\nbehavior.  The basic idea is that, rather than monkey-patching prototype\nmethods, a class can instead provide extension points by calling out to\ndelegates.  Later code can then register delegates, and when the delegating\nclass is instantiated, any registered delegates will be instantiated and\nreturned.</p>\n<p>The usage has four parts:</p>\n<ul><li>A <em>delegate interface</em> is defined to provide specific overridable hooks.\nThis can be a simple function <code>&#64;typedef</code>, or an entire <code>&#64;interface</code> or\n<code>&#64;record</code>.</li><li>A <em>delegate registry</em> for this interface is instantiated, often as a\nstatic field on the interface.</li><li>One or more <em>delegates</em> are defined that implement this interface.\nDelegates are registered with the registry.  Different registry classes\nsupport different policies for registering more than one delegate.</li><li>After delegates are registered, the delegating class asks the registry for\nthe <em>list of delegates</em>, which are then instantiated if necessary.</li></ul>\n<p>In some circumstances (particularly if a delegate method will be called from\nmultiple places) it may make sense to provide an additional wrapper between\nthe delegate list and the delegating (sometimes called &#34;modded&#34;) class, to\nensure that the delegates are used correctly.</p>\n<h2>Example usage</h2>\n<p>For example, consider a class <code>Foo</code> that wants to provide a few extension\npoints for the behaviors <code>zorch</code> and <code>snarf</code>.  We can set up the delegation\nas follows</p>\n<p><code></code></p><code><pre>\nconst DelegateRegistry &#61; goog.require(&#39;goog.delegate.DelegateRegistry&#39;);\nconst delegates &#61; goog.require(&#39;goog.delegate.delegates&#39;);\nclass Foo {\nconstructor() {\n/** &#64;private &#64;const {!Array&lt;!Foo.Delegate&gt;} */\nthis.delegates_ &#61; Foo.Delegate.REGISTRY.delegates();\n}\nfrobnicate(x, y, z) {\nconst w &#61; delegates.callFirst(this.delegates_, d &#61;&gt; d.zorch(x, y));\nreturn this.delegates_.map(d &#61;&gt; d.snarf(z, w));\n}\n}\n/** &#64;interface */\nFoo.Delegate &#61; class {\nzorch(a, b) {}\nsnarf(a, b) {}\n}\n/** &#64;const {!DelegateRegistry&lt;!Foo.Delegate&gt;} */\nFoo.registry &#61; new DelegateRegstry();\n</pre></code>\n<p>A file inserted later in the bundle can define a delegate and register itself\nwith the registry:</p>\n<p><code></code></p><code><pre>\n/** &#64;implements {Foo.Delegate} */\nclass WibblyFooDelegate {\nzorch(a, b) { return a &#43; b; }\nsnarf(a, b) { return a - b; }\n}\nFoo.registry.registerClass(WibbyFooDelegate);\n</pre></code>\n<p>In many cases, the delegates need to be initialized with an instance of the\nmodded class.  To support this, a function may be passed to the <code>delegates()</code>\nmethod to override how the constructor is called.</p>\n<h2>Multiple Delegates</h2>\n<p>Several different registry classes are defined, each with a different policy\nfor how to handle multiple delegates.  The most simple, <code>DelegateRegistry</code>,\nallows multiple delegates to be registered and returns them in the order they\nare registered.  If only one delegate is expected,\n<code>DelegateRegistry.prototype.expectAtMostOneDelegate()</code> performs assertions\n(in debug mode) that at most one delegate is added, though in production\nmode it will still register them all - The use of <code>delegate()</code> or\n<code>goog.delegate.delegates.callFirst()</code> is recommended in this case to ensure\nreasonable behavior.</p>\n<p>Finally, <code>DelegateRegistry.Prioritized</code> requires passing a\nunique priority to each delegate registration (collisions are asserted in\ndebug mode, but will fall back on registration order in production).</p>\n<h2>Wrapped Delegator</h2>\n<p>In some cases it makes sense to wrap the delegate list in a dedicated\ndelegator object, rather than having the modded class use it directly:</p>\n<p><code></code></p><code><pre>\n/** &#64;record */\nclass MyDelegateInterface {\n/** &#64;param {number} arg */\nfoo(arg) {}\n/** &#64;return {number|undefined} */\nbar() {}\n/** &#64;return {string} */\nbaz() {}\n/\nclass MyDelegator {\n/** &#64;param {!Array&lt;!MyDelegateInterface&gt;} delegates */\nconstructor(delegates) { this.delegates_ &#61; delegates; }\n/** &#64;param {number} */\nfoo(arg) { this.delegates_.forEach(d &#61;&gt; d.foo(arg)); }\n/** &#64;return {number} */\nbar() {\nconst result &#61;\ndelegates.callUntilNotNullOrUndefined(this.delegates_, d &#61;&gt; d.bar());\nreturn result !&#61; null ? result : 42;\n}\n/** &#64;return {!Array} */\nbaz() { return this.delegates_.map(d &#61;&gt; d.baz()); }\n}\n</pre></code>\n<p>In this example, the modded class will call into the delegates via the\nwrapper class, ensuring that the correct calling convention is always used.</p>\n"]]],[null,null,null,null,null,1],null,[],null,[],[[["superClass_",[null,282,null,[null,null,"closure/goog/delegate/delegateregistry.js"],[null,null,"https://github.com/google/closure-library/blob/master/closure/goog/delegate/delegateregistry.js#L282"]],[[]],null,null,null,null,null,[],[]],[null,null,null,["module$contents$goog$delegate$DelegateRegistry_DelegateRegistryBase",null,null,null,[]]]]],[["DelegateRegistry",[null,281,null,[null,null,"closure/goog/delegate/delegateregistry.js"],[null,null,"https://github.com/google/closure-library/blob/master/closure/goog/delegate/delegateregistry.js#L281"]],[[[null,"<p>Delegates provide a system for hygienic modification of a delegating class&#39;s\nbehavior.  The basic idea is that, rather than monkey-patching prototype\nmethods, a class can instead provide extension points by calling out to\ndelegates.  Later code can then register delegates, and when the delegating\nclass is instantiated, any registered delegates will be instantiated and\nreturned.</p>\n<p>The usage has four parts:</p>\n<ul><li>A <em>delegate interface</em> is defined to provide specific overridable hooks.\nThis can be a simple function <code>&#64;typedef</code>, or an entire <code>&#64;interface</code> or\n<code>&#64;record</code>.</li><li>A <em>delegate registry</em> for this interface is instantiated, often as a\nstatic field on the interface.</li><li>One or more <em>delegates</em> are defined that implement this interface.\nDelegates are registered with the registry.  Different registry classes\nsupport different policies for registering more than one delegate.</li><li>After delegates are registered, the delegating class asks the registry for\nthe <em>list of delegates</em>, which are then instantiated if necessary.</li></ul>\n<p>In some circumstances (particularly if a delegate method will be called from\nmultiple places) it may make sense to provide an additional wrapper between\nthe delegate list and the delegating (sometimes called &#34;modded&#34;) class, to\nensure that the delegates are used correctly.</p>\n<h2>Example usage</h2>\n<p>For example, consider a class <code>Foo</code> that wants to provide a few extension\npoints for the behaviors <code>zorch</code> and <code>snarf</code>.  We can set up the delegation\nas follows</p>\n<p><code></code></p><code><pre>\nconst DelegateRegistry &#61; goog.require(&#39;goog.delegate.DelegateRegistry&#39;);\nconst delegates &#61; goog.require(&#39;goog.delegate.delegates&#39;);\nclass Foo {\nconstructor() {\n/** &#64;private &#64;const {!Array&lt;!Foo.Delegate&gt;} */\nthis.delegates_ &#61; Foo.Delegate.REGISTRY.delegates();\n}\nfrobnicate(x, y, z) {\nconst w &#61; delegates.callFirst(this.delegates_, d &#61;&gt; d.zorch(x, y));\nreturn this.delegates_.map(d &#61;&gt; d.snarf(z, w));\n}\n}\n/** &#64;interface */\nFoo.Delegate &#61; class {\nzorch(a, b) {}\nsnarf(a, b) {}\n}\n/** &#64;const {!DelegateRegistry&lt;!Foo.Delegate&gt;} */\nFoo.registry &#61; new DelegateRegstry();\n</pre></code>\n<p>A file inserted later in the bundle can define a delegate and register itself\nwith the registry:</p>\n<p><code></code></p><code><pre>\n/** &#64;implements {Foo.Delegate} */\nclass WibblyFooDelegate {\nzorch(a, b) { return a &#43; b; }\nsnarf(a, b) { return a - b; }\n}\nFoo.registry.registerClass(WibbyFooDelegate);\n</pre></code>\n<p>In many cases, the delegates need to be initialized with an instance of the\nmodded class.  To support this, a function may be passed to the <code>delegates()</code>\nmethod to override how the constructor is called.</p>\n<h2>Multiple Delegates</h2>\n<p>Several different registry classes are defined, each with a different policy\nfor how to handle multiple delegates.  The most simple, <code>DelegateRegistry</code>,\nallows multiple delegates to be registered and returns them in the order they\nare registered.  If only one delegate is expected,\n<code>DelegateRegistry.prototype.expectAtMostOneDelegate()</code> performs assertions\n(in debug mode) that at most one delegate is added, though in production\nmode it will still register them all - The use of <code>delegate()</code> or\n<code>goog.delegate.delegates.callFirst()</code> is recommended in this case to ensure\nreasonable behavior.</p>\n<p>Finally, <code>DelegateRegistry.Prioritized</code> requires passing a\nunique priority to each delegate registration (collisions are asserted in\ndebug mode, but will fall back on registration order in production).</p>\n<h2>Wrapped Delegator</h2>\n<p>In some cases it makes sense to wrap the delegate list in a dedicated\ndelegator object, rather than having the modded class use it directly:</p>\n<p><code></code></p><code><pre>\n/** &#64;record */\nclass MyDelegateInterface {\n/** &#64;param {number} arg */\nfoo(arg) {}\n/** &#64;return {number|undefined} */\nbar() {}\n/** &#64;return {string} */\nbaz() {}\n/\nclass MyDelegator {\n/** &#64;param {!Array&lt;!MyDelegateInterface&gt;} delegates */\nconstructor(delegates) { this.delegates_ &#61; delegates; }\n/** &#64;param {number} */\nfoo(arg) { this.delegates_.forEach(d &#61;&gt; d.foo(arg)); }\n/** &#64;return {number} */\nbar() {\nconst result &#61;\ndelegates.callUntilNotNullOrUndefined(this.delegates_, d &#61;&gt; d.bar());\nreturn result !&#61; null ? result : 42;\n}\n/** &#64;return {!Array} */\nbaz() { return this.delegates_.map(d &#61;&gt; d.baz()); }\n}\n</pre></code>\n<p>In this example, the modded class will call into the delegates via the\nwrapper class, ensuring that the correct calling convention is always used.</p>\n"]]],null,null,[null,null,null,null,null,1],null,null,[],[]],["T"],1,[],null,[]],[[["allowLateRegistration",[null,75,null,[null,null,"closure/goog/delegate/delegateregistry.js"],[null,null,"https://github.com/google/closure-library/blob/master/closure/goog/delegate/delegateregistry.js#L75"]],[[[null,"<p>Configures this registry to allow late registration.  Normally it is an\nerror to register a delegate after calling <code>delegate()</code> or <code>delegates()</code>.\nIf late registration is allowed, then this is no longer an error.  This\ncheck only ever happens in debug mode.  Returns this.</p>\n"]]],null,null,null,["module$contents$goog$delegate$DelegateRegistry_DelegateRegistryBase",null,null,null,[]],null,[],[]],["THIS"],null,[],[null,[null,null,null,["THIS",null,null,null,[]]]],[]],[["cacheInstantiation",[null,90,null,[null,null,"closure/goog/delegate/delegateregistry.js"],[null,null,"https://github.com/google/closure-library/blob/master/closure/goog/delegate/delegateregistry.js#L90"]],[[[null,"<p>Configures this registry to automatically cache instantiated instances,\nrather than calling the constructor every time <code>delegates()</code> is called.\nReturns this.</p>\n"]]],null,null,null,["module$contents$goog$delegate$DelegateRegistry_DelegateRegistryBase",null,null,null,[]],null,[],[]],["THIS"],null,[],[null,[null,null,null,["THIS",null,null,null,[]]]],[]],[["delegate",[null,103,null,[null,null,"closure/goog/delegate/delegateregistry.js"],[null,null,"https://github.com/google/closure-library/blob/master/closure/goog/delegate/delegateregistry.js#L103"]],[[[null,"<p>Returns the first (highest priority) registered delegate, or undefined\nif none was registered.</p>\n"]]],null,null,null,["module$contents$goog$delegate$DelegateRegistry_DelegateRegistryBase",null,null,null,[]],null,[],[]],[],null,[["instantiate",[1,null,null,null,null,[[[null,null,[null,null,[[null,null,[1,[null,null,null,null,null,[[[null,null,null,["T",null,null,null,[]]],[null,null,null,null,null,null,null,null,null,1]]]],[]]]],[null,null,null,null,null,[[[null,null,null,["T",null,null,null,[]]],[null,null,null,null,null,null,null,null,null,1]]]]]],[null,null,null,null,null,null,null,null,1]]]],[[[null,"<p>A function to\ninstantiated constructors registered with <code>registerClass</code>.  By default,\nthis just calls the constructor with no arguments.</p>\n"]]]]],null,[]],[["delegates",[null,122,null,[null,null,"closure/goog/delegate/delegateregistry.js"],[null,null,"https://github.com/google/closure-library/blob/master/closure/goog/delegate/delegateregistry.js#L122"]],[[[null,"<p>Returns an array of all registered delegates, creating a fresh instance\nof any registered classes.  The <code>instantiate</code> argument can be passed to\noverride how constructors are called.  The array will be frozen in debug\nmode.</p>\n"]]],null,null,null,["module$contents$goog$delegate$DelegateRegistry_DelegateRegistryBase",null,null,null,[]],null,[],[]],[],null,[["instantiate",[1,null,null,null,null,[[[null,null,[null,null,[[null,null,[1,[null,null,null,null,null,[[[null,null,null,["T",null,null,null,[]]],[null,null,null,null,null,null,null,null,null,1]]]],[]]]],[null,null,null,null,null,[[[null,null,null,["T",null,null,null,[]]],[null,null,null,null,null,null,null,null,null,1]]]]]],[null,null,null,null,null,null,null,null,1]]]],[[[null,"<p>A function to\ninstantiated constructors registered with <code>registerClass</code>.  By default,\nthis just calls the constructor with no arguments.</p>\n"]]]]],[null,[null,null,null,["Array",null,null,1,[[null,null,null,null,null,[[[null,null,null,["T",null,null,null,[]]],[null,null,null,null,null,null,null,null,null,1]]]]]]]],[]],[["expectAtMostOneDelegate",[null,293,null,[null,null,"closure/goog/delegate/delegateregistry.js"],[null,null,"https://github.com/google/closure-library/blob/master/closure/goog/delegate/delegateregistry.js#L293"]],[[[null,"<p>Configures this registry to accept at most one delegate.\nThis only affects debug mode.</p>\n"]]],null,null,null,null,["goog.delegate.DelegateRegistry",null,[null,null,[null,null,"goog.delegate.DelegateRegistry.html#expectAtMostOneDelegate"]],null,[]],[],[]],[],null,[],[null,[null,null,null,["goog.delegate.DelegateRegistry",null,[null,null,[null,null,"goog.delegate.DelegateRegistry.html"]],null,[[null,null,null,null,null,[[[null,null,null,["T",null,null,null,[]]],[null,null,null,null,null,null,null,null,null,1]]]]]]]],[]],[["registerClass",[null,303,null,[null,null,"closure/goog/delegate/delegateregistry.js"],[null,null,"https://github.com/google/closure-library/blob/master/closure/goog/delegate/delegateregistry.js#L303"]],[[]],null,null,null,null,["goog.delegate.DelegateRegistry",null,[null,null,[null,null,"goog.delegate.DelegateRegistry.html#registerClass"]],null,[]],[],[]],[],null,[["ctor",[null,null,[1,[null,null,null,null,null,[[[null,null,null,["T",null,null,null,[]]],[null,null,null,null,null,null,null,null,null,1]]]],[]]]]],null,[]],[["registerInstance",[null,311,null,[null,null,"closure/goog/delegate/delegateregistry.js"],[null,null,"https://github.com/google/closure-library/blob/master/closure/goog/delegate/delegateregistry.js#L311"]],[[]],null,null,null,null,["goog.delegate.DelegateRegistry",null,[null,null,[null,null,"goog.delegate.DelegateRegistry.html#registerInstance"]],null,[]],[],[]],[],null,[["instance",[null,null,null,null,null,[[[null,null,null,["T",null,null,null,[]]],[null,null,null,null,null,null,null,null,null,1]]]]]],null,[]]],[],null,[["module$contents$goog$delegate$DelegateRegistry_DelegateRegistryBase",null,null,null,[[null,null,null,["T",null,null,null,[]]]]]],[],[],[["goog.delegate.DelegateRegistry",null,[null,null,[null,null,"goog.delegate.DelegateRegistry.html"]],null,[]],null,1],null,"goog.delegate.DelegateRegistry.html","goog.delegate.DelegateRegistry",[],[],[],[]]]]]