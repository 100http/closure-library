{"2":{"1":[{"1":"goog.html.SafeStyle","5":{"1":"closure/goog/html/safestyle.js","2":118,"3":"https://github.com/google/closure-library/blob/master/closure/goog/html/safestyle.js#L118"},"7":{"1":[{"2":"<p>A string-like object which represents a sequence of CSS declarations\n(<code>propertyName1: propertyvalue1; propertyName2: propertyValue2; ...</code>)\nand that carries the security type contract that its value, as a string,\nwill not cause untrusted script execution (XSS) when evaluated as CSS in a\nbrowser.</p>\n<p>Instances of this type must be created via the factory methods\n(<code>goog.html.SafeStyle.create</code> or\n<code>goog.html.SafeStyle.fromConstant</code>) and not by invoking its\nconstructor. The constructor intentionally takes no parameters and the type\nis immutable; hence only a default instance corresponding to the empty string\ncan be obtained via constructor invocation.</p>\n<p>SafeStyle&#39;s string representation can safely be:</p>\n <ul><li>Interpolated as the content of a *quoted* HTML style attribute.\n       However, the SafeStyle string *must be HTML-attribute-escaped* before\n       interpolation.\n   </li><li>Interpolated as the content of a {}-wrapped block within a stylesheet.\n       &#39;&lt;&#39; characters in the SafeStyle string *must be CSS-escaped* before\n       interpolation. The SafeStyle string is also guaranteed not to be able\n       to introduce new properties or elide existing ones.\n   </li><li>Interpolated as the content of a {}-wrapped block within an HTML\n       </li></ul>"}]},"8":{"4":true,"7":true},"10":[{"1":{"1":"SafeStyle.PropertyMap","2":{"1":"closure/goog/html/safestyle.js","2":331,"3":"https://github.com/google/closure-library/blob/master/closure/goog/html/safestyle.js#L331"},"3":{"1":[{"2":"<p>Mapping of property names to their values.\nWe don&#39;t support numbers even though some values might be numbers (e.g.\nline-height or 0 for any length). The reason is that most numeric values need\nunits (e.g. &#39;1px&#39;) and allowing numbers could cause users forgetting about\nthem.</p>\n"}]}},"2":{"4":{"1":"Object","4":true,"5":[{"4":{"1":"string","4":true}},{"6":{"1":[{"4":{"1":"goog.string.Const","3":{"1":"goog.string.Const.html"}}},{"4":{"1":"string","4":true}},{"10":true}]}}]}}}],"12":[{"1":{"1":"SafeStyle.concat","2":{"1":"closure/goog/html/safestyle.js","2":504,"3":"https://github.com/google/closure-library/blob/master/closure/goog/html/safestyle.js#L504"},"3":{"1":[{"2":"<p>Creates a new SafeStyle object by concatenating the values.</p>\n"}]}},"4":[{"1":"var_args","2":{"2":true,"6":{"1":[{"4":{"1":"goog.html.SafeStyle","3":{"1":"goog.html.SafeStyle.html"}}},{"4":{"1":"Array","4":true,"5":[{"4":{"1":"goog.html.SafeStyle","3":{"1":"goog.html.SafeStyle.html"}}}]}}]}},"3":{"1":[{"2":"<p>SafeStyles to concatenate.</p>\n"}]}}],"5":{"2":{"4":{"1":"goog.html.SafeStyle","3":{"1":"goog.html.SafeStyle.html"}}}}},{"1":{"1":"SafeStyle.create","2":{"1":"closure/goog/html/safestyle.js","2":349,"3":"https://github.com/google/closure-library/blob/master/closure/goog/html/safestyle.js#L349"},"3":{"1":[{"2":"<p>Creates a new SafeStyle object from the properties specified in the map.</p>\n"}]}},"4":[{"1":"map","2":{"4":{"1":"Object","4":true,"5":[{"4":{"1":"string","4":true}},{"6":{"1":[{"4":{"1":"goog.string.Const","3":{"1":"goog.string.Const.html"}}},{"4":{"1":"string","4":true}},{"10":true}]}}]}},"3":{"1":[{"2":"<p>Mapping of property names to\ntheir values, for example {&#39;margin&#39;: &#39;1px&#39;}. Names must consist of\n[-<em>a-zA-Z0-9]. Values might be strings consisting of\n[-,.&#39;&#34;%</em>!# a-zA-Z0-9], where &#34; and &#39; must be properly balanced. We also\nallow simple functions like rgb() and url() which sanitizes its contents.\nOther values must be wrapped in goog.string.Const. Null value causes\nskipping the property.</p>\n"}]}}],"5":{"2":{"4":{"1":"goog.html.SafeStyle","3":{"1":"goog.html.SafeStyle.html"}}}},"6":[{"2":{"6":{"1":[{"4":{"1":"Error","4":true}},{"10":true}]}},"3":{"1":[{"2":"<p>If invalid name is provided.</p>\n"}]}},{"2":{"6":{"1":[{"4":{"1":"goog.asserts.AssertionError","3":{"1":"goog.asserts.AssertionError.html"}}},{"10":true}]}},"3":{"1":[{"2":"<p>If invalid value is provided. With\ndisabled assertions, invalid value is replaced by\ngoog.html.SafeStyle.INNOCUOUS_STRING.</p>\n"}]}}]},{"1":{"1":"SafeStyle.createSafeStyleSecurityPrivateDoNotAccessOrElse","2":{"1":"closure/goog/html/safestyle.js","2":286,"3":"https://github.com/google/closure-library/blob/master/closure/goog/html/safestyle.js#L286"},"3":{"1":[{"2":"<p>Package-internal utility method to create SafeStyle instances.</p>\n"}]},"5":3},"4":[{"1":"style","2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>The string to initialize the SafeStyle object with.</p>\n"}]}}],"5":{"2":{"4":{"1":"goog.html.SafeStyle","3":{"1":"goog.html.SafeStyle.html"}}},"3":{"1":[{"2":"<p>The initialized SafeStyle object.</p>\n"}]}}},{"1":{"1":"SafeStyle.fromConstant","2":{"1":"closure/goog/html/safestyle.js","2":173,"3":"https://github.com/google/closure-library/blob/master/closure/goog/html/safestyle.js#L173"},"3":{"1":[{"2":"<p>Creates a SafeStyle object from a compile-time constant string.</p>\n<p><code>style</code> should be in the format\n<code>name: value; [name: value; ...]</code> and must not have any &lt; or &gt;\ncharacters in it. This is so that SafeStyle&#39;s contract is preserved,\nallowing the SafeStyle to correctly be interpreted as a sequence of CSS\ndeclarations and without affecting the syntactic structure of any\nsurrounding CSS and HTML.</p>\n<p>This method performs basic sanity checks on the format of <code>style</code>\nbut does not constrain the format of <code>name</code> and <code>value</code>, except\nfor disallowing tag characters.</p>\n"}]}},"4":[{"1":"style","2":{"4":{"1":"goog.string.Const","3":{"1":"goog.string.Const.html"}}},"3":{"1":[{"2":"<p>A compile-time-constant string from which\nto create a SafeStyle.</p>\n"}]}}],"5":{"2":{"4":{"1":"goog.html.SafeStyle","3":{"1":"goog.html.SafeStyle.html"}}},"3":{"1":[{"2":"<p>A SafeStyle object initialized to\n<code>style</code>.</p>\n"}]}}},{"1":{"1":"SafeStyle.unwrap","2":{"1":"closure/goog/html/safestyle.js","2":255,"3":"https://github.com/google/closure-library/blob/master/closure/goog/html/safestyle.js#L255"},"3":{"1":[{"2":"<p>Performs a runtime check that the provided object is indeed a\nSafeStyle object, and returns its value.</p>\n"}]}},"4":[{"1":"safeStyle","2":{"4":{"1":"goog.html.SafeStyle","3":{"1":"goog.html.SafeStyle.html"}}},"3":{"1":[{"2":"<p>The object to extract from.</p>\n"}]}}],"5":{"2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>The safeStyle object&#39;s contained string, unless\nthe run-time type check fails. In that case, <code>unwrap</code> returns an\ninnocuous string, or, if assertions are enabled, throws\n<code>goog.asserts.AssertionError</code>.</p>\n"}]}}}],"13":[{"1":{"1":"SafeStyle.EMPTY","2":{"1":"closure/goog/html/safestyle.js","2":311,"3":"https://github.com/google/closure-library/blob/master/closure/goog/html/safestyle.js#L311"},"3":{"1":[{"2":"<p>A SafeStyle instance corresponding to the empty string.</p>\n"}]},"6":{"1":true}},"2":{"4":{"1":"goog.html.SafeStyle","3":{"1":"goog.html.SafeStyle.html"}}}},{"1":{"1":"SafeStyle.INNOCUOUS_STRING","2":{"1":"closure/goog/html/safestyle.js","2":320,"3":"https://github.com/google/closure-library/blob/master/closure/goog/html/safestyle.js#L320"},"3":{"1":[{"2":"<p>The innocuous string generated by goog.html.SafeStyle.create when passed\nan unsafe value.</p>\n"}]},"6":{"1":true}},"2":{"4":{"1":"string","4":true}}}],"14":{"1":{"1":"SafeStyle","2":{"1":"closure/goog/html/safestyle.js","2":118,"3":"https://github.com/google/closure-library/blob/master/closure/goog/html/safestyle.js#L118"},"3":{"1":[{"2":"<p>A string-like object which represents a sequence of CSS declarations\n(<code>propertyName1: propertyvalue1; propertyName2: propertyValue2; ...</code>)\nand that carries the security type contract that its value, as a string,\nwill not cause untrusted script execution (XSS) when evaluated as CSS in a\nbrowser.</p>\n<p>Instances of this type must be created via the factory methods\n(<code>goog.html.SafeStyle.create</code> or\n<code>goog.html.SafeStyle.fromConstant</code>) and not by invoking its\nconstructor. The constructor intentionally takes no parameters and the type\nis immutable; hence only a default instance corresponding to the empty string\ncan be obtained via constructor invocation.</p>\n<p>SafeStyle&#39;s string representation can safely be:</p>\n <ul><li>Interpolated as the content of a *quoted* HTML style attribute.\n       However, the SafeStyle string *must be HTML-attribute-escaped* before\n       interpolation.\n   </li><li>Interpolated as the content of a {}-wrapped block within a stylesheet.\n       &#39;&lt;&#39; characters in the SafeStyle string *must be CSS-escaped* before\n       interpolation. The SafeStyle string is also guaranteed not to be able\n       to introduce new properties or elide existing ones.\n   </li><li>Interpolated as the content of a {}-wrapped block within an HTML\n       </li></ul>"}]},"10":[{"1":[{"1":"goog.html.SafeStyle#create","3":{"1":"goog.html.SafeStyle.html#SafeStyle.create"}}]},{"1":[{"1":"goog.html.SafeStyle#fromConstant","3":{"1":"goog.html.SafeStyle.html#SafeStyle.fromConstant"}}]},{"1":[{"2":"<p><a href=\"http://www.w3.org/TR/css3-syntax/\">http://www.w3.org/TR/css3-syntax/</a></p>\n"}]}]},"3":true},"15":[{"1":{"1":"getTypedStringValue","2":{"1":"closure/goog/html/safestyle.js","2":223,"3":"https://github.com/google/closure-library/blob/master/closure/goog/html/safestyle.js#L223"},"3":{"1":[{"2":"<p>Returns this SafeStyle&#39;s value as a string.</p>\n<p>IMPORTANT: In code where it is security relevant that an object&#39;s type is\nindeed <code>SafeStyle</code>, use <code>goog.html.SafeStyle.unwrap</code> instead of\nthis method. If in doubt, assume that it&#39;s security relevant. In particular,\nnote that goog.html functions which return a goog.html type do not guarantee\nthe returned instance is of the right type. For example:</p>\n <pre>\n var fakeSafeHtml &#61; new String(&#39;fake&#39;);\n fakeSafeHtml.__proto__ &#61; goog.html.SafeHtml.prototype;\n var newSafeHtml &#61; goog.html.SafeHtml.htmlEscape(fakeSafeHtml);\n // newSafeHtml is just an alias for fakeSafeHtml, it&#39;s passed through by\n // goog.html.SafeHtml.htmlEscape() as fakeSafeHtml\n // instanceof goog.html.SafeHtml.\n </pre>\n"}]},"9":[{"1":"goog.string.TypedString","3":{"1":"goog.string.TypedString.html#getTypedStringValue"}}],"10":[{"1":[{"1":"goog.html.SafeStyle#unwrap","3":{"1":"goog.html.SafeStyle.html#SafeStyle.unwrap"}}]}]},"5":{"2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>The wrapped string&#39;s value.</p>\n"}]}}},{"1":{"1":"toString","2":{"1":"closure/goog/html/safestyle.js","2":238,"3":"https://github.com/google/closure-library/blob/master/closure/goog/html/safestyle.js#L238"},"3":{"1":[{"2":"<p>Returns a debug string-representation of this value.</p>\n<p>To obtain the actual string value wrapped in a SafeStyle, use\n<code>goog.html.SafeStyle.unwrap</code>.</p>\n"}]},"10":[{"1":[{"1":"goog.html.SafeStyle#unwrap","3":{"1":"goog.html.SafeStyle.html#SafeStyle.unwrap"}}]}]},"5":{"2":{"4":{"1":"string","4":true}}}}],"16":[{"1":{"1":"implementsGoogStringTypedString","2":{"1":"closure/goog/html/safestyle.js","2":142,"3":"https://github.com/google/closure-library/blob/master/closure/goog/html/safestyle.js#L142"},"3":{"1":[{"2":"<p>Interface marker of the TypedString interface.</p>\n<p>This property can be used to determine at runtime whether or not an object\nimplements this interface.  All implementations of this interface set this\nproperty to <code>true</code>.</p>\n"}]},"6":{"1":true},"9":[{"1":"goog.string.TypedString","3":{"1":"goog.string.TypedString.html#implementsGoogStringTypedString"}}]},"2":{"4":{"1":"boolean","4":true}}}],"19":[{"1":"goog.string.TypedString","3":{"1":"goog.string.TypedString.html"}}],"21":{"1":{"1":"goog.html.SafeStyle","3":{"1":"goog.html.SafeStyle.html"}},"2":4},"23":"goog.html.SafeStyle.html","24":"goog.html.SafeStyle"}]}}