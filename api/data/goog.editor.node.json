{"2":{"1":[{"1":"goog.editor.node","5":{"1":"closure/goog/editor/node.js","2":22,"3":"https://github.com/google/closure-library/blob/master/closure/goog/editor/node.js#L22"},"7":{},"8":{},"12":[{"1":{"1":"findHighestMatchingAncestor","2":{"1":"closure/goog/editor/node.js","2":301,"3":"https://github.com/google/closure-library/blob/master/closure/goog/editor/node.js#L301"},"3":{"1":[{"2":"<p>Search ancestor nodes using a predicate function and returns the topmost\nancestor in the chain of consecutive ancestors that satisfies the condition.</p>\n"}]}},"4":[{"1":"node","2":{"6":{"1":[{"4":{"1":"Node"}},{"10":true}]}},"3":{"1":[{"2":"<p>The node whose ancestors have to be searched.</p>\n"}]}},{"1":"hasProperty","2":{"3":{"3":[{"6":{"1":[{"4":{"1":"Node"}},{"10":true}]}}],"4":{"4":{"1":"boolean","4":true}}}},"3":{"1":[{"2":"<p>A function that takes a parent\nnode as a parameter and returns true if it meets the criteria.</p>\n"}]}}],"5":{"2":{"6":{"1":[{"4":{"1":"Node"}},{"10":true}]}},"3":{"1":[{"2":"<p>The topmost ancestor or null if no ancestor satisfies the\npredicate function.</p>\n"}]}}},{"1":{"1":"findInChildren","2":{"1":"closure/goog/editor/node.js","2":281,"3":"https://github.com/google/closure-library/blob/master/closure/goog/editor/node.js#L281"},"3":{"1":[{"2":"<p>Search child nodes using a predicate function and return the first node that\nsatisfies the condition.</p>\n"}]}},"4":[{"1":"parent","2":{"6":{"1":[{"4":{"1":"Node"}},{"10":true}]}},"3":{"1":[{"2":"<p>The parent node to search.</p>\n"}]}},{"1":"hasProperty","2":{"3":{"3":[{"6":{"1":[{"4":{"1":"Node"}},{"10":true}]}}],"4":{"4":{"1":"boolean","4":true}}}},"3":{"1":[{"2":"<p>A function that takes a child\nnode as a parameter and returns true if it meets the criteria.</p>\n"}]}}],"5":{"2":{"6":{"1":[{"4":{"1":"number","4":true}},{"10":true}]}},"3":{"1":[{"2":"<p>The index of the node found, or null if no node is found.</p>\n"}]}}},{"1":{"1":"findTopMostEditableAncestor","2":{"1":"closure/goog/editor/node.js","2":368,"3":"https://github.com/google/closure-library/blob/master/closure/goog/editor/node.js#L368"},"3":{"1":[{"2":"<p>Finds the top-most DOM node inside an editable field that is an ancestor\n(or self) of a given DOM node and meets the specified criteria.</p>\n"}]}},"4":[{"1":"node","2":{"6":{"1":[{"4":{"1":"Node"}},{"10":true}]}},"3":{"1":[{"2":"<p>The DOM node where the search starts.</p>\n"}]}},{"1":"criteria","2":{"3":{"3":[{"6":{"1":[{"4":{"1":"Node"}},{"10":true}]}}],"4":{"4":{"1":"boolean","4":true}}}},"3":{"1":[{"2":"<p>A function that takes a DOM node\nas a parameter and returns a boolean to indicate whether the node meets\nthe criteria or not.</p>\n"}]}}],"5":{"2":{"6":{"1":[{"4":{"1":"Node"}},{"10":true}]}},"3":{"1":[{"2":"<p>The DOM node if found, or null.</p>\n"}]}}},{"1":{"1":"getFirstChild","2":{"1":"closure/goog/editor/node.js","2":117,"3":"https://github.com/google/closure-library/blob/master/closure/goog/editor/node.js#L117"},"3":{"1":[{"2":"<p>Version of firstChild that skips nodes that are entirely\nwhitespace and comments.</p>\n"}]}},"4":[{"1":"parent","2":{"6":{"1":[{"4":{"1":"Node"}},{"10":true}]}},"3":{"1":[{"2":"<p>The reference node.</p>\n"}]}}],"5":{"2":{"6":{"1":[{"4":{"1":"Node"}},{"10":true}]}},"3":{"1":[{"2":"<p>The first child of sibling that is important according to\ngoog.editor.node.isImportant, or null if no such node exists.</p>\n"}]}}},{"1":{"1":"getLastChild","2":{"1":"closure/goog/editor/node.js","2":130,"3":"https://github.com/google/closure-library/blob/master/closure/goog/editor/node.js#L130"},"3":{"1":[{"2":"<p>Version of lastChild that skips nodes that are entirely whitespace or\ncomments.  (Normally lastChild is a property of all DOM nodes that gives the\nlast of the nodes contained directly in the reference node.)</p>\n"}]}},"4":[{"1":"parent","2":{"6":{"1":[{"4":{"1":"Node"}},{"10":true}]}},"3":{"1":[{"2":"<p>The reference node.</p>\n"}]}}],"5":{"2":{"6":{"1":[{"4":{"1":"Node"}},{"10":true}]}},"3":{"1":[{"2":"<p>The last child of sibling that is important according to\ngoog.editor.node.isImportant, or null if no such node exists.</p>\n"}]}}},{"1":{"1":"getLeftMostLeaf","2":{"1":"closure/goog/editor/node.js","2":101,"3":"https://github.com/google/closure-library/blob/master/closure/goog/editor/node.js#L101"},"3":{"1":[{"2":"<p>Get the left-most non-ignorable leaf node of the given node.</p>\n"}]}},"4":[{"1":"parent","2":{"6":{"1":[{"4":{"1":"Node"}},{"10":true}]}},"3":{"1":[{"2":"<p>The parent ndoe.</p>\n"}]}}],"5":{"2":{"6":{"1":[{"4":{"1":"Node"}},{"10":true}]}},"3":{"1":[{"2":"<p>The left-most non-ignorable leaf node.</p>\n"}]}}},{"1":{"1":"getLength","2":{"1":"closure/goog/editor/node.js","2":268,"3":"https://github.com/google/closure-library/blob/master/closure/goog/editor/node.js#L268"},"3":{"1":[{"2":"<p>Returns the length of the text in node if it is a text node, or the number\nof children of the node, if it is an element. Useful for range-manipulation\ncode where you need to know the offset for the right side of the node.</p>\n"}]}},"4":[{"1":"node","2":{"6":{"1":[{"4":{"1":"Node"}},{"10":true}]}},"3":{"1":[{"2":"<p>The node to get the length of.</p>\n"}]}}],"5":{"2":{"4":{"1":"number","4":true}},"3":{"1":[{"2":"<p>The length of the node.</p>\n"}]}}},{"1":{"1":"getNextSibling","2":{"1":"closure/goog/editor/node.js","2":163,"3":"https://github.com/google/closure-library/blob/master/closure/goog/editor/node.js#L163"},"3":{"1":[{"2":"<p>Version of nextSibling that skips nodes that are entirely whitespace or\ncomments.</p>\n"}]}},"4":[{"1":"sibling","2":{"6":{"1":[{"4":{"1":"Node"}},{"10":true}]}},"3":{"1":[{"2":"<p>The reference node.</p>\n"}]}}],"5":{"2":{"6":{"1":[{"4":{"1":"Node"}},{"10":true}]}},"3":{"1":[{"2":"<p>The closest next sibling to sibling that is important\naccording to goog.editor.node.isImportant, or null if no\nsuch node exists.</p>\n"}]}}},{"1":{"1":"getPreviousSibling","2":{"1":"closure/goog/editor/node.js","2":146,"3":"https://github.com/google/closure-library/blob/master/closure/goog/editor/node.js#L146"},"3":{"1":[{"2":"<p>Version of previoussibling that skips nodes that are entirely\nwhitespace or comments.  (Normally previousSibling is a property\nof all DOM nodes that gives the sibling node, the node that is\na child of the same parent, that occurs immediately before the\nreference node.)</p>\n"}]}},"4":[{"1":"sibling","2":{"6":{"1":[{"4":{"1":"Node"}},{"10":true}]}},"3":{"1":[{"2":"<p>The reference node.</p>\n"}]}}],"5":{"2":{"6":{"1":[{"4":{"1":"Node"}},{"10":true}]}},"3":{"1":[{"2":"<p>The closest previous sibling to sibling that is\nimportant according to goog.editor.node.isImportant, or null if no such\nnode exists.</p>\n"}]}}},{"1":{"1":"getRightMostLeaf","2":{"1":"closure/goog/editor/node.js","2":87,"3":"https://github.com/google/closure-library/blob/master/closure/goog/editor/node.js#L87"},"3":{"1":[{"2":"<p>Get the right-most non-ignorable leaf node of the given node.</p>\n"}]}},"4":[{"1":"parent","2":{"6":{"1":[{"4":{"1":"Node"}},{"10":true}]}},"3":{"1":[{"2":"<p>The parent ndoe.</p>\n"}]}}],"5":{"2":{"6":{"1":[{"4":{"1":"Node"}},{"10":true}]}},"3":{"1":[{"2":"<p>The right-most non-ignorable leaf node.</p>\n"}]}}},{"1":{"1":"isAllNonNbspWhiteSpace","2":{"1":"closure/goog/editor/node.js","2":232,"3":"https://github.com/google/closure-library/blob/master/closure/goog/editor/node.js#L232"},"3":{"1":[{"2":"<p>Determine whether a node&#39;s text content is entirely whitespace.</p>\n"}]}},"4":[{"1":"textNode","2":{"6":{"1":[{"4":{"1":"Node"}},{"10":true}]}},"3":{"1":[{"2":"<p>A node implementing the CharacterData interface (i.e.,\na Text, Comment, or CDATASection node.</p>\n"}]}}],"5":{"2":{"4":{"1":"boolean","4":true}},"3":{"1":[{"2":"<p>Whether the text content of node is whitespace,\notherwise false.</p>\n"}]}}},{"1":{"1":"isBlockTag","2":{"1":"closure/goog/editor/node.js","2":318,"3":"https://github.com/google/closure-library/blob/master/closure/goog/editor/node.js#L318"},"3":{"1":[{"2":"<p>Checks if node is a block-level html element. The <tt>display</tt> css\nproperty is ignored.</p>\n"}]}},"4":[{"1":"node","2":{"6":{"1":[{"4":{"1":"Node"}},{"10":true}]}},"3":{"1":[{"2":"<p>The node to test.</p>\n"}]}}],"5":{"2":{"4":{"1":"boolean","4":true}},"3":{"1":[{"2":"<p>Whether the node is a block-level node.</p>\n"}]}}},{"1":{"1":"isEditable","2":{"1":"closure/goog/editor/node.js","2":354,"3":"https://github.com/google/closure-library/blob/master/closure/goog/editor/node.js#L354"},"3":{"1":[{"2":"<p>Checks if a node is inside an editable container.</p>\n"}]}},"4":[{"1":"node","2":{"6":{"1":[{"4":{"1":"Node"}},{"10":true}]}},"3":{"1":[{"2":"<p>The node to test.</p>\n"}]}}],"5":{"2":{"4":{"1":"boolean","4":true}},"3":{"1":[{"2":"<p>Whether the node is in an editable container.</p>\n"}]}}},{"1":{"1":"isEditableContainer","2":{"1":"closure/goog/editor/node.js","2":344,"3":"https://github.com/google/closure-library/blob/master/closure/goog/editor/node.js#L344"},"3":{"1":[{"2":"<p>Checks if an element is a top-level editable container (meaning that\nit itself is not editable, but all its child nodes are editable).</p>\n"}]}},"4":[{"1":"element","2":{"6":{"1":[{"4":{"1":"Node"}},{"10":true}]}},"3":{"1":[{"2":"<p>The element to test.</p>\n"}]}}],"5":{"2":{"4":{"1":"boolean","4":true}},"3":{"1":[{"2":"<p>Whether the element is a top-level editable container.</p>\n"}]}}},{"1":{"1":"isEmpty","2":{"1":"closure/goog/editor/node.js","2":245,"3":"https://github.com/google/closure-library/blob/master/closure/goog/editor/node.js#L245"},"3":{"1":[{"2":"<p>Returns true if the node contains only whitespace and is not and does not\ncontain any images, iframes or embed tags.</p>\n"}]}},"4":[{"1":"node","2":{"6":{"1":[{"4":{"1":"Node"}},{"10":true}]}},"3":{"1":[{"2":"<p>The node to check.</p>\n"}]}},{"1":"opt_prohibitSingleNbsp","2":{"1":true,"6":{"1":[{"4":{"1":"boolean","4":true}},{"9":true}]}},"3":{"1":[{"2":"<p>By default, this function treats a\nsingle nbsp as empty.  Set this to true to treat this case as non-empty.</p>\n"}]}}],"5":{"2":{"4":{"1":"boolean","4":true}},"3":{"1":[{"2":"<p>Whether the node contains only whitespace.</p>\n"}]}}},{"1":{"1":"isImportant","2":{"1":"closure/goog/editor/node.js","2":217,"3":"https://github.com/google/closure-library/blob/master/closure/goog/editor/node.js#L217"},"3":{"1":[{"2":"<p>Determine if a node should be returned by the iterator functions.</p>\n"}]}},"4":[{"1":"node","2":{"6":{"1":[{"4":{"1":"Node"}},{"10":true}]}},"3":{"1":[{"2":"<p>An object implementing the DOM1 Node interface.</p>\n"}]}}],"5":{"2":{"4":{"1":"boolean","4":true}},"3":{"1":[{"2":"<p>Whether the node is an element, or a text node that\nis not all whitespace.</p>\n"}]}}},{"1":{"1":"isStandardsMode","2":{"1":"closure/goog/editor/node.js","2":77,"3":"https://github.com/google/closure-library/blob/master/closure/goog/editor/node.js#L77"},"3":{"1":[{"2":"<p>Check if the node is in a standards mode document.</p>\n"}]}},"4":[{"1":"node","2":{"6":{"1":[{"4":{"1":"Node"}},{"10":true}]}},"3":{"1":[{"2":"<p>The node to test.</p>\n"}]}}],"5":{"2":{"4":{"1":"boolean","4":true}},"3":{"1":[{"2":"<p>Whether the node is in a standards mode document.</p>\n"}]}}},{"1":{"1":"replaceInnerHtml","2":{"1":"closure/goog/editor/node.js","2":452,"3":"https://github.com/google/closure-library/blob/master/closure/goog/editor/node.js#L452"},"3":{"1":[{"2":"<p>Replaces the innerHTML of a node.</p>\n<p>IE has serious problems if you try to set innerHTML of an editable node with\nany selection. Early versions of IE tear up the old internal tree storage, to\nhelp avoid ref-counting loops. But this sometimes leaves the selection object\nin a bad state and leads to segfaults.</p>\n<p>Removing the nodes first prevents IE from tearing them up. This is not\nstrictly necessary in nodes that do not have the selection. You should always\nuse this function when setting innerHTML inside of a field.</p>\n"}]}},"4":[{"1":"node","2":{"6":{"1":[{"4":{"1":"Node"}},{"10":true}]}},"3":{"1":[{"2":"<p>A node.</p>\n"}]}},{"1":"html","2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>The innerHTML to set on the node.</p>\n"}]}}]},{"1":{"1":"skipEmptyTextNodes","2":{"1":"closure/goog/editor/node.js","2":330,"3":"https://github.com/google/closure-library/blob/master/closure/goog/editor/node.js#L330"},"3":{"1":[{"2":"<p>Skips siblings of a node that are empty text nodes.</p>\n"}]}},"4":[{"1":"node","2":{"6":{"1":[{"4":{"1":"Node"}},{"10":true}]}},"3":{"1":[{"2":"<p>A node. May be null.</p>\n"}]}}],"5":{"2":{"6":{"1":[{"4":{"1":"Node"}},{"10":true}]}},"3":{"1":[{"2":"<p>The node or the first sibling of the node that is not an\nempty text node. May be null.</p>\n"}]}}},{"1":{"1":"splitDomTreeAt","2":{"1":"closure/goog/editor/node.js","2":389,"3":"https://github.com/google/closure-library/blob/master/closure/goog/editor/node.js#L389"},"3":{"1":[{"2":"<p>Splits off a subtree.</p>\n"}]}},"4":[{"1":"currentNode","2":{"4":{"1":"Node"}},"3":{"1":[{"2":"<p>The starting splitting point.</p>\n"}]}},{"1":"opt_secondHalf","2":{"1":true,"6":{"1":[{"4":{"1":"Node"}},{"10":true},{"9":true}]}},"3":{"1":[{"2":"<p>The initial leftmost leaf the new subtree.\nIf null, siblings after currentNode will be placed in the subtree, but\nno additional node will be.</p>\n"}]}},{"1":"opt_root","2":{"1":true,"6":{"1":[{"4":{"1":"Node"}},{"10":true},{"9":true}]}},"3":{"1":[{"2":"<p>The top of the tree where splitting stops at.</p>\n"}]}}],"5":{"2":{"4":{"1":"Node"}},"3":{"1":[{"2":"<p>The new subtree.</p>\n"}]}}},{"1":{"1":"transferChildren","2":{"1":"closure/goog/editor/node.js","2":432,"3":"https://github.com/google/closure-library/blob/master/closure/goog/editor/node.js#L432"},"3":{"1":[{"2":"<p>Appends all of oldNode&#39;s children to newNode. This removes all children from\noldNode and appends them to newNode. oldNode is left with no children.</p>\n"}]},"4":{"1":[{"2":"<p>Use goog.dom.append directly instead.</p>\n"}]},"6":{"2":true}},"4":[{"1":"newNode","2":{"4":{"1":"Node"}},"3":{"1":[{"2":"<p>Node to transfer children to.</p>\n"}]}},{"1":"oldNode","2":{"6":{"1":[{"4":{"1":"Node"}},{"10":true}]}},"3":{"1":[{"2":"<p>Node to transfer children from.</p>\n"}]}}]}],"21":{"1":{"1":"goog.editor.node","3":{"1":"goog.editor.node.html"}},"2":4},"23":"goog.editor.node.html","24":"goog.editor.node"}]}}