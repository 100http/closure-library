{"2":{"1":[{"1":"goog.editor.plugins.UndoRedo","5":{"1":"closure/goog/editor/plugins/undoredo.js","2":52,"3":"https://github.com/google/closure-library/blob/master/closure/goog/editor/plugins/undoredo.js#L52"},"6":{"1":[{"1":"UndoRedo.CursorPosition_","2":"goog.editor.plugins.UndoRedo.CursorPosition_.html","3":{"1":[{"2":"<p>Stores the state of the selection in a way the survives DOM modifications\nthat don&#39;t modify the user-interactable content (e.g.</p>\n"}]}},{"1":"UndoRedo.UndoState_","2":"goog.editor.plugins.UndoRedo.UndoState_.html","3":{"1":[{"2":"<p>This object encapsulates the state of an editable field.</p>\n"}]}}],"2":[{"1":"UndoRedo.COMMAND","2":"goog.editor.plugins.UndoRedo.COMMAND.html","3":{"1":[{"2":"<p>Commands implemented by this plugin.</p>\n"}]}}]},"7":{"1":[{"2":"<p>Encapsulates undo/redo logic using a custom undo stack (i.e. not browser\nbuilt-in). Browser built-in undo stacks are too flaky (e.g. IE&#39;s gets\nclobbered on DOM modifications). Also, this allows interleaving non-editing\ncommands into the undo stack via the UndoRedoManager.</p>\n"}]},"8":{},"14":{"1":{"1":"UndoRedo","2":{"1":"closure/goog/editor/plugins/undoredo.js","2":52,"3":"https://github.com/google/closure-library/blob/master/closure/goog/editor/plugins/undoredo.js#L52"},"3":{"1":[{"2":"<p>Encapsulates undo/redo logic using a custom undo stack (i.e. not browser\nbuilt-in). Browser built-in undo stacks are too flaky (e.g. IE&#39;s gets\nclobbered on DOM modifications). Also, this allows interleaving non-editing\ncommands into the undo stack via the UndoRedoManager.</p>\n"}]}},"3":true,"4":[{"1":"opt_manager","2":{"1":true,"6":{"1":[{"4":{"1":"goog.editor.plugins.UndoRedoManager","3":{"1":"goog.editor.plugins.UndoRedoManager.html"}}},{"10":true},{"9":true}]}},"3":{"1":[{"2":"<p>An undo redo\nmanager to be used by this plugin. If none is provided one is created.</p>\n"}]}}]},"15":[{"1":{"1":"activeOnUneditableFields","2":{"1":"closure/goog/editor/plugin.js","2":197,"3":"https://github.com/google/closure-library/blob/master/closure/goog/editor/plugin.js#L197"},"3":{},"7":{"1":"goog.editor.Plugin","3":{"1":"goog.editor.Plugin.html#activeOnUneditableFields"}}},"5":{"2":{"4":{"1":"boolean","4":true}},"3":{"1":[{"2":"<p>If true, field will not disable the command\nwhen the field becomes uneditable.</p>\n"}]}}},{"1":{"1":"addEventListener","2":{"1":"closure/goog/events/eventtarget.js","2":150,"3":"https://github.com/google/closure-library/blob/master/closure/goog/events/eventtarget.js#L150"},"3":{"1":[{"2":"<p>Adds an event listener to the event target. The same handler can only be\nadded once per the type. Even if you add the same handler multiple times\nusing the same type then it will only be called once when the event is\ndispatched.</p>\n"}]},"4":{"1":[{"2":"<p>Use <code>#listen</code> instead, when possible. Otherwise, use\n<code>goog.events.listen</code> if you are passing Object\n(instead of Function) as handler.</p>\n"}]},"6":{"2":true},"7":{"1":"goog.events.EventTarget","3":{"1":"goog.events.EventTarget.html#addEventListener"}}},"4":[{"1":"type","2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>The type of the event to listen for.</p>\n"}]}},{"1":"handler","2":{"6":{"1":[{"3":{"3":[{"8":true}],"4":{"8":true}}},{"5":{"1":[{"1":"handleEvent","2":{"3":{"3":[{"8":true}],"4":{"8":true}}}}]}},{"10":true}]}},"3":{"1":[{"2":"<p>The function\nto handle the event. The handler can also be an object that implements\nthe handleEvent method which takes the event object as argument.</p>\n"}]}},{"1":"opt_capture","2":{"1":true,"6":{"1":[{"4":{"1":"boolean","4":true}},{"9":true}]}},"3":{"1":[{"2":"<p>In DOM-compliant browsers, this determines\nwhether the listener is fired during the capture or bubble phase\nof the event.</p>\n"}]}},{"1":"opt_handlerScope","2":{"1":true,"6":{"1":[{"4":{"1":"Object","4":true}},{"10":true},{"9":true}]}},"3":{"1":[{"2":"<p>Object in whose scope to call\nthe listener.</p>\n"}]}}]},{"1":{"1":"addOnDisposeCallback","2":{"1":"closure/goog/disposable/disposable.js","2":216,"3":"https://github.com/google/closure-library/blob/master/closure/goog/disposable/disposable.js#L216"},"3":{"1":[{"2":"<p>Invokes a callback function when this object is disposed. Callbacks are\ninvoked in the order in which they were added. If a callback is added to\nan already disposed Disposable, it will be called immediately.</p>\n"}]},"7":{"1":"goog.Disposable","3":{"1":"goog.Disposable.html#addOnDisposeCallback"}}},"2":["T"],"4":[{"1":"callback","2":{"3":{"2":{"6":{"1":[{"4":{"1":"T"}},{"10":true}]}},"4":{"8":true}}},"3":{"1":[{"2":"<p>The callback function.</p>\n"}]}},{"1":"opt_scope","2":{"1":true,"6":{"1":[{"4":{"1":"T"}},{"10":true},{"9":true}]}},"3":{"1":[{"2":"<p>An optional scope to call the callback in.</p>\n"}]}}]},{"1":{"1":"cleanContentsDom","2":{"1":"closure/goog/editor/plugin.js","2":439,"3":"https://github.com/google/closure-library/blob/master/closure/goog/editor/plugin.js#L439"},"3":{"1":[{"2":"<p>Cleans the contents of the node passed to it. The node contents are modified\ndirectly, and the modifications will subsequently be used, for operations\nsuch as saving the innerHTML of the editor etc. Since the plugins act on\nthe DOM directly, this method can be very expensive.</p>\n<p>This op is invoked even on disabled plugins.</p>\n"}]},"7":{"1":"goog.editor.Plugin","3":{"1":"goog.editor.Plugin.html#cleanContentsDom"}}},"4":[{"1":"fieldCopy","2":{"4":{"1":"Element"}},"3":{"1":[{"2":"<p>The copy of the editable field which\nneeds to be cleaned up.</p>\n"}]}}]},{"1":{"1":"cleanContentsHtml","2":{"1":"closure/goog/editor/plugin.js","2":452,"3":"https://github.com/google/closure-library/blob/master/closure/goog/editor/plugin.js#L452"},"3":{"1":[{"2":"<p>Cleans the html contents of Trogedit. Both cleanContentsDom and\nand cleanContentsHtml will be called on contents extracted from Trogedit.\nThe inverse of prepareContentsHtml.</p>\n<p>This op is invoked even on disabled plugins.</p>\n"}]},"7":{"1":"goog.editor.Plugin","3":{"1":"goog.editor.Plugin.html#cleanContentsHtml"}}},"4":[{"1":"originalHtml","2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>The trogedit HTML.</p>\n"}]}}],"5":{"2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>Cleaned-up HTML.</p>\n"}]}}},{"1":{"1":"clearHistory","2":{"1":"closure/goog/editor/plugins/undoredo.js","2":494,"3":"https://github.com/google/closure-library/blob/master/closure/goog/editor/plugins/undoredo.js#L494"},"3":{"1":[{"2":"<p>Clear the undo/redo stack.</p>\n"}]}}},{"1":{"1":"disable","2":{"1":"closure/goog/editor/plugins/undoredo.js","2":277,"3":"https://github.com/google/closure-library/blob/master/closure/goog/editor/plugins/undoredo.js#L277"},"3":{"1":[{"2":"<p>Disables this plugin for the specified, registered field object.</p>\n"}]},"8":{"1":"goog.editor.Plugin","3":{"1":"goog.editor.Plugin.html#disable"}}},"4":[{"1":"fieldObject","2":{"6":{"1":[{"4":{"1":"goog.editor.Field","3":{"1":"goog.editor.Field.html"}}},{"10":true}]}},"3":{"1":[{"2":"<p>The field object.</p>\n"}]}}]},{"1":{"1":"dispatchEvent","2":{"1":"closure/goog/events/listenable.js","2":180,"3":"https://github.com/google/closure-library/blob/master/closure/goog/events/listenable.js#L180"},"3":{"1":[{"2":"<p>Dispatches an event (or event like object) and calls all listeners\nlistening for events of this type. The type of the event is decided by the\ntype property on the event object.</p>\n<p>If any of the listeners returns false OR calls preventDefault then this\nfunction will return false.  If one of the capture listeners calls\nstopPropagation, then the bubble listeners won&#39;t fire.</p>\n"}]},"8":{"1":"goog.events.EventTarget","3":{"1":"goog.events.EventTarget.html#dispatchEvent"}}},"4":[{"1":"e","2":{"6":{"1":[{"4":{"1":"string","4":true}},{"4":{"1":"Object","4":true}},{"10":true}]}},"3":{"1":[{"2":"<p>Event object.</p>\n"}]}}],"5":{"2":{"4":{"1":"boolean","4":true}},"3":{"1":[{"2":"<p>If anyone called preventDefault on the event object (or\nif any of the listeners returns false) this will also return false.</p>\n"}]}}},{"1":{"1":"dispose","2":{"1":"closure/goog/disposable/idisposable.js","2":39,"3":"https://github.com/google/closure-library/blob/master/closure/goog/disposable/idisposable.js#L39"},"3":{"1":[{"2":"<p>Disposes of the object and its resources.</p>\n"}]},"8":{"1":"goog.Disposable","3":{"1":"goog.Disposable.html#dispose"}}},"5":{"3":{"1":[{"2":"<p>Nothing.</p>\n"}]}}},{"1":{"1":"disposeInternal","2":{"1":"closure/goog/editor/plugins/undoredo.js","2":319,"3":"https://github.com/google/closure-library/blob/master/closure/goog/editor/plugins/undoredo.js#L319"},"3":{"1":[{"2":"<p>Removes listeners from this object.  Classes that extend EventTarget may\nneed to override this method in order to remove references to DOM Elements\nand additional listeners.</p>\n"}]},"5":1,"8":{"1":"goog.editor.Plugin","3":{"1":"goog.editor.Plugin.html#disposeInternal"}}}},{"1":{"1":"enable","2":{"1":"closure/goog/editor/plugins/undoredo.js","2":228,"3":"https://github.com/google/closure-library/blob/master/closure/goog/editor/plugins/undoredo.js#L228"},"3":{"1":[{"2":"<p>Enables this plugin for the specified, registered field object. A field\nobject should only be enabled when it is loaded.</p>\n"}]},"8":{"1":"goog.editor.Plugin","3":{"1":"goog.editor.Plugin.html#enable"}}},"4":[{"1":"fieldObject","2":{"6":{"1":[{"4":{"1":"goog.editor.Field","3":{"1":"goog.editor.Field.html"}}},{"10":true}]}},"3":{"1":[{"2":"<p>The field object.</p>\n"}]}}]},{"1":{"1":"execCommand","2":{"1":"closure/goog/editor/plugins/undoredo.js","2":342,"3":"https://github.com/google/closure-library/blob/master/closure/goog/editor/plugins/undoredo.js#L342"},"3":{"1":[{"2":"<p>Handles execCommand. This default implementation handles dispatching\nBEFORECHANGE, CHANGE, and SELECTIONCHANGE events, and calls\nexecCommandInternal to perform the actual command. Plugins that want to\ndo their own event dispatching should override execCommand, otherwise\nit is preferred to only override execCommandInternal.</p>\n<p>This version of execCommand will only work for single field plugins.\nMulti-field plugins must override execCommand.</p>\n"}]},"8":{"1":"goog.editor.Plugin","3":{"1":"goog.editor.Plugin.html#execCommand"}}},"4":[{"1":"command","2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>The command to execute.</p>\n"}]}},{"1":"var_args","2":{"2":true,"7":true},"3":{"1":[{"2":"<p>Any additional parameters needed to\nexecute the command.</p>\n"}]}}],"5":{"2":{"7":true},"3":{"1":[{"2":"<p>The result of the execCommand, if any.</p>\n"}]}}},{"1":{"1":"execCommandInternal","2":{"1":"closure/goog/editor/plugin.js","2":401,"3":"https://github.com/google/closure-library/blob/master/closure/goog/editor/plugin.js#L401"},"3":{"1":[{"2":"<p>Handles execCommand. This default implementation does nothing, and is\ncalled by execCommand, which handles event dispatching. This method should\nbe overriden by plugins that don&#39;t need to do their own event dispatching.\nIf custom event dispatching is needed, execCommand shoul be overriden\ninstead.</p>\n"}]},"5":1,"7":{"1":"goog.editor.Plugin","3":{"1":"goog.editor.Plugin.html#execCommandInternal"}}},"4":[{"1":"command","2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>The command to execute.</p>\n"}]}},{"1":"var_args","2":{"2":true,"7":true},"3":{"1":[{"2":"<p>Any additional parameters needed to\nexecute the command.</p>\n"}]}}],"5":{"2":{"7":true},"3":{"1":[{"2":"<p>The result of the execCommand, if any.</p>\n"}]}}},{"1":{"1":"fireListeners","2":{"1":"closure/goog/events/listenable.js","2":225,"3":"https://github.com/google/closure-library/blob/master/closure/goog/events/listenable.js#L225"},"3":{"1":[{"2":"<p>Fires all registered listeners in this listenable for the given\ntype and capture mode, passing them the given eventObject. This\ndoes not perform actual capture/bubble. Only implementors of the\ninterface should be using this.</p>\n"}]},"8":{"1":"goog.events.EventTarget","3":{"1":"goog.events.EventTarget.html#fireListeners"}}},"2":["EVENTOBJ"],"4":[{"1":"type","2":{"6":{"1":[{"4":{"1":"string","4":true}},{"4":{"1":"goog.events.EventId","3":{"1":"goog.events.EventId.html"},"5":[{"6":{"1":[{"4":{"1":"EVENTOBJ"}},{"10":true}]}}]}}]}},"3":{"1":[{"2":"<p>The type of the\nlisteners to fire.</p>\n"}]}},{"1":"capture","2":{"4":{"1":"boolean","4":true}},"3":{"1":[{"2":"<p>The capture mode of the listeners to fire.</p>\n"}]}},{"1":"eventObject","2":{"6":{"1":[{"4":{"1":"EVENTOBJ"}},{"10":true}]}},"3":{"1":[{"2":"<p>The event object to fire.</p>\n"}]}}],"5":{"2":{"4":{"1":"boolean","4":true}},"3":{"1":[{"2":"<p>Whether all listeners succeeded without\nattempting to prevent default behavior. If any listener returns\nfalse or called goog.events.Event#preventDefault, this returns\nfalse.</p>\n"}]}}},{"1":{"1":"getCurrentEventTarget","2":{"1":"closure/goog/editor/plugins/undoredo.js","2":222,"3":"https://github.com/google/closure-library/blob/master/closure/goog/editor/plugins/undoredo.js#L222"},"3":{"1":[{"2":"<p>This is so subclasses can deal with multifield undo-redo.</p>\n"}]}},"5":{"2":{"6":{"1":[{"4":{"1":"goog.editor.Field","3":{"1":"goog.editor.Field.html"}}},{"10":true}]}},"3":{"1":[{"2":"<p>Target for COMMAND_VALUE_CHANGE events.</p>\n"}]}}},{"1":{"1":"getCurrentFieldObject","2":{"1":"closure/goog/editor/plugins/undoredo.js","2":201,"3":"https://github.com/google/closure-library/blob/master/closure/goog/editor/plugins/undoredo.js#L201"},"3":{"1":[{"2":"<p>This is so subclasses can deal with multifield undo-redo.</p>\n"}]}},"5":{"2":{"6":{"1":[{"4":{"1":"goog.editor.Field","3":{"1":"goog.editor.Field.html"}}},{"10":true}]}},"3":{"1":[{"2":"<p>The active field object for this field. This is\nthe one registered field object for the single-plugin case and the\nfocused field for the multi-field plugin case.</p>\n"}]}}},{"1":{"1":"getDisposed","2":{"1":"closure/goog/disposable/disposable.js","2":163,"3":"https://github.com/google/closure-library/blob/master/closure/goog/disposable/disposable.js#L163"},"3":{},"4":{"1":[{"2":"<p>Use <a href=\"goog.editor.plugins.UndoRedo.html#isDisposed\"><code>#isDisposed</code></a> instead.</p>\n"}]},"6":{"2":true},"7":{"1":"goog.Disposable","3":{"1":"goog.Disposable.html#getDisposed"}}},"5":{"2":{"4":{"1":"boolean","4":true}},"3":{"1":[{"2":"<p>Whether the object has been disposed of.</p>\n"}]}}},{"1":{"1":"getFieldDomHelper","2":{"1":"closure/goog/editor/plugin.js","2":83,"3":"https://github.com/google/closure-library/blob/master/closure/goog/editor/plugin.js#L83"},"3":{},"7":{"1":"goog.editor.Plugin","3":{"1":"goog.editor.Plugin.html#getFieldDomHelper"}}},"5":{"2":{"6":{"1":[{"4":{"1":"goog.dom.DomHelper","3":{"1":"goog.dom.DomHelper.html"}}},{"10":true}]}},"3":{"1":[{"2":"<p>The dom helper object associated with the\ncurrently active field.</p>\n"}]}}},{"1":{"1":"getFieldObject","2":{"1":"closure/goog/editor/plugin.js","2":94,"3":"https://github.com/google/closure-library/blob/master/closure/goog/editor/plugin.js#L94"},"3":{"1":[{"2":"<p>Sets the field object for use with this plugin.</p>\n"}]},"5":1,"7":{"1":"goog.editor.Plugin","3":{"1":"goog.editor.Plugin.html#getFieldObject"}}},"5":{"2":{"6":{"1":[{"4":{"1":"goog.editor.Field","3":{"1":"goog.editor.Field.html"}}},{"10":true}]}},"3":{"1":[{"2":"<p>The editable field object.</p>\n"}]}}},{"1":{"1":"getFieldObjectForHash","2":{"1":"closure/goog/editor/plugins/undoredo.js","2":211,"3":"https://github.com/google/closure-library/blob/master/closure/goog/editor/plugins/undoredo.js#L211"},"3":{"1":[{"2":"<p>This is so subclasses can deal with multifield undo-redo.</p>\n"}]}},"4":[{"1":"fieldHashCode","2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>The Field&#39;s hashcode.</p>\n"}]}}],"5":{"2":{"6":{"1":[{"4":{"1":"goog.editor.Field","3":{"1":"goog.editor.Field.html"}}},{"10":true}]}},"3":{"1":[{"2":"<p>The field object with the hashcode.</p>\n"}]}}},{"1":{"1":"getListener","2":{"1":"closure/goog/events/listenable.js","2":255,"3":"https://github.com/google/closure-library/blob/master/closure/goog/events/listenable.js#L255"},"3":{"1":[{"2":"<p>Gets the goog.events.ListenableKey for the event or null if no such\nlistener is in use.</p>\n"}]},"8":{"1":"goog.events.EventTarget","3":{"1":"goog.events.EventTarget.html#getListener"}}},"2":["SCOPE","EVENTOBJ"],"4":[{"1":"type","2":{"6":{"1":[{"4":{"1":"string","4":true}},{"4":{"1":"goog.events.EventId","3":{"1":"goog.events.EventId.html"},"5":[{"6":{"1":[{"4":{"1":"EVENTOBJ"}},{"10":true}]}}]}}]}},"3":{"1":[{"2":"<p>The name of the event\nwithout the &#39;on&#39; prefix.</p>\n"}]}},{"1":"listener","2":{"3":{"2":{"6":{"1":[{"4":{"1":"SCOPE"}},{"10":true}]}},"3":[{"6":{"1":[{"4":{"1":"EVENTOBJ"}},{"10":true}]}}],"4":{"6":{"1":[{"4":{"1":"boolean","4":true}},{"9":true}]}}}},"3":{"1":[{"2":"<p>The\nlistener function to get.</p>\n"}]}},{"1":"capture","2":{"4":{"1":"boolean","4":true}},"3":{"1":[{"2":"<p>Whether the listener is a capturing listener.</p>\n"}]}},{"1":"opt_listenerScope","2":{"1":true,"6":{"1":[{"4":{"1":"SCOPE"}},{"10":true},{"9":true}]}},"3":{"1":[{"2":"<p>Object in whose scope to call the\nlistener.</p>\n"}]}}],"5":{"2":{"6":{"1":[{"4":{"1":"goog.events.ListenableKey","3":{"1":"goog.events.ListenableKey.html"}}},{"10":true}]}},"3":{"1":[{"2":"<p>the found listener or null if not found.</p>\n"}]}}},{"1":{"1":"getListeners","2":{"1":"closure/goog/events/listenable.js","2":238,"3":"https://github.com/google/closure-library/blob/master/closure/goog/events/listenable.js#L238"},"3":{"1":[{"2":"<p>Gets all listeners in this listenable for the given type and\ncapture mode.</p>\n"}]},"8":{"1":"goog.events.EventTarget","3":{"1":"goog.events.EventTarget.html#getListeners"}}},"2":["EVENTOBJ"],"4":[{"1":"type","2":{"6":{"1":[{"4":{"1":"string","4":true}},{"4":{"1":"goog.events.EventId","3":{"1":"goog.events.EventId.html"}}}]}},"3":{"1":[{"2":"<p>The type of the listeners to fire.</p>\n"}]}},{"1":"capture","2":{"4":{"1":"boolean","4":true}},"3":{"1":[{"2":"<p>The capture mode of the listeners to fire.</p>\n"}]}}],"5":{"2":{"4":{"1":"Array","4":true,"5":[{"4":{"1":"goog.events.ListenableKey","3":{"1":"goog.events.ListenableKey.html"}}}]}},"3":{"1":[{"2":"<p>An array of registered\nlisteners.</p>\n"}]}}},{"1":{"1":"getParentEventTarget","2":{"1":"closure/goog/events/listenable.js","2":206,"3":"https://github.com/google/closure-library/blob/master/closure/goog/events/listenable.js#L206"},"3":{"1":[{"2":"<p>Returns the parent of this event target to use for capture/bubble\nmechanism.</p>\n<p>NOTE(chrishenry): The name reflects the original implementation of\ncustom event target (<code>goog.events.EventTarget</code>). We decided\nthat changing the name is not worth it.</p>\n"}]},"8":{"1":"goog.events.EventTarget","3":{"1":"goog.events.EventTarget.html#getParentEventTarget"}}},"5":{"2":{"6":{"1":[{"4":{"1":"goog.events.Listenable","3":{"1":"goog.events.Listenable.html"}}},{"10":true}]}},"3":{"1":[{"2":"<p>The parent EventTarget or null if\nthere is no parent.</p>\n"}]}}},{"1":{"1":"getTrogClassId","2":{"1":"closure/goog/editor/plugins/undoredo.js","2":336,"3":"https://github.com/google/closure-library/blob/master/closure/goog/editor/plugins/undoredo.js#L336"},"3":{},"8":{"1":"goog.editor.Plugin","3":{"1":"goog.editor.Plugin.html#getTrogClassId"}}},"5":{"2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>The ID unique to this plugin class. Note that different\ninstances off the plugin share the same classId.</p>\n"}]}}},{"1":{"1":"handleKeyDown","2":{"1":"closure/goog/editor/plugin.js","2":279,"3":"https://github.com/google/closure-library/blob/master/closure/goog/editor/plugin.js#L279"},"3":{"1":[{"2":"<p>Handles keydown. It is run before handleKeyboardShortcut and if it returns\ntrue handleKeyboardShortcut will not be called.</p>\n"}]},"7":{"1":"goog.editor.Plugin","3":{"1":"goog.editor.Plugin.html#handleKeyDown"}}},"4":[{"1":"e","2":{"4":{"1":"goog.events.BrowserEvent","3":{"1":"goog.events.BrowserEvent.html"}}},"3":{"1":[{"2":"<p>The browser event.</p>\n"}]}}],"5":{"2":{"4":{"1":"boolean","4":true}},"3":{"1":[{"2":"<p>Whether the event was handled and thus should <em>not</em> be\npropagated to other plugins or handleKeyboardShortcut.</p>\n"}]}}},{"1":{"1":"handleKeyPress","2":{"1":"closure/goog/editor/plugin.js","2":289,"3":"https://github.com/google/closure-library/blob/master/closure/goog/editor/plugin.js#L289"},"3":{"1":[{"2":"<p>Handles keypress. It is run before handleKeyboardShortcut and if it returns\ntrue handleKeyboardShortcut will not be called.</p>\n"}]},"7":{"1":"goog.editor.Plugin","3":{"1":"goog.editor.Plugin.html#handleKeyPress"}}},"4":[{"1":"e","2":{"4":{"1":"goog.events.BrowserEvent","3":{"1":"goog.events.BrowserEvent.html"}}},"3":{"1":[{"2":"<p>The browser event.</p>\n"}]}}],"5":{"2":{"4":{"1":"boolean","4":true}},"3":{"1":[{"2":"<p>Whether the event was handled and thus should <em>not</em> be\npropagated to other plugins or handleKeyboardShortcut.</p>\n"}]}}},{"1":{"1":"handleKeyUp","2":{"1":"closure/goog/editor/plugin.js","2":298,"3":"https://github.com/google/closure-library/blob/master/closure/goog/editor/plugin.js#L298"},"3":{"1":[{"2":"<p>Handles keyup.</p>\n"}]},"7":{"1":"goog.editor.Plugin","3":{"1":"goog.editor.Plugin.html#handleKeyUp"}}},"4":[{"1":"e","2":{"4":{"1":"goog.events.BrowserEvent","3":{"1":"goog.events.BrowserEvent.html"}}},"3":{"1":[{"2":"<p>The browser event.</p>\n"}]}}],"5":{"2":{"4":{"1":"boolean","4":true}},"3":{"1":[{"2":"<p>Whether the event was handled and thus should <em>not</em> be\npropagated to other plugins.</p>\n"}]}}},{"1":{"1":"handleKeyboardShortcut","2":{"1":"closure/goog/editor/plugins/undoredo.js","2":456,"3":"https://github.com/google/closure-library/blob/master/closure/goog/editor/plugins/undoredo.js#L456"},"3":{"1":[{"2":"<p>Handles keyboard shortcuts.  Preferred to using handleKey* as it will use\nthe proper event based on browser and will be more performant. If\nhandleKeyPress/handleKeyDown returns true, this will not be called. If the\nplugin handles the shortcut, it is responsible for dispatching appropriate\nevents (change, selection change at the time of this comment). If the plugin\ncalls execCommand on the editable field, then execCommand already takes care\nof dispatching events.\nNOTE: For performance reasons this is only called when any key is pressed\nin conjunction with ctrl/meta keys OR when a small subset of keys (defined\nin goog.editor.Field.POTENTIAL_SHORTCUT_KEYCODES_) are pressed without\nctrl/meta keys. We specifically don&#39;t invoke it when altKey is pressed since\nalt key is used in many i8n UIs to enter certain characters.</p>\n"}]},"8":{"1":"goog.editor.Plugin","3":{"1":"goog.editor.Plugin.html#handleKeyboardShortcut"}}},"4":[{"1":"e","2":{"4":{"1":"goog.events.BrowserEvent","3":{"1":"goog.events.BrowserEvent.html"}}},"3":{"1":[{"2":"<p>The browser event.</p>\n"}]}},{"1":"key","2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>The key pressed.</p>\n"}]}},{"1":"isModifierPressed","2":{"4":{"1":"boolean","4":true}},"3":{"1":[{"2":"<p>Whether the ctrl/meta key was pressed or\nnot.</p>\n"}]}}],"5":{"2":{"4":{"1":"boolean","4":true}},"3":{"1":[{"2":"<p>Whether the event was handled and thus should <em>not</em> be\npropagated to other plugins. We also call preventDefault on the event if\nthe return value is true.</p>\n"}]}}},{"1":{"1":"handleSelectionChange","2":{"1":"closure/goog/editor/plugin.js","2":308,"3":"https://github.com/google/closure-library/blob/master/closure/goog/editor/plugin.js#L308"},"3":{"1":[{"2":"<p>Handles selection change.</p>\n"}]},"7":{"1":"goog.editor.Plugin","3":{"1":"goog.editor.Plugin.html#handleSelectionChange"}}},"4":[{"1":"opt_e","2":{"1":true,"6":{"1":[{"4":{"1":"goog.events.BrowserEvent","3":{"1":"goog.events.BrowserEvent.html"}}},{"9":true}]}},"3":{"1":[{"2":"<p>The browser event.</p>\n"}]}},{"1":"opt_target","2":{"1":true,"6":{"1":[{"4":{"1":"Node"}},{"9":true}]}},"3":{"1":[{"2":"<p>The node the selection changed to.</p>\n"}]}}],"5":{"2":{"4":{"1":"boolean","4":true}},"3":{"1":[{"2":"<p>Whether the event was handled and thus should <em>not</em> be\npropagated to other plugins.</p>\n"}]}}},{"1":{"1":"hasListener","2":{"1":"closure/goog/events/listenable.js","2":270,"3":"https://github.com/google/closure-library/blob/master/closure/goog/events/listenable.js#L270"},"3":{"1":[{"2":"<p>Whether there is any active listeners matching the specified\nsignature. If either the type or capture parameters are\nunspecified, the function will match on the remaining criteria.</p>\n"}]},"8":{"1":"goog.events.EventTarget","3":{"1":"goog.events.EventTarget.html#hasListener"}}},"2":["EVENTOBJ"],"4":[{"1":"opt_type","2":{"1":true,"6":{"1":[{"4":{"1":"string","4":true}},{"4":{"1":"goog.events.EventId","3":{"1":"goog.events.EventId.html"},"5":[{"6":{"1":[{"4":{"1":"EVENTOBJ"}},{"10":true}]}}]}},{"9":true}]}},"3":{"1":[{"2":"<p>Event type.</p>\n"}]}},{"1":"opt_capture","2":{"1":true,"6":{"1":[{"4":{"1":"boolean","4":true}},{"9":true}]}},"3":{"1":[{"2":"<p>Whether to check for capture or bubble\nlisteners.</p>\n"}]}}],"5":{"2":{"4":{"1":"boolean","4":true}},"3":{"1":[{"2":"<p>Whether there is any active listeners matching\nthe requested type and/or capture phase.</p>\n"}]}}},{"1":{"1":"isAutoDispose","2":{"1":"closure/goog/editor/plugin.js","2":188,"3":"https://github.com/google/closure-library/blob/master/closure/goog/editor/plugin.js#L188"},"3":{},"7":{"1":"goog.editor.Plugin","3":{"1":"goog.editor.Plugin.html#isAutoDispose"}}},"5":{"2":{"4":{"1":"boolean","4":true}},"3":{"1":[{"2":"<p>Whether or not this plugin should automatically be disposed\nwhen it&#39;s registered field is disposed.</p>\n"}]}}},{"1":{"1":"isDisposed","2":{"1":"closure/goog/disposable/idisposable.js","2":45,"3":"https://github.com/google/closure-library/blob/master/closure/goog/disposable/idisposable.js#L45"},"3":{},"8":{"1":"goog.Disposable","3":{"1":"goog.Disposable.html#isDisposed"}}},"5":{"2":{"4":{"1":"boolean","4":true}},"3":{"1":[{"2":"<p>Whether the object has been disposed of.</p>\n"}]}}},{"1":{"1":"isEnabled","2":{"1":"closure/goog/editor/plugins/undoredo.js","2":311,"3":"https://github.com/google/closure-library/blob/master/closure/goog/editor/plugins/undoredo.js#L311"},"3":{"1":[{"2":"<p>Returns whether this plugin is enabled for the field object.</p>\n"}]},"8":{"1":"goog.editor.Plugin","3":{"1":"goog.editor.Plugin.html#isEnabled"}}},"4":[{"1":"fieldObject","2":{"6":{"1":[{"4":{"1":"goog.editor.Field","3":{"1":"goog.editor.Field.html"}}},{"10":true}]}},"3":{"1":[{"2":"<p>The field object.</p>\n"}]}}],"5":{"2":{"4":{"1":"boolean","4":true}},"3":{"1":[{"2":"<p>Whether this plugin is enabled for the field object.</p>\n"}]}}},{"1":{"1":"isSilentCommand","2":{"1":"closure/goog/editor/plugin.js","2":206,"3":"https://github.com/google/closure-library/blob/master/closure/goog/editor/plugin.js#L206"},"3":{},"7":{"1":"goog.editor.Plugin","3":{"1":"goog.editor.Plugin.html#isSilentCommand"}}},"4":[{"1":"command","2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>The command to check.</p>\n"}]}}],"5":{"2":{"4":{"1":"boolean","4":true}},"3":{"1":[{"2":"<p>If true, field will not dispatch change events\nfor commands of this type. This is useful for &#34;seamless&#34; plugins like\ndialogs and lorem ipsum.</p>\n"}]}}},{"1":{"1":"isSupportedCommand","2":{"1":"closure/goog/editor/plugins/undoredo.js","2":173,"3":"https://github.com/google/closure-library/blob/master/closure/goog/editor/plugins/undoredo.js#L173"},"3":{"1":[{"2":"<p>Whether the string corresponds to a command this plugin handles.</p>\n"}]},"8":{"1":"goog.editor.Plugin","3":{"1":"goog.editor.Plugin.html#isSupportedCommand"}}},"4":[{"1":"command","2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>Command string to check.</p>\n"}]}}],"5":{"2":{"4":{"1":"boolean","4":true}},"3":{"1":[{"2":"<p>Whether the string corresponds to a command\nthis plugin handles.</p>\n"}]}}},{"1":{"1":"listen","2":{"1":"closure/goog/events/listenable.js","2":113,"3":"https://github.com/google/closure-library/blob/master/closure/goog/events/listenable.js#L113"},"3":{"1":[{"2":"<p>Adds an event listener. A listener can only be added once to an\nobject and if it is added again the key for the listener is\nreturned. Note that if the existing listener is a one-off listener\n(registered via listenOnce), it will no longer be a one-off\nlistener after a call to listen().</p>\n"}]},"8":{"1":"goog.events.EventTarget","3":{"1":"goog.events.EventTarget.html#listen"}}},"2":["SCOPE","EVENTOBJ"],"4":[{"1":"type","2":{"6":{"1":[{"4":{"1":"string","4":true}},{"4":{"1":"goog.events.EventId","3":{"1":"goog.events.EventId.html"},"5":[{"6":{"1":[{"4":{"1":"EVENTOBJ"}},{"10":true}]}}]}}]}},"3":{"1":[{"2":"<p>The event type id.</p>\n"}]}},{"1":"listener","2":{"3":{"2":{"6":{"1":[{"4":{"1":"SCOPE"}},{"10":true}]}},"3":[{"6":{"1":[{"4":{"1":"EVENTOBJ"}},{"10":true}]}}],"4":{"6":{"1":[{"4":{"1":"boolean","4":true}},{"9":true}]}}}},"3":{"1":[{"2":"<p>Callback\nmethod.</p>\n"}]}},{"1":"opt_useCapture","2":{"1":true,"6":{"1":[{"4":{"1":"boolean","4":true}},{"9":true}]}},"3":{"1":[{"2":"<p>Whether to fire in capture phase\n(defaults to false).</p>\n"}]}},{"1":"opt_listenerScope","2":{"1":true,"6":{"1":[{"4":{"1":"SCOPE"}},{"10":true},{"9":true}]}},"3":{"1":[{"2":"<p>Object in whose scope to call the\nlistener.</p>\n"}]}}],"5":{"2":{"4":{"1":"goog.events.ListenableKey","3":{"1":"goog.events.ListenableKey.html"}}},"3":{"1":[{"2":"<p>Unique key for the listener.</p>\n"}]}}},{"1":{"1":"listenOnce","2":{"1":"closure/goog/events/listenable.js","2":137,"3":"https://github.com/google/closure-library/blob/master/closure/goog/events/listenable.js#L137"},"3":{"1":[{"2":"<p>Adds an event listener that is removed automatically after the\nlistener fired once.</p>\n<p>If an existing listener already exists, listenOnce will do\nnothing. In particular, if the listener was previously registered\nvia listen(), listenOnce() will not turn the listener into a\none-off listener. Similarly, if there is already an existing\none-off listener, listenOnce does not modify the listeners (it is\nstill a once listener).</p>\n"}]},"8":{"1":"goog.events.EventTarget","3":{"1":"goog.events.EventTarget.html#listenOnce"}}},"2":["SCOPE","EVENTOBJ"],"4":[{"1":"type","2":{"6":{"1":[{"4":{"1":"string","4":true}},{"4":{"1":"goog.events.EventId","3":{"1":"goog.events.EventId.html"},"5":[{"6":{"1":[{"4":{"1":"EVENTOBJ"}},{"10":true}]}}]}}]}},"3":{"1":[{"2":"<p>The event type id.</p>\n"}]}},{"1":"listener","2":{"3":{"2":{"6":{"1":[{"4":{"1":"SCOPE"}},{"10":true}]}},"3":[{"6":{"1":[{"4":{"1":"EVENTOBJ"}},{"10":true}]}}],"4":{"6":{"1":[{"4":{"1":"boolean","4":true}},{"9":true}]}}}},"3":{"1":[{"2":"<p>Callback\nmethod.</p>\n"}]}},{"1":"opt_useCapture","2":{"1":true,"6":{"1":[{"4":{"1":"boolean","4":true}},{"9":true}]}},"3":{"1":[{"2":"<p>Whether to fire in capture phase\n(defaults to false).</p>\n"}]}},{"1":"opt_listenerScope","2":{"1":true,"6":{"1":[{"4":{"1":"SCOPE"}},{"10":true},{"9":true}]}},"3":{"1":[{"2":"<p>Object in whose scope to call the\nlistener.</p>\n"}]}}],"5":{"2":{"4":{"1":"goog.events.ListenableKey","3":{"1":"goog.events.ListenableKey.html"}}},"3":{"1":[{"2":"<p>Unique key for the listener.</p>\n"}]}}},{"1":{"1":"prepareContentsHtml","2":{"1":"closure/goog/editor/plugin.js","2":425,"3":"https://github.com/google/closure-library/blob/master/closure/goog/editor/plugin.js#L425"},"3":{"1":[{"2":"<p>Prepares the given HTML for editing. Strips out content that should not\nappear in an editor, and normalizes content as appropriate. The inverse\nof cleanContentsHtml.</p>\n<p>This op is invoked even on disabled plugins.</p>\n"}]},"7":{"1":"goog.editor.Plugin","3":{"1":"goog.editor.Plugin.html#prepareContentsHtml"}}},"4":[{"1":"originalHtml","2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>The original HTML.</p>\n"}]}},{"1":"styles","2":{"6":{"1":[{"4":{"1":"Object","4":true}},{"10":true}]}},"3":{"1":[{"2":"<p>A map of strings. If the plugin wants to add\nany styles to the field element, it should add them as key-value\npairs to this object.</p>\n"}]}}],"5":{"2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>New HTML that&#39;s ok for editing.</p>\n"}]}}},{"1":{"1":"queryCommandValue","2":{"1":"closure/goog/editor/plugins/undoredo.js","2":353,"3":"https://github.com/google/closure-library/blob/master/closure/goog/editor/plugins/undoredo.js#L353"},"3":{"1":[{"2":"<p>Gets the state of this command if this plugin serves that command.</p>\n"}]},"8":{"1":"goog.editor.Plugin","3":{"1":"goog.editor.Plugin.html#queryCommandValue"}}},"4":[{"1":"command","2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>The command to check.</p>\n"}]}}],"5":{"2":{"7":true},"3":{"1":[{"2":"<p>The value of the command.</p>\n"}]}}},{"1":{"1":"refreshCurrentState","2":{"1":"closure/goog/editor/plugins/undoredo.js","2":508,"3":"https://github.com/google/closure-library/blob/master/closure/goog/editor/plugins/undoredo.js#L508"},"3":{"1":[{"2":"<p>Refreshes the current state of the editable field as maintained by undo-redo,\nwithout adding any undo-redo states to the stack.</p>\n"}]}},"4":[{"1":"fieldObject","2":{"6":{"1":[{"4":{"1":"goog.editor.Field","3":{"1":"goog.editor.Field.html"}}},{"10":true}]}},"3":{"1":[{"2":"<p>The editable field.</p>\n"}]}}]},{"1":{"1":"registerDisposable","2":{"1":"closure/goog/disposable/disposable.js","2":203,"3":"https://github.com/google/closure-library/blob/master/closure/goog/disposable/disposable.js#L203"},"3":{"1":[{"2":"<p>Associates a disposable object with this object so that they will be disposed\ntogether.</p>\n"}]},"7":{"1":"goog.Disposable","3":{"1":"goog.Disposable.html#registerDisposable"}}},"4":[{"1":"disposable","2":{"6":{"1":[{"4":{"1":"goog.disposable.IDisposable","3":{"1":"goog.disposable.IDisposable.html"}}},{"10":true}]}},"3":{"1":[{"2":"<p>that will be disposed when\nthis object is disposed.</p>\n"}]}}]},{"1":{"1":"registerFieldObject","2":{"1":"closure/goog/editor/plugin.js","2":114,"3":"https://github.com/google/closure-library/blob/master/closure/goog/editor/plugin.js#L114"},"3":{"1":[{"2":"<p>Registers the field object for use with this plugin.</p>\n"}]},"7":{"1":"goog.editor.Plugin","3":{"1":"goog.editor.Plugin.html#registerFieldObject"}}},"4":[{"1":"fieldObject","2":{"6":{"1":[{"4":{"1":"goog.editor.Field","3":{"1":"goog.editor.Field.html"}}},{"10":true}]}},"3":{"1":[{"2":"<p>The editable field object.</p>\n"}]}}]},{"1":{"1":"removeAllListeners","2":{"1":"closure/goog/events/listenable.js","2":192,"3":"https://github.com/google/closure-library/blob/master/closure/goog/events/listenable.js#L192"},"3":{"1":[{"2":"<p>Removes all listeners from this listenable. If type is specified,\nit will only remove listeners of the particular type. otherwise all\nregistered listeners will be removed.</p>\n"}]},"8":{"1":"goog.events.EventTarget","3":{"1":"goog.events.EventTarget.html#removeAllListeners"}}},"4":[{"1":"opt_type","2":{"1":true,"6":{"1":[{"4":{"1":"string","4":true}},{"9":true}]}},"3":{"1":[{"2":"<p>Type of event to remove, default is to\nremove all types.</p>\n"}]}}],"5":{"2":{"4":{"1":"number","4":true}},"3":{"1":[{"2":"<p>Number of listeners removed.</p>\n"}]}}},{"1":{"1":"removeEventListener","2":{"1":"closure/goog/events/eventtarget.js","2":174,"3":"https://github.com/google/closure-library/blob/master/closure/goog/events/eventtarget.js#L174"},"3":{"1":[{"2":"<p>Removes an event listener from the event target. The handler must be the\nsame object as the one added. If the handler has not been added then\nnothing is done.</p>\n"}]},"4":{"1":[{"2":"<p>Use <code>#unlisten</code> instead, when possible. Otherwise, use\n<code>goog.events.unlisten</code> if you are passing Object\n(instead of Function) as handler.</p>\n"}]},"6":{"2":true},"7":{"1":"goog.events.EventTarget","3":{"1":"goog.events.EventTarget.html#removeEventListener"}}},"4":[{"1":"type","2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>The type of the event to listen for.</p>\n"}]}},{"1":"handler","2":{"6":{"1":[{"3":{"3":[{"8":true}],"4":{"8":true}}},{"5":{"1":[{"1":"handleEvent","2":{"3":{"3":[{"8":true}],"4":{"8":true}}}}]}},{"10":true}]}},"3":{"1":[{"2":"<p>The function\nto handle the event. The handler can also be an object that implements\nthe handleEvent method which takes the event object as argument.</p>\n"}]}},{"1":"opt_capture","2":{"1":true,"6":{"1":[{"4":{"1":"boolean","4":true}},{"9":true}]}},"3":{"1":[{"2":"<p>In DOM-compliant browsers, this determines\nwhether the listener is fired during the capture or bubble phase\nof the event.</p>\n"}]}},{"1":"opt_handlerScope","2":{"1":true,"6":{"1":[{"4":{"1":"Object","4":true}},{"10":true},{"9":true}]}},"3":{"1":[{"2":"<p>Object in whose scope to call\nthe listener.</p>\n"}]}}]},{"1":{"1":"restoreState","2":{"1":"closure/goog/editor/plugins/undoredo.js","2":392,"3":"https://github.com/google/closure-library/blob/master/closure/goog/editor/plugins/undoredo.js#L392"},"3":{"1":[{"2":"<p>Restores the state of the editable field.</p>\n"}]}},"4":[{"1":"state","2":{"6":{"1":[{"4":{"1":"goog.editor.plugins.UndoRedo.UndoState_","3":{"1":"goog.editor.plugins.UndoRedo.UndoState_.html"}}},{"10":true}]}},"3":{"1":[{"2":"<p>The state initiating\nthe restore.</p>\n"}]}},{"1":"content","2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>The content to restore.</p>\n"}]}},{"1":"cursorPosition","2":{"6":{"1":[{"4":{"1":"goog.editor.plugins.UndoRedo.CursorPosition_","3":{"1":"goog.editor.plugins.UndoRedo.CursorPosition_.html"}}},{"10":true}]}},"3":{"1":[{"2":"<p>The cursor position within the content.</p>\n"}]}}]},{"1":{"1":"saveScrollPosition","2":{"1":"closure/goog/editor/plugin.js","2":472,"3":"https://github.com/google/closure-library/blob/master/closure/goog/editor/plugin.js#L472"},"3":{"1":[{"2":"<p>Saves the field&#39;s scroll position.  See b/7279077 for context.\nCurrently only does anything in Edge, since all other browsers\nalready seem to work correctly.</p>\n"}]},"5":1,"7":{"1":"goog.editor.Plugin","3":{"1":"goog.editor.Plugin.html#saveScrollPosition"}}},"5":{"2":{"3":{"4":{"8":true}}},"3":{"1":[{"2":"<p>A function to restore the current scroll position.</p>\n"}]}}},{"1":{"1":"setAutoDispose","2":{"1":"closure/goog/editor/plugin.js","2":179,"3":"https://github.com/google/closure-library/blob/master/closure/goog/editor/plugin.js#L179"},"3":{"1":[{"2":"<p>Set if this plugin should automatically be disposed when the registered\nfield is disposed.</p>\n"}]},"7":{"1":"goog.editor.Plugin","3":{"1":"goog.editor.Plugin.html#setAutoDispose"}}},"4":[{"1":"autoDispose","2":{"4":{"1":"boolean","4":true}},"3":{"1":[{"2":"<p>Whether to autoDispose.</p>\n"}]}}]},{"1":{"1":"setFieldObject","2":{"1":"closure/goog/editor/plugin.js","2":105,"3":"https://github.com/google/closure-library/blob/master/closure/goog/editor/plugin.js#L105"},"3":{"1":[{"2":"<p>Sets the field object for use with this plugin.</p>\n"}]},"5":1,"7":{"1":"goog.editor.Plugin","3":{"1":"goog.editor.Plugin.html#setFieldObject"}}},"4":[{"1":"fieldObject","2":{"6":{"1":[{"4":{"1":"goog.editor.Field","3":{"1":"goog.editor.Field.html"}}},{"10":true}]}},"3":{"1":[{"2":"<p>The editable field object.</p>\n"}]}}]},{"1":{"1":"setMaxUndoDepth","2":{"1":"closure/goog/editor/plugins/undoredo.js","2":143,"3":"https://github.com/google/closure-library/blob/master/closure/goog/editor/plugins/undoredo.js#L143"},"3":{"1":[{"2":"<p>Set the max undo stack depth (not the real memory usage).</p>\n"}]}},"4":[{"1":"depth","2":{"4":{"1":"number","4":true}},"3":{"1":[{"2":"<p>Depth of the stack.</p>\n"}]}}]},{"1":{"1":"setParentEventTarget","2":{"1":"closure/goog/events/eventtarget.js","2":126,"3":"https://github.com/google/closure-library/blob/master/closure/goog/events/eventtarget.js#L126"},"3":{"1":[{"2":"<p>Sets the parent of this event target to use for capture/bubble\nmechanism.</p>\n"}]},"7":{"1":"goog.events.EventTarget","3":{"1":"goog.events.EventTarget.html#setParentEventTarget"}}},"4":[{"1":"parent","2":{"6":{"1":[{"4":{"1":"goog.events.EventTarget","3":{"1":"goog.events.EventTarget.html"}}},{"10":true}]}},"3":{"1":[{"2":"<p>Parent listenable (null if none).</p>\n"}]}}]},{"1":{"1":"setTargetForTesting","2":{"1":"closure/goog/events/eventtarget.js","2":320,"3":"https://github.com/google/closure-library/blob/master/closure/goog/events/eventtarget.js#L320"},"3":{"1":[{"2":"<p>Sets the target to be used for <code>event.target</code> when firing\nevent. Mainly used for testing. For example, see\n<code>goog.testing.events.mixinListenable</code>.</p>\n"}]},"7":{"1":"goog.events.EventTarget","3":{"1":"goog.events.EventTarget.html#setTargetForTesting"}}},"4":[{"1":"target","2":{"4":{"1":"Object","4":true}},"3":{"1":[{"2":"<p>The target.</p>\n"}]}}]},{"1":{"1":"setUndoRedoManager","2":{"1":"closure/goog/editor/plugins/undoredo.js","2":153,"3":"https://github.com/google/closure-library/blob/master/closure/goog/editor/plugins/undoredo.js#L153"},"3":{"1":[{"2":"<p>Set the undo-redo manager used by this plugin. Any state on a previous\nundo-redo manager is lost.</p>\n"}]}},"4":[{"1":"manager","2":{"6":{"1":[{"4":{"1":"goog.editor.plugins.UndoRedoManager","3":{"1":"goog.editor.plugins.UndoRedoManager.html"}}},{"10":true}]}},"3":{"1":[{"2":"<p>The undo-redo manager.</p>\n"}]}}]},{"1":{"1":"unlisten","2":{"1":"closure/goog/events/listenable.js","2":153,"3":"https://github.com/google/closure-library/blob/master/closure/goog/events/listenable.js#L153"},"3":{"1":[{"2":"<p>Removes an event listener which was added with listen() or listenOnce().</p>\n"}]},"8":{"1":"goog.events.EventTarget","3":{"1":"goog.events.EventTarget.html#unlisten"}}},"2":["SCOPE","EVENTOBJ"],"4":[{"1":"type","2":{"6":{"1":[{"4":{"1":"string","4":true}},{"4":{"1":"goog.events.EventId","3":{"1":"goog.events.EventId.html"},"5":[{"6":{"1":[{"4":{"1":"EVENTOBJ"}},{"10":true}]}}]}}]}},"3":{"1":[{"2":"<p>The event type id.</p>\n"}]}},{"1":"listener","2":{"3":{"2":{"6":{"1":[{"4":{"1":"SCOPE"}},{"10":true}]}},"3":[{"6":{"1":[{"4":{"1":"EVENTOBJ"}},{"10":true}]}}],"4":{"6":{"1":[{"4":{"1":"boolean","4":true}},{"9":true}]}}}},"3":{"1":[{"2":"<p>Callback\nmethod.</p>\n"}]}},{"1":"opt_useCapture","2":{"1":true,"6":{"1":[{"4":{"1":"boolean","4":true}},{"9":true}]}},"3":{"1":[{"2":"<p>Whether to fire in capture phase\n(defaults to false).</p>\n"}]}},{"1":"opt_listenerScope","2":{"1":true,"6":{"1":[{"4":{"1":"SCOPE"}},{"10":true},{"9":true}]}},"3":{"1":[{"2":"<p>Object in whose scope to call\nthe listener.</p>\n"}]}}],"5":{"2":{"4":{"1":"boolean","4":true}},"3":{"1":[{"2":"<p>Whether any listener was removed.</p>\n"}]}}},{"1":{"1":"unlistenByKey","2":{"1":"closure/goog/events/listenable.js","2":164,"3":"https://github.com/google/closure-library/blob/master/closure/goog/events/listenable.js#L164"},"3":{"1":[{"2":"<p>Removes an event listener which was added with listen() by the key\nreturned by listen().</p>\n"}]},"8":{"1":"goog.events.EventTarget","3":{"1":"goog.events.EventTarget.html#unlistenByKey"}}},"4":[{"1":"key","2":{"4":{"1":"goog.events.ListenableKey","3":{"1":"goog.events.ListenableKey.html"}}},"3":{"1":[{"2":"<p>The key returned by\nlisten() or listenOnce().</p>\n"}]}}],"5":{"2":{"4":{"1":"boolean","4":true}},"3":{"1":[{"2":"<p>Whether any listener was removed.</p>\n"}]}}},{"1":{"1":"unregisterFieldObject","2":{"1":"closure/goog/editor/plugins/undoredo.js","2":188,"3":"https://github.com/google/closure-library/blob/master/closure/goog/editor/plugins/undoredo.js#L188"},"3":{"1":[{"2":"<p>Unregisters and disables the fieldObject with this plugin. Thie does <em>not</em>\nclobber the undo stack for the fieldObject though.\nTODO(user): For the multifield version, we really should add a way to\nignore undo actions on field&#39;s that have been made uneditable.\nThis is probably as simple as skipping over entries in the undo stack\nthat have a hashcode of an uneditable field.</p>\n"}]},"8":{"1":"goog.editor.Plugin","3":{"1":"goog.editor.Plugin.html#unregisterFieldObject"}}},"4":[{"1":"fieldObject","2":{"6":{"1":[{"4":{"1":"goog.editor.Field","3":{"1":"goog.editor.Field.html"}}},{"10":true}]}},"3":{"1":[{"2":"<p>The field to register with the plugin.</p>\n"}]}}]}],"16":[{"1":{"1":"creationStack","2":{"1":"closure/goog/disposable/disposable.js","2":147,"3":"https://github.com/google/closure-library/blob/master/closure/goog/disposable/disposable.js#L147"},"3":{"1":[{"2":"<p>If monitoring the goog.Disposable instances is enabled, stores the creation\nstack trace of the Disposable instance.</p>\n"}]},"6":{"1":true},"7":{"1":"goog.Disposable","3":{"1":"goog.Disposable.html#creationStack"}}},"2":{"4":{"1":"string","4":true}}},{"1":{"1":"currentStates_","2":{"1":"closure/goog/editor/plugins/undoredo.js","2":61,"3":"https://github.com/google/closure-library/blob/master/closure/goog/editor/plugins/undoredo.js#L61"},"3":{}},"2":{"4":{"1":"Object","4":true}}},{"1":{"1":"eventHandlers_","2":{"1":"closure/goog/editor/plugins/undoredo.js","2":59,"3":"https://github.com/google/closure-library/blob/master/closure/goog/editor/plugins/undoredo.js#L59"},"3":{}},"2":{"4":{"1":"Object","4":true}}},{"1":{"1":"fieldObject","2":{"1":"closure/goog/editor/plugin.js","2":57,"3":"https://github.com/google/closure-library/blob/master/closure/goog/editor/plugin.js#L57"},"3":{"1":[{"2":"<p>The field object this plugin is attached to.</p>\n"}]},"4":{"1":[{"2":"<p>Use goog.editor.Plugin.getFieldObject and\ngoog.editor.Plugin.setFieldObject.</p>\n"}]},"5":1,"6":{"2":true},"7":{"1":"goog.editor.Plugin","3":{"1":"goog.editor.Plugin.html#fieldObject"}}},"2":{"6":{"1":[{"4":{"1":"goog.editor.Field","3":{"1":"goog.editor.Field.html"}}},{"10":true}]}}},{"1":{"1":"logger","2":{"1":"closure/goog/editor/plugins/undoredo.js","2":87,"3":"https://github.com/google/closure-library/blob/master/closure/goog/editor/plugins/undoredo.js#L87"},"3":{"1":[{"2":"<p>The logger for this class.</p>\n"}]},"5":1,"8":{"1":"goog.editor.Plugin","3":{"1":"goog.editor.Plugin.html#logger"}}},"2":{"6":{"1":[{"4":{"1":"goog.debug.Logger","3":{"1":"goog.debug.Logger.html"}}},{"10":true}]}}}],"18":[{"1":"goog.editor.Plugin","3":{"1":"goog.editor.Plugin.html"}},{"1":"goog.events.EventTarget","3":{"1":"goog.events.EventTarget.html"}},{"1":"goog.Disposable","3":{"1":"goog.Disposable.html"}}],"19":[{"1":"goog.disposable.IDisposable","3":{"1":"goog.disposable.IDisposable.html"}},{"1":"goog.events.Listenable","3":{"1":"goog.events.Listenable.html"}}],"21":{"1":{"1":"goog.editor.plugins.UndoRedo","3":{"1":"goog.editor.plugins.UndoRedo.html"}},"2":4},"23":"goog.editor.plugins.UndoRedo.html","24":"goog.editor.plugins.UndoRedo"}]}}