{"2":{"1":[{"1":"goog.messaging.MessageChannel","5":{"1":"closure/goog/messaging/messagechannel.js","2":41,"3":"https://github.com/google/closure-library/blob/master/closure/goog/messaging/messagechannel.js#L41"},"7":{},"8":{"5":true},"14":{"1":{"1":"MessageChannel","2":{"1":"closure/goog/messaging/messagechannel.js","2":41,"3":"https://github.com/google/closure-library/blob/master/closure/goog/messaging/messagechannel.js#L41"},"3":{}}},"15":[{"1":{"1":"connect","2":{"1":"closure/goog/messaging/messagechannel.js","2":56,"3":"https://github.com/google/closure-library/blob/master/closure/goog/messaging/messagechannel.js#L56"},"3":{"1":[{"2":"<p>Initiates the channel connection. When this method is called, all the\ninformation needed to connect the channel has to be available.</p>\n<p>Implementers should only require this method to be called if the channel\nneeds to be configured in some way between when it&#39;s created and when it\nbecomes active. Otherwise, the channel should be immediately active and this\nmethod should do nothing but immediately call opt_connectCb.</p>\n"}]}},"4":[{"1":"opt_connectCb","2":{"1":true,"6":{"1":[{"4":{"1":"Function"}},{"10":true},{"9":true}]}},"3":{"1":[{"2":"<p>Called when the channel has been connected\nand is ready to use.</p>\n"}]}}]},{"1":{"1":"isConnected","2":{"1":"closure/goog/messaging/messagechannel.js","2":68,"3":"https://github.com/google/closure-library/blob/master/closure/goog/messaging/messagechannel.js#L68"},"3":{"1":[{"2":"<p>Gets whether the channel is connected.</p>\n<p>If <a href=\"goog.messaging.MessageChannel.html#connect\"><code>#connect</code></a> is not required for this class, this should always return\ntrue. Otherwise, this should return true by the time the callback passed to\n<a href=\"goog.messaging.MessageChannel.html#connect\"><code>#connect</code></a> has been called and always after that.</p>\n"}]}},"5":{"2":{"4":{"1":"boolean","4":true}},"3":{"1":[{"2":"<p>Whether the channel is connected.</p>\n"}]}}},{"1":{"1":"registerDefaultService","2":{"1":"closure/goog/messaging/messagechannel.js","2":101,"3":"https://github.com/google/closure-library/blob/master/closure/goog/messaging/messagechannel.js#L101"},"3":{"1":[{"2":"<p>Registers a service to be called when a message is received that doesn&#39;t\nmatch any other services.</p>\n"}]}},"4":[{"1":"callback","2":{"3":{"3":[{"4":{"1":"string","4":true}},{"6":{"1":[{"4":{"1":"string","4":true}},{"4":{"1":"Object","4":true}}]}}],"4":{"8":true}}},"3":{"1":[{"2":"<p>The callback to process\nthe incoming messages. Passed the service name and the payload. Since\nsome channels can pass objects natively, the payload may be either an\nobject or a string.</p>\n"}]}}]},{"1":{"1":"registerService","2":{"1":"closure/goog/messaging/messagechannel.js","2":88,"3":"https://github.com/google/closure-library/blob/master/closure/goog/messaging/messagechannel.js#L88"},"3":{"1":[{"2":"<p>Registers a service to be called when a message is received.</p>\n<p>Implementers shouldn&#39;t impose any restrictions on the service names that may\nbe registered. If some services are needed as control codes,\n<a href=\"goog.messaging.html\"><code>goog.messaging.MultiMessageChannel</code></a> can be used to safely split the\nchannel into &#34;public&#34; and &#34;control&#34; virtual channels.</p>\n"}]}},"4":[{"1":"serviceName","2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>The name of the service.</p>\n"}]}},{"1":"callback","2":{"3":{"3":[{"6":{"1":[{"4":{"1":"string","4":true}},{"4":{"1":"Object","4":true}}]}}],"4":{"8":true}}},"3":{"1":[{"2":"<p>The callback to process the\nincoming messages. Passed the payload. If opt_objectPayload is set, the\npayload is decoded and passed as an object.</p>\n"}]}},{"1":"opt_objectPayload","2":{"1":true,"6":{"1":[{"4":{"1":"boolean","4":true}},{"9":true}]}},"3":{"1":[{"2":"<p>If true, incoming messages for this\nservice are expected to contain an object, and will be deserialized from\na string automatically if necessary. It&#39;s the responsibility of\nimplementors of this class to perform the deserialization.</p>\n"}]}}]},{"1":{"1":"send","2":{"1":"closure/goog/messaging/messagechannel.js","2":115,"3":"https://github.com/google/closure-library/blob/master/closure/goog/messaging/messagechannel.js#L115"},"3":{"1":[{"2":"<p>Sends a message over the channel.</p>\n"}]}},"4":[{"1":"serviceName","2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>The name of the service this message should be\ndelivered to.</p>\n"}]}},{"1":"payload","2":{"6":{"1":[{"4":{"1":"string","4":true}},{"4":{"1":"Object","4":true}}]}},"3":{"1":[{"2":"<p>The value of the message. If this is an\nObject, it is serialized to a string before sending if necessary. It&#39;s\nthe responsibility of implementors of this class to perform the\nserialization.</p>\n"}]}}]}],"27":[{"1":"goog.messaging.AbstractChannel","3":{"1":"goog.messaging.AbstractChannel.html"}},{"1":"goog.messaging.BufferedChannel","3":{"1":"goog.messaging.BufferedChannel.html"}},{"1":"goog.messaging.DeferredChannel","3":{"1":"goog.messaging.DeferredChannel.html"}},{"1":"goog.messaging.MultiChannel.VirtualChannel","3":{"1":"goog.messaging.MultiChannel.VirtualChannel.html"}},{"1":"goog.messaging.PortChannel","3":{"1":"goog.messaging.PortChannel.html"}},{"1":"goog.net.xpc.CrossPageChannel","3":{"1":"goog.net.xpc.CrossPageChannel.html"}},{"1":"goog.testing.messaging.MockMessageChannel","3":{"1":"goog.testing.messaging.MockMessageChannel.html"}}],"21":{"1":{"1":"goog.messaging.MessageChannel","3":{"1":"goog.messaging.MessageChannel.html"}},"2":4},"23":"goog.messaging.MessageChannel.html","24":"goog.messaging.MessageChannel"}]}}