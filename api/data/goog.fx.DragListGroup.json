{"2":{"1":[{"1":"goog.fx.DragListGroup","5":{"1":"closure/goog/fx/draglistgroup.js","2":61,"3":"https://github.com/google/closure-library/blob/master/closure/goog/fx/draglistgroup.js#L61"},"6":{"2":[{"1":"DragListGroup.EventType","2":"goog.fx.DragListGroup.EventType.html","3":{"1":[{"2":"<p>Events dispatched by this class.</p>\n"}]}}]},"7":{"1":[{"2":"<p>A class representing a group of one or more &#34;drag lists&#34; with items that can\nbe dragged within them and between them.</p>\n<p>Example usage:\nvar dragListGroup &#61; new goog.fx.DragListGroup();\ndragListGroup.setDragItemHandleHoverClass(className1, className2);\ndragListGroup.setDraggerElClass(className3);\ndragListGroup.addDragList(vertList, goog.fx.DragListDirection.DOWN);\ndragListGroup.addDragList(horizList, goog.fx.DragListDirection.RIGHT);\ndragListGroup.init();</p>\n"}]},"8":{"7":true},"14":{"1":{"1":"DragListGroup","2":{"1":"closure/goog/fx/draglistgroup.js","2":61,"3":"https://github.com/google/closure-library/blob/master/closure/goog/fx/draglistgroup.js#L61"},"3":{"1":[{"2":"<p>A class representing a group of one or more &#34;drag lists&#34; with items that can\nbe dragged within them and between them.</p>\n<p>Example usage:\nvar dragListGroup &#61; new goog.fx.DragListGroup();\ndragListGroup.setDragItemHandleHoverClass(className1, className2);\ndragListGroup.setDraggerElClass(className3);\ndragListGroup.addDragList(vertList, goog.fx.DragListDirection.DOWN);\ndragListGroup.addDragList(horizList, goog.fx.DragListDirection.RIGHT);\ndragListGroup.init();</p>\n"}]}},"3":true},"15":[{"1":{"1":"addDragList","2":{"1":"closure/goog/fx/draglistgroup.js","2":311,"3":"https://github.com/google/closure-library/blob/master/closure/goog/fx/draglistgroup.js#L311"},"3":{"1":[{"2":"<p>Adds a drag list to this DragListGroup.\nAll calls to this method must happen before the call to init().\nRemember that all child nodes (except text nodes) will be made draggable to\nany other drag list in this group.</p>\n"}]}},"4":[{"1":"dragListElement","2":{"6":{"1":[{"4":{"1":"Element"}},{"10":true}]}},"3":{"1":[{"2":"<p>Must be a container for a list of items\nthat should all be made draggable.</p>\n"}]}},{"1":"growthDirection","2":{"4":{"1":"goog.fx.DragListDirection","3":{"1":"goog.fx.DragListDirection.html"}}},"3":{"1":[{"2":"<p>The direction that this\ndrag list grows in (i.e. if an item is appended to the DOM, the list&#39;s\nbounding box expands in this direction).</p>\n"}]}},{"1":"opt_unused","2":{"1":true,"6":{"1":[{"4":{"1":"boolean","4":true}},{"9":true}]}},"3":{"1":[{"2":"<p>Unused argument.</p>\n"}]}},{"1":"opt_dragHoverClass","2":{"1":true,"6":{"1":[{"4":{"1":"string","4":true}},{"9":true}]}},"3":{"1":[{"2":"<p>CSS class to apply to this drag list when\nthe draggerEl hovers over it during a drag action.  If present, must be a\nsingle, valid classname (not a string of space-separated classnames).</p>\n"}]}}]},{"1":{"1":"addEventListener","2":{"1":"closure/goog/events/eventtarget.js","2":150,"3":"https://github.com/google/closure-library/blob/master/closure/goog/events/eventtarget.js#L150"},"3":{"1":[{"2":"<p>Adds an event listener to the event target. The same handler can only be\nadded once per the type. Even if you add the same handler multiple times\nusing the same type then it will only be called once when the event is\ndispatched.</p>\n"}]},"4":{"1":[{"2":"<p>Use <code>#listen</code> instead, when possible. Otherwise, use\n<code>goog.events.listen</code> if you are passing Object\n(instead of Function) as handler.</p>\n"}]},"6":{"2":true},"7":{"1":"goog.events.EventTarget","3":{"1":"goog.events.EventTarget.html#addEventListener"}}},"4":[{"1":"type","2":{"6":{"1":[{"4":{"1":"string","4":true}},{"4":{"1":"goog.events.EventId","3":{"1":"goog.events.EventId.html"}}}]}},"3":{"1":[{"2":"<p>The type of the event to listen for</p>\n"}]}},{"1":"handler","2":{"6":{"1":[{"3":{"3":[{"8":true}],"4":{"8":true}}},{"5":{"1":[{"1":"handleEvent","2":{"3":{"3":[{"8":true}],"4":{"8":true}}}}]}},{"10":true}]}},"3":{"1":[{"2":"<p>The function\nto handle the event. The handler can also be an object that implements\nthe handleEvent method which takes the event object as argument.</p>\n"}]}},{"1":"opt_capture","2":{"1":true,"6":{"1":[{"4":{"1":"boolean","4":true}},{"9":true}]}},"3":{"1":[{"2":"<p>In DOM-compliant browsers, this determines\nwhether the listener is fired during the capture or bubble phase\nof the event.</p>\n"}]}},{"1":"opt_handlerScope","2":{"1":true,"6":{"1":[{"4":{"1":"Object","4":true}},{"10":true},{"9":true}]}},"3":{"1":[{"2":"<p>Object in whose scope to call\nthe listener.</p>\n"}]}}]},{"1":{"1":"addItemToDragList","2":{"1":"closure/goog/fx/draglistgroup.js","2":424,"3":"https://github.com/google/closure-library/blob/master/closure/goog/fx/draglistgroup.js#L424"},"3":{"1":[{"2":"<p>Adds a single item to the given drag list and sets up the drag listeners for\nit.\nIf opt_index is specified the item is inserted at this index, otherwise the\nitem is added as the last child of the list.</p>\n"}]}},"4":[{"1":"list","2":{"4":{"1":"Element"}},"3":{"1":[{"2":"<p>The drag list where to add item to.</p>\n"}]}},{"1":"item","2":{"4":{"1":"Element"}},"3":{"1":[{"2":"<p>The new element to add.</p>\n"}]}},{"1":"opt_index","2":{"1":true,"6":{"1":[{"4":{"1":"number","4":true}},{"9":true}]}},"3":{"1":[{"2":"<p>Index where to insert the item in the list. If not\nspecified item is inserted as the last child of list.</p>\n"}]}}]},{"1":{"1":"addOnDisposeCallback","2":{"1":"closure/goog/disposable/disposable.js","2":213,"3":"https://github.com/google/closure-library/blob/master/closure/goog/disposable/disposable.js#L213"},"3":{"1":[{"2":"<p>Invokes a callback function when this object is disposed. Callbacks are\ninvoked in the order in which they were added. If a callback is added to\nan already disposed Disposable, it will be called immediately.</p>\n"}]},"7":{"1":"goog.Disposable","3":{"1":"goog.Disposable.html#addOnDisposeCallback"}}},"2":["T"],"4":[{"1":"callback","2":{"3":{"2":{"6":{"1":[{"4":{"1":"T"}},{"10":true}]}},"4":{"8":true}}},"3":{"1":[{"2":"<p>The callback function.</p>\n"}]}},{"1":"opt_scope","2":{"1":true,"6":{"1":[{"4":{"1":"T"}},{"10":true},{"9":true}]}},"3":{"1":[{"2":"<p>An optional scope to call the callback in.</p>\n"}]}}]},{"1":{"1":"createDragElementInternal","2":{"1":"closure/goog/fx/draglistgroup.js","2":611,"3":"https://github.com/google/closure-library/blob/master/closure/goog/fx/draglistgroup.js#L611"},"3":{"1":[{"2":"<p>Generates an element to follow the cursor during dragging, given a drag\nsource element.  The default behavior is simply to clone the source element,\nbut this may be overridden in subclasses.  This method is called by\n<code>createDragElement()</code> before the drag class is added.</p>\n"}]},"5":1},"4":[{"1":"sourceEl","2":{"6":{"1":[{"4":{"1":"Element"}},{"10":true}]}},"3":{"1":[{"2":"<p>Drag source element.</p>\n"}]}}],"5":{"2":{"4":{"1":"Element"}},"3":{"1":[{"2":"<p>The new drag element.</p>\n"}]}}},{"1":{"1":"dispatchEvent","2":{"1":"closure/goog/events/listenable.js","2":180,"3":"https://github.com/google/closure-library/blob/master/closure/goog/events/listenable.js#L180"},"3":{"1":[{"2":"<p>Dispatches an event (or event like object) and calls all listeners\nlistening for events of this type. The type of the event is decided by the\ntype property on the event object.</p>\n<p>If any of the listeners returns false OR calls preventDefault then this\nfunction will return false.  If one of the capture listeners calls\nstopPropagation, then the bubble listeners won&#39;t fire.</p>\n"}]},"8":{"1":"goog.events.EventTarget","3":{"1":"goog.events.EventTarget.html#dispatchEvent"}}},"4":[{"1":"e","2":{"6":{"1":[{"4":{"1":"string","4":true}},{"4":{"1":"Object","4":true}},{"10":true}]}},"3":{"1":[{"2":"<p>Event object.</p>\n"}]}}],"5":{"2":{"4":{"1":"boolean","4":true}},"3":{"1":[{"2":"<p>If anyone called preventDefault on the event object (or\nif any of the listeners returns false) this will also return false.</p>\n"}]}}},{"1":{"1":"dispose","2":{"1":"closure/goog/disposable/idisposable.js","2":39,"3":"https://github.com/google/closure-library/blob/master/closure/goog/disposable/idisposable.js#L39"},"3":{"1":[{"2":"<p>Disposes of the object and its resources.</p>\n"}]},"8":{"1":"goog.Disposable","3":{"1":"goog.Disposable.html#dispose"}}},"5":{"3":{"1":[{"2":"<p>Nothing.</p>\n"}]}}},{"1":{"1":"disposeInternal","2":{"1":"closure/goog/fx/draglistgroup.js","2":436,"3":"https://github.com/google/closure-library/blob/master/closure/goog/fx/draglistgroup.js#L436"},"3":{"1":[{"2":"<p>Removes listeners from this object.  Classes that extend EventTarget may\nneed to override this method in order to remove references to DOM Elements\nand additional listeners.</p>\n"}]},"5":1,"8":{"1":"goog.events.EventTarget","3":{"1":"goog.events.EventTarget.html#disposeInternal"}}}},{"1":{"1":"fireListeners","2":{"1":"closure/goog/events/listenable.js","2":225,"3":"https://github.com/google/closure-library/blob/master/closure/goog/events/listenable.js#L225"},"3":{"1":[{"2":"<p>Fires all registered listeners in this listenable for the given\ntype and capture mode, passing them the given eventObject. This\ndoes not perform actual capture/bubble. Only implementors of the\ninterface should be using this.</p>\n"}]},"8":{"1":"goog.events.EventTarget","3":{"1":"goog.events.EventTarget.html#fireListeners"}}},"2":["EVENTOBJ"],"4":[{"1":"type","2":{"6":{"1":[{"4":{"1":"string","4":true}},{"4":{"1":"goog.events.EventId","3":{"1":"goog.events.EventId.html"},"5":[{"6":{"1":[{"4":{"1":"EVENTOBJ"}},{"10":true}]}}]}}]}},"3":{"1":[{"2":"<p>The type of the\nlisteners to fire.</p>\n"}]}},{"1":"capture","2":{"4":{"1":"boolean","4":true}},"3":{"1":[{"2":"<p>The capture mode of the listeners to fire.</p>\n"}]}},{"1":"eventObject","2":{"6":{"1":[{"4":{"1":"EVENTOBJ"}},{"10":true}]}},"3":{"1":[{"2":"<p>The event object to fire.</p>\n"}]}}],"5":{"2":{"4":{"1":"boolean","4":true}},"3":{"1":[{"2":"<p>Whether all listeners succeeded without\nattempting to prevent default behavior. If any listener returns\nfalse or called goog.events.Event#preventDefault, this returns\nfalse.</p>\n"}]}}},{"1":{"1":"getDisposed","2":{"1":"closure/goog/disposable/disposable.js","2":160,"3":"https://github.com/google/closure-library/blob/master/closure/goog/disposable/disposable.js#L160"},"3":{},"4":{"1":[{"2":"<p>Use <a href=\"goog.fx.DragListGroup.html#isDisposed\"><code>#isDisposed</code></a> instead.</p>\n"}]},"6":{"2":true},"7":{"1":"goog.Disposable","3":{"1":"goog.Disposable.html#getDisposed"}}},"5":{"2":{"4":{"1":"boolean","4":true}},"3":{"1":[{"2":"<p>Whether the object has been disposed of.</p>\n"}]}}},{"1":{"1":"getHysteresis","2":{"1":"closure/goog/fx/draglistgroup.js","2":284,"3":"https://github.com/google/closure-library/blob/master/closure/goog/fx/draglistgroup.js#L284"},"3":{}},"5":{"2":{"4":{"1":"number","4":true}},"3":{"1":[{"2":"<p>distance The number of pixels after which a mousedown and\nmove is considered a drag.</p>\n"}]}}},{"1":{"1":"getListener","2":{"1":"closure/goog/events/listenable.js","2":255,"3":"https://github.com/google/closure-library/blob/master/closure/goog/events/listenable.js#L255"},"3":{"1":[{"2":"<p>Gets the goog.events.ListenableKey for the event or null if no such\nlistener is in use.</p>\n"}]},"8":{"1":"goog.events.EventTarget","3":{"1":"goog.events.EventTarget.html#getListener"}}},"2":["SCOPE","EVENTOBJ"],"4":[{"1":"type","2":{"6":{"1":[{"4":{"1":"string","4":true}},{"4":{"1":"goog.events.EventId","3":{"1":"goog.events.EventId.html"},"5":[{"6":{"1":[{"4":{"1":"EVENTOBJ"}},{"10":true}]}}]}}]}},"3":{"1":[{"2":"<p>The name of the event\nwithout the &#39;on&#39; prefix.</p>\n"}]}},{"1":"listener","2":{"3":{"2":{"6":{"1":[{"4":{"1":"SCOPE"}},{"10":true}]}},"3":[{"6":{"1":[{"4":{"1":"EVENTOBJ"}},{"10":true}]}}],"4":{"6":{"1":[{"4":{"1":"boolean","4":true}},{"9":true}]}}}},"3":{"1":[{"2":"<p>The\nlistener function to get.</p>\n"}]}},{"1":"capture","2":{"4":{"1":"boolean","4":true}},"3":{"1":[{"2":"<p>Whether the listener is a capturing listener.</p>\n"}]}},{"1":"opt_listenerScope","2":{"1":true,"6":{"1":[{"4":{"1":"SCOPE"}},{"10":true},{"9":true}]}},"3":{"1":[{"2":"<p>Object in whose scope to call the\nlistener.</p>\n"}]}}],"5":{"2":{"6":{"1":[{"4":{"1":"goog.events.ListenableKey","3":{"1":"goog.events.ListenableKey.html"}}},{"10":true}]}},"3":{"1":[{"2":"<p>the found listener or null if not found.</p>\n"}]}}},{"1":{"1":"getListeners","2":{"1":"closure/goog/events/listenable.js","2":238,"3":"https://github.com/google/closure-library/blob/master/closure/goog/events/listenable.js#L238"},"3":{"1":[{"2":"<p>Gets all listeners in this listenable for the given type and\ncapture mode.</p>\n"}]},"8":{"1":"goog.events.EventTarget","3":{"1":"goog.events.EventTarget.html#getListeners"}}},"2":["EVENTOBJ"],"4":[{"1":"type","2":{"6":{"1":[{"4":{"1":"string","4":true}},{"4":{"1":"goog.events.EventId","3":{"1":"goog.events.EventId.html"}}}]}},"3":{"1":[{"2":"<p>The type of the listeners to fire.</p>\n"}]}},{"1":"capture","2":{"4":{"1":"boolean","4":true}},"3":{"1":[{"2":"<p>The capture mode of the listeners to fire.</p>\n"}]}}],"5":{"2":{"4":{"1":"Array","4":true,"5":[{"4":{"1":"goog.events.ListenableKey","3":{"1":"goog.events.ListenableKey.html"}}}]}},"3":{"1":[{"2":"<p>An array of registered\nlisteners.</p>\n"}]}}},{"1":{"1":"getParentEventTarget","2":{"1":"closure/goog/events/listenable.js","2":206,"3":"https://github.com/google/closure-library/blob/master/closure/goog/events/listenable.js#L206"},"3":{"1":[{"2":"<p>Returns the parent of this event target to use for capture/bubble\nmechanism.</p>\n<p>NOTE(chrishenry): The name reflects the original implementation of\ncustom event target (<code>goog.events.EventTarget</code>). We decided\nthat changing the name is not worth it.</p>\n"}]},"8":{"1":"goog.events.EventTarget","3":{"1":"goog.events.EventTarget.html#getParentEventTarget"}}},"5":{"2":{"6":{"1":[{"4":{"1":"goog.events.Listenable","3":{"1":"goog.events.Listenable.html"}}},{"10":true}]}},"3":{"1":[{"2":"<p>The parent EventTarget or null if\nthere is no parent.</p>\n"}]}}},{"1":{"1":"hasListener","2":{"1":"closure/goog/events/listenable.js","2":270,"3":"https://github.com/google/closure-library/blob/master/closure/goog/events/listenable.js#L270"},"3":{"1":[{"2":"<p>Whether there is any active listeners matching the specified\nsignature. If either the type or capture parameters are\nunspecified, the function will match on the remaining criteria.</p>\n"}]},"8":{"1":"goog.events.EventTarget","3":{"1":"goog.events.EventTarget.html#hasListener"}}},"2":["EVENTOBJ"],"4":[{"1":"opt_type","2":{"1":true,"6":{"1":[{"4":{"1":"string","4":true}},{"4":{"1":"goog.events.EventId","3":{"1":"goog.events.EventId.html"},"5":[{"6":{"1":[{"4":{"1":"EVENTOBJ"}},{"10":true}]}}]}},{"9":true}]}},"3":{"1":[{"2":"<p>Event type.</p>\n"}]}},{"1":"opt_capture","2":{"1":true,"6":{"1":[{"4":{"1":"boolean","4":true}},{"9":true}]}},"3":{"1":[{"2":"<p>Whether to check for capture or bubble\nlisteners.</p>\n"}]}}],"5":{"2":{"4":{"1":"boolean","4":true}},"3":{"1":[{"2":"<p>Whether there is any active listeners matching\nthe requested type and/or capture phase.</p>\n"}]}}},{"1":{"1":"init","2":{"1":"closure/goog/fx/draglistgroup.js","2":395,"3":"https://github.com/google/closure-library/blob/master/closure/goog/fx/draglistgroup.js#L395"},"3":{"1":[{"2":"<p>Performs the initial setup to make all items in all lists draggable.</p>\n"}]}}},{"1":{"1":"insertCurrHoverItem","2":{"1":"closure/goog/fx/draglistgroup.js","2":1018,"3":"https://github.com/google/closure-library/blob/master/closure/goog/fx/draglistgroup.js#L1018"},"3":{"1":[{"2":"<p>Inserts the currently dragged item in its new place.</p>\n<p>This method is used for insertion only when updateWhileDragging_ is false\n(otherwise there is no need for that). In the basic implementation\nthe element is inserted before the currently hovered over item (this can\nbe changed by overriding the method in subclasses).</p>\n"}]},"5":1}},{"1":{"1":"isDisposed","2":{"1":"closure/goog/disposable/idisposable.js","2":45,"3":"https://github.com/google/closure-library/blob/master/closure/goog/disposable/idisposable.js#L45"},"3":{},"8":{"1":"goog.Disposable","3":{"1":"goog.Disposable.html#isDisposed"}}},"5":{"2":{"4":{"1":"boolean","4":true}},"3":{"1":[{"2":"<p>Whether the object has been disposed of.</p>\n"}]}}},{"1":{"1":"isDragging","2":{"1":"closure/goog/fx/draglistgroup.js","2":290,"3":"https://github.com/google/closure-library/blob/master/closure/goog/fx/draglistgroup.js#L290"},"3":{}},"5":{"2":{"4":{"1":"boolean","4":true}},"3":{"1":[{"2":"<p>true if the user is currently dragging an element.</p>\n"}]}}},{"1":{"1":"listen","2":{"1":"closure/goog/events/listenable.js","2":113,"3":"https://github.com/google/closure-library/blob/master/closure/goog/events/listenable.js#L113"},"3":{"1":[{"2":"<p>Adds an event listener. A listener can only be added once to an\nobject and if it is added again the key for the listener is\nreturned. Note that if the existing listener is a one-off listener\n(registered via listenOnce), it will no longer be a one-off\nlistener after a call to listen().</p>\n"}]},"8":{"1":"goog.events.EventTarget","3":{"1":"goog.events.EventTarget.html#listen"}}},"2":["SCOPE","EVENTOBJ"],"4":[{"1":"type","2":{"6":{"1":[{"4":{"1":"string","4":true}},{"4":{"1":"goog.events.EventId","3":{"1":"goog.events.EventId.html"},"5":[{"6":{"1":[{"4":{"1":"EVENTOBJ"}},{"10":true}]}}]}}]}},"3":{"1":[{"2":"<p>The event type id.</p>\n"}]}},{"1":"listener","2":{"3":{"2":{"6":{"1":[{"4":{"1":"SCOPE"}},{"10":true}]}},"3":[{"6":{"1":[{"4":{"1":"EVENTOBJ"}},{"10":true}]}}],"4":{"6":{"1":[{"4":{"1":"boolean","4":true}},{"9":true}]}}}},"3":{"1":[{"2":"<p>Callback\nmethod.</p>\n"}]}},{"1":"opt_useCapture","2":{"1":true,"6":{"1":[{"4":{"1":"boolean","4":true}},{"9":true}]}},"3":{"1":[{"2":"<p>Whether to fire in capture phase\n(defaults to false).</p>\n"}]}},{"1":"opt_listenerScope","2":{"1":true,"6":{"1":[{"4":{"1":"SCOPE"}},{"10":true},{"9":true}]}},"3":{"1":[{"2":"<p>Object in whose scope to call the\nlistener.</p>\n"}]}}],"5":{"2":{"4":{"1":"goog.events.ListenableKey","3":{"1":"goog.events.ListenableKey.html"}}},"3":{"1":[{"2":"<p>Unique key for the listener.</p>\n"}]}}},{"1":{"1":"listenForDragEvents","2":{"1":"closure/goog/fx/draglistgroup.js","2":500,"3":"https://github.com/google/closure-library/blob/master/closure/goog/fx/draglistgroup.js#L500"},"3":{"1":[{"2":"<p>Listens for drag events on the given drag item. This method is currently used\nto initialize drag items.</p>\n"}]},"5":1},"4":[{"1":"dragItem","2":{"4":{"1":"Element"}},"3":{"1":[{"2":"<p>the element to initialize. This element has to be\nin one of the drag lists.</p>\n"}]}}]},{"1":{"1":"listenOnce","2":{"1":"closure/goog/events/listenable.js","2":137,"3":"https://github.com/google/closure-library/blob/master/closure/goog/events/listenable.js#L137"},"3":{"1":[{"2":"<p>Adds an event listener that is removed automatically after the\nlistener fired once.</p>\n<p>If an existing listener already exists, listenOnce will do\nnothing. In particular, if the listener was previously registered\nvia listen(), listenOnce() will not turn the listener into a\none-off listener. Similarly, if there is already an existing\none-off listener, listenOnce does not modify the listeners (it is\nstill a once listener).</p>\n"}]},"8":{"1":"goog.events.EventTarget","3":{"1":"goog.events.EventTarget.html#listenOnce"}}},"2":["SCOPE","EVENTOBJ"],"4":[{"1":"type","2":{"6":{"1":[{"4":{"1":"string","4":true}},{"4":{"1":"goog.events.EventId","3":{"1":"goog.events.EventId.html"},"5":[{"6":{"1":[{"4":{"1":"EVENTOBJ"}},{"10":true}]}}]}}]}},"3":{"1":[{"2":"<p>The event type id.</p>\n"}]}},{"1":"listener","2":{"3":{"2":{"6":{"1":[{"4":{"1":"SCOPE"}},{"10":true}]}},"3":[{"6":{"1":[{"4":{"1":"EVENTOBJ"}},{"10":true}]}}],"4":{"6":{"1":[{"4":{"1":"boolean","4":true}},{"9":true}]}}}},"3":{"1":[{"2":"<p>Callback\nmethod.</p>\n"}]}},{"1":"opt_useCapture","2":{"1":true,"6":{"1":[{"4":{"1":"boolean","4":true}},{"9":true}]}},"3":{"1":[{"2":"<p>Whether to fire in capture phase\n(defaults to false).</p>\n"}]}},{"1":"opt_listenerScope","2":{"1":true,"6":{"1":[{"4":{"1":"SCOPE"}},{"10":true},{"9":true}]}},"3":{"1":[{"2":"<p>Object in whose scope to call the\nlistener.</p>\n"}]}}],"5":{"2":{"4":{"1":"goog.events.ListenableKey","3":{"1":"goog.events.ListenableKey.html"}}},"3":{"1":[{"2":"<p>Unique key for the listener.</p>\n"}]}}},{"1":{"1":"recacheListAndItemBounds","2":{"1":"closure/goog/fx/draglistgroup.js","2":464,"3":"https://github.com/google/closure-library/blob/master/closure/goog/fx/draglistgroup.js#L464"},"3":{"1":[{"2":"<p>Caches the heights of each drag list and drag item, except for the current\ndrag item.</p>\n"}]}}},{"1":{"1":"registerDisposable","2":{"1":"closure/goog/disposable/disposable.js","2":200,"3":"https://github.com/google/closure-library/blob/master/closure/goog/disposable/disposable.js#L200"},"3":{"1":[{"2":"<p>Associates a disposable object with this object so that they will be disposed\ntogether.</p>\n"}]},"7":{"1":"goog.Disposable","3":{"1":"goog.Disposable.html#registerDisposable"}}},"4":[{"1":"disposable","2":{"6":{"1":[{"4":{"1":"goog.disposable.IDisposable","3":{"1":"goog.disposable.IDisposable.html"}}},{"10":true}]}},"3":{"1":[{"2":"<p>that will be disposed when\nthis object is disposed.</p>\n"}]}}]},{"1":{"1":"removeAllListeners","2":{"1":"closure/goog/events/listenable.js","2":192,"3":"https://github.com/google/closure-library/blob/master/closure/goog/events/listenable.js#L192"},"3":{"1":[{"2":"<p>Removes all listeners from this listenable. If type is specified,\nit will only remove listeners of the particular type. otherwise all\nregistered listeners will be removed.</p>\n"}]},"8":{"1":"goog.events.EventTarget","3":{"1":"goog.events.EventTarget.html#removeAllListeners"}}},"4":[{"1":"opt_type","2":{"1":true,"6":{"1":[{"4":{"1":"string","4":true}},{"9":true}]}},"3":{"1":[{"2":"<p>Type of event to remove, default is to\nremove all types.</p>\n"}]}}],"5":{"2":{"4":{"1":"number","4":true}},"3":{"1":[{"2":"<p>Number of listeners removed.</p>\n"}]}}},{"1":{"1":"removeEventListener","2":{"1":"closure/goog/events/eventtarget.js","2":174,"3":"https://github.com/google/closure-library/blob/master/closure/goog/events/eventtarget.js#L174"},"3":{"1":[{"2":"<p>Removes an event listener from the event target. The handler must be the\nsame object as the one added. If the handler has not been added then\nnothing is done.</p>\n"}]},"4":{"1":[{"2":"<p>Use <code>#unlisten</code> instead, when possible. Otherwise, use\n<code>goog.events.unlisten</code> if you are passing Object\n(instead of Function) as handler.</p>\n"}]},"6":{"2":true},"7":{"1":"goog.events.EventTarget","3":{"1":"goog.events.EventTarget.html#removeEventListener"}}},"4":[{"1":"type","2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>The type of the event to listen for.</p>\n"}]}},{"1":"handler","2":{"6":{"1":[{"3":{"3":[{"8":true}],"4":{"8":true}}},{"5":{"1":[{"1":"handleEvent","2":{"3":{"3":[{"8":true}],"4":{"8":true}}}}]}},{"10":true}]}},"3":{"1":[{"2":"<p>The function\nto handle the event. The handler can also be an object that implements\nthe handleEvent method which takes the event object as argument.</p>\n"}]}},{"1":"opt_capture","2":{"1":true,"6":{"1":[{"4":{"1":"boolean","4":true}},{"9":true}]}},"3":{"1":[{"2":"<p>In DOM-compliant browsers, this determines\nwhether the listener is fired during the capture or bubble phase\nof the event.</p>\n"}]}},{"1":"opt_handlerScope","2":{"1":true,"6":{"1":[{"4":{"1":"Object","4":true}},{"10":true},{"9":true}]}},"3":{"1":[{"2":"<p>Object in whose scope to call\nthe listener.</p>\n"}]}}]},{"1":{"1":"setCurrDragItemClass","2":{"1":"closure/goog/fx/draglistgroup.js","2":374,"3":"https://github.com/google/closure-library/blob/master/closure/goog/fx/draglistgroup.js#L374"},"3":{"1":[{"2":"<p>Sets a user-supplied CSS class to add to the current drag item (during a\ndrag action).</p>\n<p>If not set, the default behavior adds visibility:hidden to the current drag\nitem so that it is a block of empty space in the hover drag list (if any).\nIf this class is set by the user, then the default behavior does not happen\n(unless, of course, the class also contains visibility:hidden).</p>\n"}]}},"4":[{"1":"var_args","2":{"2":true,"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>The CSS class or classes.</p>\n"}]}}]},{"1":{"1":"setDragItemHandleHoverClass","2":{"1":"closure/goog/fx/draglistgroup.js","2":356,"3":"https://github.com/google/closure-library/blob/master/closure/goog/fx/draglistgroup.js#L356"},"3":{"1":[{"2":"<p>Sets a user-supplied CSS class to add to a drag item handle on hover (not\nduring a drag action).</p>\n"}]}},"4":[{"1":"var_args","2":{"2":true,"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>The CSS class or classes.</p>\n"}]}}]},{"1":{"1":"setDragItemHoverClass","2":{"1":"closure/goog/fx/draglistgroup.js","2":345,"3":"https://github.com/google/closure-library/blob/master/closure/goog/fx/draglistgroup.js#L345"},"3":{"1":[{"2":"<p>Sets a user-supplied CSS class to add to a drag item on hover (not during a\ndrag action).</p>\n"}]}},"4":[{"1":"var_args","2":{"2":true,"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>The CSS class or classes.</p>\n"}]}}]},{"1":{"1":"setDraggerElClass","2":{"1":"closure/goog/fx/draglistgroup.js","2":385,"3":"https://github.com/google/closure-library/blob/master/closure/goog/fx/draglistgroup.js#L385"},"3":{"1":[{"2":"<p>Sets a user-supplied CSS class to add to the clone of the current drag item\nthat&#39;s actually being dragged around (during a drag action).</p>\n"}]}},"4":[{"1":"draggerElClass","2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>The CSS class.</p>\n"}]}}]},{"1":{"1":"setFunctionToGetHandleForDragItem","2":{"1":"closure/goog/fx/draglistgroup.js","2":333,"3":"https://github.com/google/closure-library/blob/master/closure/goog/fx/draglistgroup.js#L333"},"3":{"1":[{"2":"<p>Sets a user-supplied function used to get the &#34;handle&#34; element for a drag\nitem. The function must accept exactly one argument. The argument may be\nany drag item element.</p>\n<p>If not set, the default implementation uses the whole drag item as the\nhandle.</p>\n"}]}},"4":[{"1":"getHandleForDragItemFn","2":{"3":{"3":[{"4":{"1":"Element"}}],"4":{"6":{"1":[{"4":{"1":"Element"}},{"10":true}]}}}},"3":{"1":[{"2":"<p>A function that,\ngiven any drag item, returns a reference to its &#34;handle&#34; element\n(which may be the drag item element itself).</p>\n"}]}}]},{"1":{"1":"setHysteresis","2":{"1":"closure/goog/fx/draglistgroup.js","2":275,"3":"https://github.com/google/closure-library/blob/master/closure/goog/fx/draglistgroup.js#L275"},"3":{"1":[{"2":"<p>Sets the distance the user has to drag the element before a drag operation\nis started.</p>\n"}]}},"4":[{"1":"distance","2":{"4":{"1":"number","4":true}},"3":{"1":[{"2":"<p>The number of pixels after which a mousedown and\nmove is considered a drag.</p>\n"}]}}]},{"1":{"1":"setIsCurrDragItemAlwaysDisplayed","2":{"1":"closure/goog/fx/draglistgroup.js","2":254,"3":"https://github.com/google/closure-library/blob/master/closure/goog/fx/draglistgroup.js#L254"},"3":{"1":[{"2":"<p>Sets the property of the currDragItem that it is always displayed in the\nlist.</p>\n"}]}}},{"1":{"1":"setNoUpdateWhileDragging","2":{"1":"closure/goog/fx/draglistgroup.js","2":264,"3":"https://github.com/google/closure-library/blob/master/closure/goog/fx/draglistgroup.js#L264"},"3":{"1":[{"2":"<p>Sets the private property updateWhileDragging_ to false. This disables the\nupdate of the position of the currDragItem while dragging. It will only be\nplaced to its new location once the drag ends.</p>\n"}]}}},{"1":{"1":"setParentEventTarget","2":{"1":"closure/goog/events/eventtarget.js","2":126,"3":"https://github.com/google/closure-library/blob/master/closure/goog/events/eventtarget.js#L126"},"3":{"1":[{"2":"<p>Sets the parent of this event target to use for capture/bubble\nmechanism.</p>\n"}]},"7":{"1":"goog.events.EventTarget","3":{"1":"goog.events.EventTarget.html#setParentEventTarget"}}},"4":[{"1":"parent","2":{"6":{"1":[{"4":{"1":"goog.events.EventTarget","3":{"1":"goog.events.EventTarget.html"}}},{"10":true}]}},"3":{"1":[{"2":"<p>Parent listenable (null if none).</p>\n"}]}}]},{"1":{"1":"setTargetForTesting","2":{"1":"closure/goog/events/eventtarget.js","2":320,"3":"https://github.com/google/closure-library/blob/master/closure/goog/events/eventtarget.js#L320"},"3":{"1":[{"2":"<p>Sets the target to be used for <code>event.target</code> when firing\nevent. Mainly used for testing. For example, see\n<code>goog.testing.events.mixinListenable</code>.</p>\n"}]},"7":{"1":"goog.events.EventTarget","3":{"1":"goog.events.EventTarget.html#setTargetForTesting"}}},"4":[{"1":"target","2":{"4":{"1":"Object","4":true}},"3":{"1":[{"2":"<p>The target.</p>\n"}]}}]},{"1":{"1":"unlisten","2":{"1":"closure/goog/events/listenable.js","2":153,"3":"https://github.com/google/closure-library/blob/master/closure/goog/events/listenable.js#L153"},"3":{"1":[{"2":"<p>Removes an event listener which was added with listen() or listenOnce().</p>\n"}]},"8":{"1":"goog.events.EventTarget","3":{"1":"goog.events.EventTarget.html#unlisten"}}},"2":["SCOPE","EVENTOBJ"],"4":[{"1":"type","2":{"6":{"1":[{"4":{"1":"string","4":true}},{"4":{"1":"goog.events.EventId","3":{"1":"goog.events.EventId.html"},"5":[{"6":{"1":[{"4":{"1":"EVENTOBJ"}},{"10":true}]}}]}}]}},"3":{"1":[{"2":"<p>The event type id.</p>\n"}]}},{"1":"listener","2":{"3":{"2":{"6":{"1":[{"4":{"1":"SCOPE"}},{"10":true}]}},"3":[{"6":{"1":[{"4":{"1":"EVENTOBJ"}},{"10":true}]}}],"4":{"6":{"1":[{"4":{"1":"boolean","4":true}},{"9":true}]}}}},"3":{"1":[{"2":"<p>Callback\nmethod.</p>\n"}]}},{"1":"opt_useCapture","2":{"1":true,"6":{"1":[{"4":{"1":"boolean","4":true}},{"9":true}]}},"3":{"1":[{"2":"<p>Whether to fire in capture phase\n(defaults to false).</p>\n"}]}},{"1":"opt_listenerScope","2":{"1":true,"6":{"1":[{"4":{"1":"SCOPE"}},{"10":true},{"9":true}]}},"3":{"1":[{"2":"<p>Object in whose scope to call\nthe listener.</p>\n"}]}}],"5":{"2":{"4":{"1":"boolean","4":true}},"3":{"1":[{"2":"<p>Whether any listener was removed.</p>\n"}]}}},{"1":{"1":"unlistenByKey","2":{"1":"closure/goog/events/listenable.js","2":164,"3":"https://github.com/google/closure-library/blob/master/closure/goog/events/listenable.js#L164"},"3":{"1":[{"2":"<p>Removes an event listener which was added with listen() by the key\nreturned by listen().</p>\n"}]},"8":{"1":"goog.events.EventTarget","3":{"1":"goog.events.EventTarget.html#unlistenByKey"}}},"4":[{"1":"key","2":{"4":{"1":"goog.events.ListenableKey","3":{"1":"goog.events.ListenableKey.html"}}},"3":{"1":[{"2":"<p>The key returned by\nlisten() or listenOnce().</p>\n"}]}}],"5":{"2":{"4":{"1":"boolean","4":true}},"3":{"1":[{"2":"<p>Whether any listener was removed.</p>\n"}]}}},{"1":{"1":"updateCurrHoverItem","2":{"1":"closure/goog/fx/draglistgroup.js","2":1000,"3":"https://github.com/google/closure-library/blob/master/closure/goog/fx/draglistgroup.js#L1000"},"3":{"1":[{"2":"<p>Updates the value of currHoverItem_.</p>\n<p>This method is used for insertion only when updateWhileDragging_ is false.\nThe below implementation is the basic one. This method can be extended by\na subclass to support changes to hovered item (eg: highlighting). Parametr\nopt_draggerElCenter can be used for more sophisticated effects.</p>\n"}]},"5":1},"4":[{"1":"hoverNextItem","2":{"6":{"1":[{"4":{"1":"Element"}},{"10":true}]}},"3":{"1":[{"2":"<p>element of the list that is hovered over.</p>\n"}]}},{"1":"opt_draggerElCenter","2":{"1":true,"6":{"1":[{"4":{"1":"goog.math.Coordinate","3":{"1":"goog.math.Coordinate.html"}}},{"10":true},{"9":true}]}},"3":{"1":[{"2":"<p>current position of\nthe dragged element.</p>\n"}]}}]}],"16":[{"1":{"1":"creationStack","2":{"1":"closure/goog/disposable/disposable.js","2":44,"3":"https://github.com/google/closure-library/blob/master/closure/goog/disposable/disposable.js#L44"},"3":{"1":[{"2":"<p>If monitoring the goog.Disposable instances is enabled, stores the creation\nstack trace of the Disposable instance.</p>\n"}]},"7":{"1":"goog.Disposable","3":{"1":"goog.Disposable.html#creationStack"}}},"2":{"6":{"1":[{"4":{"1":"string","4":true}},{"9":true}]}}}],"18":[{"1":"goog.events.EventTarget","3":{"1":"goog.events.EventTarget.html"}},{"1":"goog.Disposable","3":{"1":"goog.Disposable.html"}}],"19":[{"1":"goog.disposable.IDisposable","3":{"1":"goog.disposable.IDisposable.html"}},{"1":"goog.events.Listenable","3":{"1":"goog.events.Listenable.html"}}],"21":{"1":{"1":"goog.fx.DragListGroup","3":{"1":"goog.fx.DragListGroup.html"}},"2":4},"23":"goog.fx.DragListGroup.html","24":"goog.fx.DragListGroup"}]}}