{"2":{"1":[{"1":"goog.string.Const","5":{"1":"closure/goog/string/const.js","2":47,"3":"https://github.com/google/closure-library/blob/master/closure/goog/string/const.js#L47"},"7":{"1":[{"2":"<p>Wrapper for compile-time-constant strings.</p>\n<p>Const is a wrapper for strings that can only be created from program\nconstants (i.e., string literals).  This property relies on a custom Closure\ncompiler check that <code>goog.string.Const.from</code> is only invoked on\ncompile-time-constant expressions.</p>\n<p>Const is useful in APIs whose correct and secure use requires that certain\narguments are not attacker controlled: Compile-time constants are inherently\nunder the control of the application and not under control of external\nattackers, and hence are safe to use in such contexts.</p>\n<p>Instances of this type must be created via its factory method\n<code>goog.string.Const.from</code> and not by invoking its constructor.  The\nconstructor intentionally takes no parameters and the type is immutable;\nhence only a default instance corresponding to the empty string can be\nobtained via constructor invocation.</p>\n"}]},"8":{"4":true,"7":true},"12":[{"1":{"1":"Const.from","2":{"1":"closure/goog/string/const.js","2":154,"3":"https://github.com/google/closure-library/blob/master/closure/goog/string/const.js#L154"},"3":{"1":[{"2":"<p>Creates a Const object from a compile-time constant string.</p>\n<p>It is illegal to invoke this function on an expression whose\ncompile-time-contant value cannot be determined by the Closure compiler.</p>\n<p>Correct invocations include,</p>\n <pre>\n   var s &#61; goog.string.Const.from(&#39;hello&#39;);\n   var t &#61; goog.string.Const.from(&#39;hello&#39; &#43; &#39;world&#39;);\n </pre>\n<p>In contrast, the following are illegal:</p>\n <pre>\n   var s &#61; goog.string.Const.from(getHello());\n   var t &#61; goog.string.Const.from(&#39;hello&#39; &#43; world);\n </pre>\n"}]}},"4":[{"1":"s","2":{"4":{"1":"string","3":{"1":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String"},"4":true}},"3":{"1":[{"2":"<p>A constant string from which to create a Const.</p>\n"}]}}],"5":{"2":{"4":{"1":"goog.string.Const","3":{"1":"goog.string.Const.html"}}},"3":{"1":[{"2":"<p>A Const object initialized to stringConst.</p>\n"}]}}},{"1":{"1":"Const.unwrap","2":{"1":"closure/goog/string/const.js","2":114,"3":"https://github.com/google/closure-library/blob/master/closure/goog/string/const.js#L114"},"3":{"1":[{"2":"<p>Performs a runtime check that the provided object is indeed an instance\nof <code>goog.string.Const</code>, and returns its value.</p>\n"}]}},"4":[{"1":"stringConst","2":{"4":{"1":"goog.string.Const","3":{"1":"goog.string.Const.html"}}},"3":{"1":[{"2":"<p>The object to extract from.</p>\n"}]}}],"5":{"2":{"4":{"1":"string","3":{"1":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String"},"4":true}},"3":{"1":[{"2":"<p>The Const object&#39;s contained string, unless the run-time\ntype check fails. In that case, <code>unwrap</code> returns an innocuous\nstring, or, if assertions are enabled, throws\n<code>goog.asserts.AssertionError</code>.</p>\n"}]}}}],"14":{"1":{"1":"Const","2":{"1":"closure/goog/string/const.js","2":47,"3":"https://github.com/google/closure-library/blob/master/closure/goog/string/const.js#L47"},"3":{"1":[{"2":"<p>Wrapper for compile-time-constant strings.</p>\n<p>Const is a wrapper for strings that can only be created from program\nconstants (i.e., string literals).  This property relies on a custom Closure\ncompiler check that <code>goog.string.Const.from</code> is only invoked on\ncompile-time-constant expressions.</p>\n<p>Const is useful in APIs whose correct and secure use requires that certain\narguments are not attacker controlled: Compile-time constants are inherently\nunder the control of the application and not under control of external\nattackers, and hence are safe to use in such contexts.</p>\n<p>Instances of this type must be created via its factory method\n<code>goog.string.Const.from</code> and not by invoking its constructor.  The\nconstructor intentionally takes no parameters and the type is immutable;\nhence only a default instance corresponding to the empty string can be\nobtained via constructor invocation.</p>\n"}]},"10":[{"1":[{"1":"goog.string.Const#from","3":{"1":"goog.string.Const.html#Const.from"}}]}]},"3":true},"15":[{"1":{"1":"getTypedStringValue","2":{"1":"closure/goog/string/const.js","2":84,"3":"https://github.com/google/closure-library/blob/master/closure/goog/string/const.js#L84"},"3":{"1":[{"2":"<p>Returns this Const&#39;s value a string.</p>\n<p>IMPORTANT: In code where it is security-relevant that an object&#39;s type is\nindeed <code>goog.string.Const</code>, use <code>goog.string.Const.unwrap</code>\ninstead of this method.</p>\n"}]},"9":[{"1":"goog.string.TypedString","3":{"1":"goog.string.TypedString.html#getTypedStringValue"}}],"10":[{"1":[{"1":"goog.string.Const#unwrap","3":{"1":"goog.string.Const.html#Const.unwrap"}}]}]},"5":{"2":{"4":{"1":"string","3":{"1":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String"},"4":true}},"3":{"1":[{"2":"<p>The wrapped string&#39;s value.</p>\n"}]}}},{"1":{"1":"toString","2":{"1":"closure/goog/string/const.js","2":98,"3":"https://github.com/google/closure-library/blob/master/closure/goog/string/const.js#L98"},"3":{"1":[{"2":"<p>Returns a debug-string representation of this value.</p>\n<p>To obtain the actual string value wrapped inside an object of this type,\nuse <code>goog.string.Const.unwrap</code>.</p>\n"}]},"10":[{"1":[{"1":"goog.string.Const#unwrap","3":{"1":"goog.string.Const.html#Const.unwrap"}}]}]},"5":{"2":{"4":{"1":"string","3":{"1":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String"},"4":true}}}}],"16":[{"1":{"1":"implementsGoogStringTypedString","2":{"1":"closure/goog/string/const.js","2":71,"3":"https://github.com/google/closure-library/blob/master/closure/goog/string/const.js#L71"},"3":{"1":[{"2":"<p>Interface marker of the TypedString interface.</p>\n<p>This property can be used to determine at runtime whether or not an object\nimplements this interface.  All implementations of this interface set this\nproperty to <code>true</code>.</p>\n"}]},"6":{"1":true},"9":[{"1":"goog.string.TypedString","3":{"1":"goog.string.TypedString.html#implementsGoogStringTypedString"}}]},"2":{"4":{"1":"boolean","3":{"1":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean"},"4":true}}}],"19":[{"1":"goog.string.TypedString","3":{"1":"goog.string.TypedString.html"}}],"21":{"1":{"1":"goog.string","3":{"1":"goog.string.html"}}},"23":"goog.string.Const.html","24":"goog.string.Const"}]}}