{"2":{"1":[{"1":"goog.html.SafeStyleSheet","5":{"1":"closure/goog/html/safestylesheet.js","2":75,"3":"https://github.com/google/closure-library/blob/master/closure/goog/html/safestylesheet.js#L75"},"7":{"1":[{"2":"<p>A string-like object which represents a CSS style sheet and that carries the\nsecurity type contract that its value, as a string, will not cause untrusted\nscript execution (XSS) when evaluated as CSS in a browser.</p>\n<p>Instances of this type must be created via the factory method\n<code>goog.html.SafeStyleSheet.fromConstant</code> and not by invoking its\nconstructor. The constructor intentionally takes no parameters and the type\nis immutable; hence only a default instance corresponding to the empty string\ncan be obtained via constructor invocation.</p>\n<p>A SafeStyleSheet&#39;s string representation can safely be interpolated as the\ncontent of a style element within HTML. The SafeStyleSheet string should\nnot be escaped before interpolation.</p>\n<p>Values of this type must be composable, i.e. for any two values\n<code>styleSheet1</code> and <code>styleSheet2</code> of this type,\n<code>goog.html.SafeStyleSheet.unwrap(styleSheet1) &#43;\ngoog.html.SafeStyleSheet.unwrap(styleSheet2)</code> must itself be a value that\nsatisfies the SafeStyleSheet type constraint. This requirement implies that\nfor any value <code>styleSheet</code> of this type,\n<code>goog.html.SafeStyleSheet.unwrap(styleSheet1)</code> must end in\n&#34;beginning of rule&#34; context.</p>\n<p>A SafeStyleSheet can be constructed via security-reviewed unchecked\nconversions. In this case producers of SafeStyleSheet must ensure themselves\nthat the SafeStyleSheet does not contain unsafe script. Note in particular\nthat <code>&amp;lt;</code> is dangerous, even when inside CSS strings, and so should\nalways be forbidden or CSS-escaped in user controlled input. For example, if\n<code>&amp;lt;/style&amp;gt;&amp;lt;script&amp;gt;evil&amp;lt;/script&amp;gt;&#34;</code> were interpolated\ninside a CSS string, it would break out of the context of the original\nstyle element and <code>evil</code> would execute. Also note that within an HTML\nstyle (raw text) element, HTML character references, such as\n<code>&amp;amp;lt;</code>, are not allowed. See</p>\n<p>http://www.w3.org/TR/html5/scripting-1.html#restrictions-for-contents-of-script-elements\n(similar considerations apply to the style element).</p>\n"}]},"8":{"4":true,"7":true},"12":[{"1":{"1":"SafeStyleSheet.concat","2":{"1":"closure/goog/html/safestylesheet.js","2":117,"3":"https://github.com/google/closure-library/blob/master/closure/goog/html/safestylesheet.js#L117"},"3":{"1":[{"2":"<p>Creates a new SafeStyleSheet object by concatenating values.</p>\n"}]}},"4":[{"1":"var_args","2":{"2":true,"6":{"1":[{"4":{"1":"goog.html.SafeStyleSheet","3":{"1":"goog.html.SafeStyleSheet.html"}}},{"4":{"1":"Array","4":true,"5":[{"4":{"1":"goog.html.SafeStyleSheet","3":{"1":"goog.html.SafeStyleSheet.html"}}}]}}]}},"3":{"1":[{"2":"<p>Values to concatenate.</p>\n"}]}}],"5":{"2":{"4":{"1":"goog.html.SafeStyleSheet","3":{"1":"goog.html.SafeStyleSheet.html"}}}}},{"1":{"1":"SafeStyleSheet.createSafeStyleSheetSecurityPrivateDoNotAccessOrElse","2":{"1":"closure/goog/html/safestylesheet.js","2":250,"3":"https://github.com/google/closure-library/blob/master/closure/goog/html/safestylesheet.js#L250"},"3":{"1":[{"2":"<p>Package-internal utility method to create SafeStyleSheet instances.</p>\n"}]},"5":3},"4":[{"1":"styleSheet","2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>The string to initialize the SafeStyleSheet\nobject with.</p>\n"}]}}],"5":{"2":{"4":{"1":"goog.html.SafeStyleSheet","3":{"1":"goog.html.SafeStyleSheet.html"}}},"3":{"1":[{"2":"<p>The initialized SafeStyleSheet object.</p>\n"}]}}},{"1":{"1":"SafeStyleSheet.fromConstant","2":{"1":"closure/goog/html/safestylesheet.js","2":149,"3":"https://github.com/google/closure-library/blob/master/closure/goog/html/safestylesheet.js#L149"},"3":{"1":[{"2":"<p>Creates a SafeStyleSheet object from a compile-time constant string.</p>\n<p><code>styleSheet</code> must not have any &lt; characters in it, so that\nthe syntactic structure of the surrounding HTML is not affected.</p>\n"}]}},"4":[{"1":"styleSheet","2":{"4":{"1":"goog.string.Const","3":{"1":"goog.string.Const.html"}}},"3":{"1":[{"2":"<p>A compile-time-constant string from\nwhich to create a SafeStyleSheet.</p>\n"}]}}],"5":{"2":{"4":{"1":"goog.html.SafeStyleSheet","3":{"1":"goog.html.SafeStyleSheet.html"}}},"3":{"1":[{"2":"<p>A SafeStyleSheet object initialized to\n<code>styleSheet</code>.</p>\n"}]}}},{"1":{"1":"SafeStyleSheet.unwrap","2":{"1":"closure/goog/html/safestylesheet.js","2":217,"3":"https://github.com/google/closure-library/blob/master/closure/goog/html/safestylesheet.js#L217"},"3":{"1":[{"2":"<p>Performs a runtime check that the provided object is indeed a\nSafeStyleSheet object, and returns its value.</p>\n"}]}},"4":[{"1":"safeStyleSheet","2":{"4":{"1":"goog.html.SafeStyleSheet","3":{"1":"goog.html.SafeStyleSheet.html"}}},"3":{"1":[{"2":"<p>The object to extract from.</p>\n"}]}}],"5":{"2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>The safeStyleSheet object&#39;s contained string, unless\nthe run-time type check fails. In that case, <code>unwrap</code> returns an\ninnocuous string, or, if assertions are enabled, throws\n<code>goog.asserts.AssertionError</code>.</p>\n"}]}}}],"13":[{"1":{"1":"SafeStyleSheet.EMPTY","2":{"1":"closure/goog/html/safestylesheet.js","2":276,"3":"https://github.com/google/closure-library/blob/master/closure/goog/html/safestylesheet.js#L276"},"3":{"1":[{"2":"<p>A SafeStyleSheet instance corresponding to the empty string.</p>\n"}]},"6":{"1":true}},"2":{"4":{"1":"goog.html.SafeStyleSheet","3":{"1":"goog.html.SafeStyleSheet.html"}}}}],"14":{"1":{"1":"SafeStyleSheet","2":{"1":"closure/goog/html/safestylesheet.js","2":75,"3":"https://github.com/google/closure-library/blob/master/closure/goog/html/safestylesheet.js#L75"},"3":{"1":[{"2":"<p>A string-like object which represents a CSS style sheet and that carries the\nsecurity type contract that its value, as a string, will not cause untrusted\nscript execution (XSS) when evaluated as CSS in a browser.</p>\n<p>Instances of this type must be created via the factory method\n<code>goog.html.SafeStyleSheet.fromConstant</code> and not by invoking its\nconstructor. The constructor intentionally takes no parameters and the type\nis immutable; hence only a default instance corresponding to the empty string\ncan be obtained via constructor invocation.</p>\n<p>A SafeStyleSheet&#39;s string representation can safely be interpolated as the\ncontent of a style element within HTML. The SafeStyleSheet string should\nnot be escaped before interpolation.</p>\n<p>Values of this type must be composable, i.e. for any two values\n<code>styleSheet1</code> and <code>styleSheet2</code> of this type,\n<code>goog.html.SafeStyleSheet.unwrap(styleSheet1) &#43;\ngoog.html.SafeStyleSheet.unwrap(styleSheet2)</code> must itself be a value that\nsatisfies the SafeStyleSheet type constraint. This requirement implies that\nfor any value <code>styleSheet</code> of this type,\n<code>goog.html.SafeStyleSheet.unwrap(styleSheet1)</code> must end in\n&#34;beginning of rule&#34; context.</p>\n<p>A SafeStyleSheet can be constructed via security-reviewed unchecked\nconversions. In this case producers of SafeStyleSheet must ensure themselves\nthat the SafeStyleSheet does not contain unsafe script. Note in particular\nthat <code>&amp;lt;</code> is dangerous, even when inside CSS strings, and so should\nalways be forbidden or CSS-escaped in user controlled input. For example, if\n<code>&amp;lt;/style&amp;gt;&amp;lt;script&amp;gt;evil&amp;lt;/script&amp;gt;&#34;</code> were interpolated\ninside a CSS string, it would break out of the context of the original\nstyle element and <code>evil</code> would execute. Also note that within an HTML\nstyle (raw text) element, HTML character references, such as\n<code>&amp;amp;lt;</code>, are not allowed. See</p>\n<p>http://www.w3.org/TR/html5/scripting-1.html#restrictions-for-contents-of-script-elements\n(similar considerations apply to the style element).</p>\n"}]},"10":[{"1":[{"1":"goog.html.SafeStyleSheet#fromConstant","3":{"1":"goog.html.SafeStyleSheet.html#SafeStyleSheet.fromConstant"}}]}]},"3":true},"15":[{"1":{"1":"getTypedStringValue","2":{"1":"closure/goog/html/safestylesheet.js","2":185,"3":"https://github.com/google/closure-library/blob/master/closure/goog/html/safestylesheet.js#L185"},"3":{"1":[{"2":"<p>Returns this SafeStyleSheet&#39;s value as a string.</p>\n<p>IMPORTANT: In code where it is security relevant that an object&#39;s type is\nindeed <code>SafeStyleSheet</code>, use <code>goog.html.SafeStyleSheet.unwrap</code>\ninstead of this method. If in doubt, assume that it&#39;s security relevant. In\nparticular, note that goog.html functions which return a goog.html type do\nnot guarantee the returned instance is of the right type. For example:</p>\n <pre>\n var fakeSafeHtml &#61; new String(&#39;fake&#39;);\n fakeSafeHtml.__proto__ &#61; goog.html.SafeHtml.prototype;\n var newSafeHtml &#61; goog.html.SafeHtml.htmlEscape(fakeSafeHtml);\n // newSafeHtml is just an alias for fakeSafeHtml, it&#39;s passed through by\n // goog.html.SafeHtml.htmlEscape() as fakeSafeHtml\n // instanceof goog.html.SafeHtml.\n </pre>\n"}]},"9":[{"1":"goog.string.TypedString","3":{"1":"goog.string.TypedString.html#getTypedStringValue"}}],"10":[{"1":[{"1":"goog.html.SafeStyleSheet#unwrap","3":{"1":"goog.html.SafeStyleSheet.html#SafeStyleSheet.unwrap"}}]}]},"5":{"2":{"4":{"1":"string","4":true}},"3":{"1":[{"2":"<p>The wrapped string&#39;s value.</p>\n"}]}}},{"1":{"1":"toString","2":{"1":"closure/goog/html/safestylesheet.js","2":200,"3":"https://github.com/google/closure-library/blob/master/closure/goog/html/safestylesheet.js#L200"},"3":{"1":[{"2":"<p>Returns a debug string-representation of this value.</p>\n<p>To obtain the actual string value wrapped in a SafeStyleSheet, use\n<code>goog.html.SafeStyleSheet.unwrap</code>.</p>\n"}]},"10":[{"1":[{"1":"goog.html.SafeStyleSheet#unwrap","3":{"1":"goog.html.SafeStyleSheet.html#SafeStyleSheet.unwrap"}}]}]},"5":{"2":{"4":{"1":"string","4":true}}}}],"16":[{"1":{"1":"implementsGoogStringTypedString","2":{"1":"closure/goog/html/safestylesheet.js","2":99,"3":"https://github.com/google/closure-library/blob/master/closure/goog/html/safestylesheet.js#L99"},"3":{"1":[{"2":"<p>Interface marker of the TypedString interface.</p>\n<p>This property can be used to determine at runtime whether or not an object\nimplements this interface.  All implementations of this interface set this\nproperty to <code>true</code>.</p>\n"}]},"6":{"1":true},"9":[{"1":"goog.string.TypedString","3":{"1":"goog.string.TypedString.html#implementsGoogStringTypedString"}}]},"2":{"4":{"1":"boolean","4":true}}}],"19":[{"1":"goog.string.TypedString","3":{"1":"goog.string.TypedString.html"}}],"21":{"1":{"1":"goog.html.SafeStyleSheet","3":{"1":"goog.html.SafeStyleSheet.html"}},"2":4},"23":"goog.html.SafeStyleSheet.html","24":"goog.html.SafeStyleSheet"}]}}