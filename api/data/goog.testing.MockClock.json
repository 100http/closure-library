[null,[[["goog.testing.MockClock",null,null,null,[null,62,null,[null,null,"closure/goog/testing/mockclock.js"],[null,null,"https://github.com/google/closure-library/blob/master/closure/goog/testing/mockclock.js#L62"]],null,[[[null,"<p>Class for unit testing code that uses setTimeout and clearTimeout.</p>\n<p>NOTE: If you are using MockClock to test code that makes use of\ngoog.fx.Animation, then you must either:</p>\n<ol><li>Install and dispose of the MockClock in setUpPage() and tearDownPage()\nrespectively (rather than setUp()/tearDown()).</li></ol>\n<p>or</p>\n<ol start=\"2\"><li>Ensure that every test clears the animation queue by calling\nmockClock.tick(x) at the end of each test function (where <code>x</code> is large\nenough to complete all animations).</li></ol>\n<p>Otherwise, if any animation is left pending at the time that\nMockClock.dispose() is called, that will permanently prevent any future\nanimations from playing on the page.</p>\n"]]],[null,null,null,1],null,[[["MockClock.QueueObjType_",[null,101,null,[null,null,"closure/goog/testing/mockclock.js"],[null,null,"https://github.com/google/closure-library/blob/master/closure/goog/testing/mockclock.js#L101"]],[[]],null,null,null,null,null,[],[]],[null,null,null,null,[[["funcToCall",[null,null,null,null,null,[[[null,null,null,["Function",null,null,null,[]]],[null,null,null,null,null,null,null,null,null,1]]]]],["millis",[null,null,null,["number",null,null,1,[]]]],["recurring",[null,null,null,["boolean",null,null,1,[]]]],["runAtMillis",[null,null,null,["number",null,null,1,[]]]],["timeoutKey",[null,null,null,["number",null,null,1,[]]]]]]]]],null,[],[[["MockClock.REQUEST_ANIMATION_FRAME_TIMEOUT",[null,109,null,[null,null,"closure/goog/testing/mockclock.js"],[null,null,"https://github.com/google/closure-library/blob/master/closure/goog/testing/mockclock.js#L109"]],[[[null,"<p>Default wait timeout for mocking requestAnimationFrame (in milliseconds).</p>\n"]]],null,null,[1],null,null,[],[]],[null,null,null,["number",null,null,1,[]]]],[["MockClock.nextId",[null,117,null,[null,null,"closure/goog/testing/mockclock.js"],[null,null,"https://github.com/google/closure-library/blob/master/closure/goog/testing/mockclock.js#L117"]],[[[null,"<p>ID to use for next timeout.  Timeout IDs must never be reused, even across\nMockClock instances.</p>\n"]]],null,null,null,null,null,[],[]],[null,null,null,["number",null,null,1,[]]]]],[["MockClock",[null,62,null,[null,null,"closure/goog/testing/mockclock.js"],[null,null,"https://github.com/google/closure-library/blob/master/closure/goog/testing/mockclock.js#L62"]],[[[null,"<p>Class for unit testing code that uses setTimeout and clearTimeout.</p>\n<p>NOTE: If you are using MockClock to test code that makes use of\ngoog.fx.Animation, then you must either:</p>\n<ol><li>Install and dispose of the MockClock in setUpPage() and tearDownPage()\nrespectively (rather than setUp()/tearDown()).</li></ol>\n<p>or</p>\n<ol start=\"2\"><li>Ensure that every test clears the animation queue by calling\nmockClock.tick(x) at the end of each test function (where <code>x</code> is large\nenough to complete all animations).</li></ol>\n<p>Otherwise, if any animation is left pending at the time that\nMockClock.dispose() is called, that will permanently prevent any future\nanimations from playing on the page.</p>\n"]]],null,null,null,null,null,[],[]],[],1,[["opt_autoInstall",[1,null,null,null,null,[[[null,null,null,["boolean",null,null,1,[]]],[null,null,null,null,null,null,null,null,1]]]],[[[null,"<p>Install the MockClock at construction time.</p>\n"]]]]],null,[]],[[["addOnDisposeCallback",[null,221,null,[null,null,"closure/goog/disposable/disposable.js"],[null,null,"https://github.com/google/closure-library/blob/master/closure/goog/disposable/disposable.js#L221"]],[[[null,"<p>Invokes a callback function when this object is disposed. Callbacks are\ninvoked in the order in which they were added. If a callback is added to\nan already disposed Disposable, it will be called immediately.</p>\n"]]],null,null,null,["goog.Disposable",null,[null,null,[null,null,"goog.Disposable.html#addOnDisposeCallback"]],null,[]],null,[],[]],["T"],null,[["callback",[null,null,[null,[null,null,null,null,null,[[[null,null,null,["T",null,null,null,[]]],[null,null,null,null,null,null,null,null,null,1]]]],[],[null,null,null,null,null,null,null,1]]],[[[null,"<p>The callback function.</p>\n"]]]],["opt_scope",[1,null,null,null,null,[[[null,null,null,["T",null,null,null,[]]],[null,null,null,null,null,null,null,null,null,1],[null,null,null,null,null,null,null,null,1]]]],[[[null,"<p>An optional scope to call the callback in.</p>\n"]]]]],null,[]],[["dispose",[null,39,null,[null,null,"closure/goog/disposable/idisposable.js"],[null,null,"https://github.com/google/closure-library/blob/master/closure/goog/disposable/idisposable.js#L39"]],[[[null,"<p>Disposes of the object and its resources.</p>\n"]]],null,null,null,null,["goog.Disposable",null,[null,null,[null,null,"goog.Disposable.html#dispose"]],null,[]],[],[]],[],null,[],[null,null,[[[null,"<p>Nothing.</p>\n"]]]],[]],[["disposeInternal",[null,269,null,[null,null,"closure/goog/testing/mockclock.js"],[null,null,"https://github.com/google/closure-library/blob/master/closure/goog/testing/mockclock.js#L269"]],[[[null,"<p>Deletes or nulls out any references to COM objects, DOM nodes, or other\ndisposable objects. Classes that extend <code>goog.Disposable</code> should\noverride this method.\nNot reentrant. To avoid calling it twice, it must only be called from the\nsubclass&#39; <code>disposeInternal</code> method. Everywhere else the public\n<code>dispose</code> method must be used.\nFor example:</p>\n <pre>\n   mypackage.MyClass &#61; function() {\n     mypackage.MyClass.base(this, &#39;constructor&#39;);\n     // Constructor logic specific to MyClass.\n     ...\n   };\n   goog.inherits(mypackage.MyClass, goog.Disposable);\n\n   mypackage.MyClass.prototype.disposeInternal &#61; function() {\n     // Dispose logic specific to MyClass.\n     ...\n     // Call superclass&#39;s disposeInternal at the end of the subclass&#39;s, like\n     // in C&#43;&#43;, to avoid hard-to-catch issues.\n     mypackage.MyClass.base(this, &#39;disposeInternal&#39;);\n   };\n </pre>\n"]]],null,null,null,null,["goog.Disposable",null,[null,null,[null,null,"goog.Disposable.html#disposeInternal"]],null,[]],[],[],[null,1]],[],null,[],null,[]],[["getCallbacksTriggered",[null,394,null,[null,null,"closure/goog/testing/mockclock.js"],[null,null,"https://github.com/google/closure-library/blob/master/closure/goog/testing/mockclock.js#L394"]],[[]],null,null,null,null,null,[],[]],[],null,[],[null,[null,null,null,["number",null,null,1,[]]],[[[null,"<p>The number of timeout or interval callbacks that have been\ntriggered. For setInterval, each callback is counted separately.</p>\n"]]]],[]],[["getCurrentTime",[null,402,null,[null,null,"closure/goog/testing/mockclock.js"],[null,null,"https://github.com/google/closure-library/blob/master/closure/goog/testing/mockclock.js#L402"]],[[]],null,null,null,null,null,[],[]],[],null,[],[null,[null,null,null,["number",null,null,1,[]]],[[[null,"<p>The MockClock&#39;s current time in milliseconds.</p>\n"]]]],[]],[["getDisposed",[null,160,null,[null,null,"closure/goog/disposable/disposable.js"],[null,null,"https://github.com/google/closure-library/blob/master/closure/goog/disposable/disposable.js#L160"]],[[]],[[[null,"<p>Use <a href=\"goog.testing.MockClock.html#isDisposed\"><code>#isDisposed</code></a> instead.</p>\n"]]],null,[null,1],["goog.Disposable",null,[null,null,[null,null,"goog.Disposable.html#getDisposed"]],null,[]],null,[],[]],[],null,[],[null,[null,null,null,["boolean",null,null,1,[]]],[[[null,"<p>Whether the object has been disposed of.</p>\n"]]]],[]],[["getTimeoutDelay",[null,317,null,[null,null,"closure/goog/testing/mockclock.js"],[null,null,"https://github.com/google/closure-library/blob/master/closure/goog/testing/mockclock.js#L317"]],[[]],null,null,null,null,null,[],[]],[],null,[],[null,[null,null,null,["number",null,null,1,[]]],[[[null,"<p>delay The amount of time between when a timeout is\nscheduled to fire and when it actually fires, in milliseconds.  May\nbe negative.</p>\n"]]]],[]],[["getTimeoutsMade",[null,385,null,[null,null,"closure/goog/testing/mockclock.js"],[null,null,"https://github.com/google/closure-library/blob/master/closure/goog/testing/mockclock.js#L385"]],[[]],null,null,null,null,null,[],[]],[],null,[],[null,[null,null,null,["number",null,null,1,[]]],[[[null,"<p>The number of timeouts or intervals that have been\nscheduled. A setInterval call is only counted once.</p>\n"]]]],[]],[["install",[null,180,null,[null,null,"closure/goog/testing/mockclock.js"],[null,null,"https://github.com/google/closure-library/blob/master/closure/goog/testing/mockclock.js#L180"]],[[[null,"<p>Installs the MockClock by overriding the global object&#39;s implementation of\nsetTimeout, setInterval, clearTimeout and clearInterval.</p>\n"]]],null,null,null,null,null,[],[]],[],null,[],null,[]],[["isDisposed",[null,45,null,[null,null,"closure/goog/disposable/idisposable.js"],[null,null,"https://github.com/google/closure-library/blob/master/closure/goog/disposable/idisposable.js#L45"]],[[]],null,null,null,null,["goog.Disposable",null,[null,null,[null,null,"goog.Disposable.html#isDisposed"]],null,[]],[],[]],[],null,[],[null,[null,null,null,["boolean",null,null,1,[]]],[[[null,"<p>Whether the object has been disposed of.</p>\n"]]]],[]],[["isTimeoutSet",[null,416,null,[null,null,"closure/goog/testing/mockclock.js"],[null,null,"https://github.com/google/closure-library/blob/master/closure/goog/testing/mockclock.js#L416"]],[[]],null,null,null,null,null,[],[]],[],null,[["timeoutKey",[null,null,null,["number",null,null,1,[]]],[[[null,"<p>The timeout key.</p>\n"]]]]],[null,[null,null,null,["boolean",null,null,1,[]]],[[[null,"<p>Whether the timer has been set and not cleared,\nindependent of the timeout&#39;s expiration.  In other words, the timeout\ncould have passed or could be scheduled for the future.  Either way,\nthis function returns true or false depending only on whether the\nprovided timeoutKey represents a timeout that has been set and not\ncleared.</p>\n"]]]],[]],[["oldGoogNow_",[null,174,null,[null,null,"closure/goog/testing/mockclock.js"],[null,null,"https://github.com/google/closure-library/blob/master/closure/goog/testing/mockclock.js#L174"]],[[]],null,null,null,null,null,[],[]],[],null,[],[null,[null,null,null,["number",null,null,1,[]]]],[]],[["registerDisposable",[null,208,null,[null,null,"closure/goog/disposable/disposable.js"],[null,null,"https://github.com/google/closure-library/blob/master/closure/goog/disposable/disposable.js#L208"]],[[[null,"<p>Associates a disposable object with this object so that they will be disposed\ntogether.</p>\n"]]],null,null,null,["goog.Disposable",null,[null,null,[null,null,"goog.Disposable.html#registerDisposable"]],null,[]],null,[],[]],[],null,[["disposable",[null,null,null,null,null,[[[null,null,null,["goog.disposable.IDisposable",null,[null,null,[null,null,"goog.disposable.IDisposable.html"]],null,[]]],[null,null,null,null,null,null,null,null,null,1]]]],[[[null,"<p>that will be disposed when\nthis object is disposed.</p>\n"]]]]],null,[]],[["reset",[null,281,null,[null,null,"closure/goog/testing/mockclock.js"],[null,null,"https://github.com/google/closure-library/blob/master/closure/goog/testing/mockclock.js#L281"]],[[[null,"<p>Resets the MockClock, removing all timeouts that are scheduled and resets\nthe fake timer count.</p>\n"]]],null,null,null,null,null,[],[]],[],null,[],null,[]],[["setTimeoutDelay",[null,307,null,[null,null,"closure/goog/testing/mockclock.js"],[null,null,"https://github.com/google/closure-library/blob/master/closure/goog/testing/mockclock.js#L307"]],[[[null,"<p>Sets the amount of time between when a timeout is scheduled to fire and when\nit actually fires.</p>\n"]]],null,null,null,null,null,[],[]],[],null,[["delay",[null,null,null,["number",null,null,1,[]]],[[[null,"<p>The delay in milliseconds.  May be negative.</p>\n"]]]]],null,[]],[["tick",[null,329,null,[null,null,"closure/goog/testing/mockclock.js"],[null,null,"https://github.com/google/closure-library/blob/master/closure/goog/testing/mockclock.js#L329"]],[[[null,"<p>Increments the MockClock&#39;s time by a given number of milliseconds, running\nany functions that are now overdue.</p>\n"]]],null,null,null,null,null,[],[]],[],null,[["opt_millis",[1,null,null,null,null,[[[null,null,null,["number",null,null,1,[]]],[null,null,null,null,null,null,null,null,1]]]],[[[null,"<p>Number of milliseconds to increment the counter.\nIf not specified, clock ticks 1 millisecond.</p>\n"]]]]],[null,[null,null,null,["number",null,null,1,[]]],[[[null,"<p>Current mock time in milliseconds.</p>\n"]]]],[]],[["tickPromise",[null,356,null,[null,null,"closure/goog/testing/mockclock.js"],[null,null,"https://github.com/google/closure-library/blob/master/closure/goog/testing/mockclock.js#L356"]],[[[null,"<p>Takes a promise and then ticks the mock clock. If the promise successfully\nresolves, returns the value produced by the promise. If the promise is\nrejected, it throws the rejection as an exception. If the promise is not\nresolved at all, throws an exception.\nAlso ticks the general clock by the specified amount.\nOnly works with goog.Thenable, hence goog.Promise. Does NOT work with native\nbrowser promises.</p>\n"]]],null,null,null,null,null,[],[]],["T"],null,[["promise",[null,null,null,["goog.Thenable",null,[null,null,[null,null,"goog.Thenable.html"]],null,[[null,null,null,null,null,[[[null,null,null,["T",null,null,null,[]]],[null,null,null,null,null,null,null,null,null,1]]]]]]],[[[null,"<p>A promise that should be resolved after\nthe mockClock is ticked for the given opt_millis.</p>\n"]]]],["opt_millis",[1,null,null,null,null,[[[null,null,null,["number",null,null,1,[]]],[null,null,null,null,null,null,null,null,1]]]],[[[null,"<p>Number of milliseconds to increment the counter.\nIf not specified, clock ticks 1 millisecond.</p>\n"]]]]],[null,[null,null,null,["T",null,null,null,[]]]],[]],[["uninstall",[null,257,null,[null,null,"closure/goog/testing/mockclock.js"],[null,null,"https://github.com/google/closure-library/blob/master/closure/goog/testing/mockclock.js#L257"]],[[[null,"<p>Removes the MockClock&#39;s hooks into the global object&#39;s functions and revert\nto their original values.</p>\n"]]],null,null,null,null,null,[],[]],[],null,[],null,[]]],[[["creationStack",[null,44,null,[null,null,"closure/goog/disposable/disposable.js"],[null,null,"https://github.com/google/closure-library/blob/master/closure/goog/disposable/disposable.js#L44"]],[[[null,"<p>If monitoring the goog.Disposable instances is enabled, stores the creation\nstack trace of the Disposable instance.</p>\n"]]],null,null,null,["goog.Disposable",null,[null,null,[null,null,"goog.Disposable.html#creationStack"]],null,[]],null,[],[]],[null,null,null,null,null,[[[null,null,null,["string",null,null,1,[]]],[null,null,null,null,null,null,null,null,1]]]]]],null,[["goog.Disposable",null,[null,null,[null,null,"goog.Disposable.html"]],null,[]]],[["goog.disposable.IDisposable",null,[null,null,[null,null,"goog.disposable.IDisposable.html"]],null,[]]],[],[["goog.testing.MockClock",null,[null,null,[null,null,"goog.testing.MockClock.html"]],null,[]],null,null,1],null,"goog.testing.MockClock.html","goog.testing.MockClock",[],[],[],[]]]]]