{"2":{"1":[{"1":"goog.html.SafeScript","5":{"1":"closure/goog/html/safescript.js","2":69,"3":"https://github.com/google/closure-library/blob/master/closure/goog/html/safescript.js#L69"},"7":{"1":[{"2":"<p>A string-like object which represents JavaScript code and that carries the\nsecurity type contract that its value, as a string, will not cause execution\nof unconstrained attacker controlled code (XSS) when evaluated as JavaScript\nin a browser.</p>\n<p>Instances of this type must be created via the factory method\n<code>goog.html.SafeScript.fromConstant</code> and not by invoking its\nconstructor. The constructor intentionally takes no parameters and the type\nis immutable; hence only a default instance corresponding to the empty string\ncan be obtained via constructor invocation.</p>\n<p>A SafeScript&#39;s string representation can safely be interpolated as the\ncontent of a script element within HTML. The SafeScript string should not be\nescaped before interpolation.</p>\n<p>Note that the SafeScript might contain text that is attacker-controlled but\nthat text should have been interpolated with appropriate escaping,\nsanitization and/or validation into the right location in the script, such\nthat it is highly constrained in its effect (for example, it had to match a\nset of whitelisted words).</p>\n<p>A SafeScript can be constructed via security-reviewed unchecked\nconversions. In this case producers of SafeScript must ensure themselves that\nthe SafeScript does not contain unsafe script. Note in particular that\n<code>&amp;lt;</code> is dangerous, even when inside JavaScript strings, and so should\nalways be forbidden or JavaScript escaped in user controlled input. For\nexample, if <code>&amp;lt;/script&amp;gt;&amp;lt;script&amp;gt;evil&amp;lt;/script&amp;gt;&#34;</code> were\ninterpolated inside a JavaScript string, it would break out of the context\nof the original script element and <code>evil</code> would execute. Also note\nthat within an HTML script (raw text) element, HTML character references,\nsuch as &#34;&lt;&#34; are not allowed. See\nhttp://www.w3.org/TR/html5/scripting-1.html#restrictions-for-contents-of-script-elements.</p>\n"}]},"8":{"4":true,"7":true},"12":[{"1":{"1":"SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse","2":{"1":"closure/goog/html/safescript.js","2":207,"3":"https://github.com/google/closure-library/blob/master/closure/goog/html/safescript.js#L207"},"3":{"1":[{"2":"<p>Package-internal utility method to create SafeScript instances.</p>\n"}]},"5":3},"4":[{"1":"script","2":{"4":{"1":"string","3":{"1":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String"},"4":true}},"3":{"1":[{"2":"<p>The string to initialize the SafeScript object with.</p>\n"}]}}],"5":{"2":{"4":{"1":"goog.html.SafeScript","3":{"1":"goog.html.SafeScript.html"}}},"3":{"1":[{"2":"<p>The initialized SafeScript object.</p>\n"}]}}},{"1":{"1":"SafeScript.fromConstant","2":{"1":"closure/goog/html/safescript.js","2":113,"3":"https://github.com/google/closure-library/blob/master/closure/goog/html/safescript.js#L113"},"3":{"1":[{"2":"<p>Creates a SafeScript object from a compile-time constant string.</p>\n"}]}},"4":[{"1":"script","2":{"4":{"1":"goog.string.Const","3":{"1":"goog.string.Const.html"}}},"3":{"1":[{"2":"<p>A compile-time-constant string from which\nto create a SafeScript.</p>\n"}]}}],"5":{"2":{"4":{"1":"goog.html.SafeScript","3":{"1":"goog.html.SafeScript.html"}}},"3":{"1":[{"2":"<p>A SafeScript object initialized to\n<code>script</code>.</p>\n"}]}}},{"1":{"1":"SafeScript.unwrap","2":{"1":"closure/goog/html/safescript.js","2":176,"3":"https://github.com/google/closure-library/blob/master/closure/goog/html/safescript.js#L176"},"3":{"1":[{"2":"<p>Performs a runtime check that the provided object is indeed a\nSafeScript object, and returns its value.</p>\n"}]}},"4":[{"1":"safeScript","2":{"4":{"1":"goog.html.SafeScript","3":{"1":"goog.html.SafeScript.html"}}},"3":{"1":[{"2":"<p>The object to extract from.</p>\n"}]}}],"5":{"2":{"4":{"1":"string","3":{"1":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String"},"4":true}},"3":{"1":[{"2":"<p>The safeScript object&#39;s contained string, unless\nthe run-time type check fails. In that case, <code>unwrap</code> returns an\ninnocuous string, or, if assertions are enabled, throws\n<code>goog.asserts.AssertionError</code>.</p>\n"}]}}}],"13":[{"1":{"1":"SafeScript.EMPTY","2":{"1":"closure/goog/html/safescript.js","2":233,"3":"https://github.com/google/closure-library/blob/master/closure/goog/html/safescript.js#L233"},"3":{"1":[{"2":"<p>A SafeScript instance corresponding to the empty string.</p>\n"}]},"6":{"1":true}},"2":{"4":{"1":"goog.html.SafeScript","3":{"1":"goog.html.SafeScript.html"}}}}],"14":{"1":{"1":"SafeScript","2":{"1":"closure/goog/html/safescript.js","2":69,"3":"https://github.com/google/closure-library/blob/master/closure/goog/html/safescript.js#L69"},"3":{"1":[{"2":"<p>A string-like object which represents JavaScript code and that carries the\nsecurity type contract that its value, as a string, will not cause execution\nof unconstrained attacker controlled code (XSS) when evaluated as JavaScript\nin a browser.</p>\n<p>Instances of this type must be created via the factory method\n<code>goog.html.SafeScript.fromConstant</code> and not by invoking its\nconstructor. The constructor intentionally takes no parameters and the type\nis immutable; hence only a default instance corresponding to the empty string\ncan be obtained via constructor invocation.</p>\n<p>A SafeScript&#39;s string representation can safely be interpolated as the\ncontent of a script element within HTML. The SafeScript string should not be\nescaped before interpolation.</p>\n<p>Note that the SafeScript might contain text that is attacker-controlled but\nthat text should have been interpolated with appropriate escaping,\nsanitization and/or validation into the right location in the script, such\nthat it is highly constrained in its effect (for example, it had to match a\nset of whitelisted words).</p>\n<p>A SafeScript can be constructed via security-reviewed unchecked\nconversions. In this case producers of SafeScript must ensure themselves that\nthe SafeScript does not contain unsafe script. Note in particular that\n<code>&amp;lt;</code> is dangerous, even when inside JavaScript strings, and so should\nalways be forbidden or JavaScript escaped in user controlled input. For\nexample, if <code>&amp;lt;/script&amp;gt;&amp;lt;script&amp;gt;evil&amp;lt;/script&amp;gt;&#34;</code> were\ninterpolated inside a JavaScript string, it would break out of the context\nof the original script element and <code>evil</code> would execute. Also note\nthat within an HTML script (raw text) element, HTML character references,\nsuch as &#34;&lt;&#34; are not allowed. See\nhttp://www.w3.org/TR/html5/scripting-1.html#restrictions-for-contents-of-script-elements.</p>\n"}]},"10":[{"1":[{"1":"goog.html.SafeScript#fromConstant","3":{"1":"goog.html.SafeScript.html#SafeScript.fromConstant"}}]}]},"3":true},"15":[{"1":{"1":"getTypedStringValue","2":{"1":"closure/goog/html/safescript.js","2":144,"3":"https://github.com/google/closure-library/blob/master/closure/goog/html/safescript.js#L144"},"3":{"1":[{"2":"<p>Returns this SafeScript&#39;s value as a string.</p>\n<p>IMPORTANT: In code where it is security relevant that an object&#39;s type is\nindeed <code>SafeScript</code>, use <code>goog.html.SafeScript.unwrap</code> instead of\nthis method. If in doubt, assume that it&#39;s security relevant. In particular,\nnote that goog.html functions which return a goog.html type do not guarantee\nthe returned instance is of the right type. For example:</p>\n <pre>\n var fakeSafeHtml &#61; new String(&#39;fake&#39;);\n fakeSafeHtml.__proto__ &#61; goog.html.SafeHtml.prototype;\n var newSafeHtml &#61; goog.html.SafeHtml.htmlEscape(fakeSafeHtml);\n // newSafeHtml is just an alias for fakeSafeHtml, it&#39;s passed through by\n // goog.html.SafeHtml.htmlEscape() as fakeSafeHtml\n // instanceof goog.html.SafeHtml.\n </pre>\n"}]},"9":[{"1":"goog.string.TypedString","3":{"1":"goog.string.TypedString.html#getTypedStringValue"}}],"10":[{"1":[{"1":"goog.html.SafeScript#unwrap","3":{"1":"goog.html.SafeScript.html#SafeScript.unwrap"}}]}]},"5":{"2":{"4":{"1":"string","3":{"1":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String"},"4":true}},"3":{"1":[{"2":"<p>The wrapped string&#39;s value.</p>\n"}]}}},{"1":{"1":"toString","2":{"1":"closure/goog/html/safescript.js","2":159,"3":"https://github.com/google/closure-library/blob/master/closure/goog/html/safescript.js#L159"},"3":{"1":[{"2":"<p>Returns a debug string-representation of this value.</p>\n<p>To obtain the actual string value wrapped in a SafeScript, use\n<code>goog.html.SafeScript.unwrap</code>.</p>\n"}]},"10":[{"1":[{"1":"goog.html.SafeScript#unwrap","3":{"1":"goog.html.SafeScript.html#SafeScript.unwrap"}}]}]},"5":{"2":{"4":{"1":"string","3":{"1":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String"},"4":true}}}}],"16":[{"1":{"1":"implementsGoogStringTypedString","2":{"1":"closure/goog/html/safescript.js","2":93,"3":"https://github.com/google/closure-library/blob/master/closure/goog/html/safescript.js#L93"},"3":{"1":[{"2":"<p>Interface marker of the TypedString interface.</p>\n<p>This property can be used to determine at runtime whether or not an object\nimplements this interface.  All implementations of this interface set this\nproperty to <code>true</code>.</p>\n"}]},"6":{"1":true},"9":[{"1":"goog.string.TypedString","3":{"1":"goog.string.TypedString.html#implementsGoogStringTypedString"}}]},"2":{"4":{"1":"boolean","3":{"1":"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean"},"4":true}}}],"19":[{"1":"goog.string.TypedString","3":{"1":"goog.string.TypedString.html"}}],"21":{"1":{"1":"goog.html","3":{"1":"goog.html.html"}}},"23":"goog.html.SafeScript.html","24":"goog.html.SafeScript"}]}}