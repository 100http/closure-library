[null,[[["goog.html.SafeScript",null,null,null,[null,69,null,[null,null,"closure/goog/html/safescript.js"],[null,null,"https://github.com/google/closure-library/blob/master/closure/goog/html/safescript.js#L69"]],null,[[[null,"<p>A string-like object which represents JavaScript code and that carries the\nsecurity type contract that its value, as a string, will not cause execution\nof unconstrained attacker controlled code (XSS) when evaluated as JavaScript\nin a browser.</p>\n<p>Instances of this type must be created via the factory method\n<code>goog.html.SafeScript.fromConstant</code> and not by invoking its\nconstructor. The constructor intentionally takes no parameters and the type\nis immutable; hence only a default instance corresponding to the empty string\ncan be obtained via constructor invocation.</p>\n<p>A SafeScript&#39;s string representation can safely be interpolated as the\ncontent of a script element within HTML. The SafeScript string should not be\nescaped before interpolation.</p>\n<p>Note that the SafeScript might contain text that is attacker-controlled but\nthat text should have been interpolated with appropriate escaping,\nsanitization and/or validation into the right location in the script, such\nthat it is highly constrained in its effect (for example, it had to match a\nset of whitelisted words).</p>\n<p>A SafeScript can be constructed via security-reviewed unchecked\nconversions. In this case producers of SafeScript must ensure themselves that\nthe SafeScript does not contain unsafe script. Note in particular that\n<code>&amp;lt;</code> is dangerous, even when inside JavaScript strings, and so should\nalways be forbidden or JavaScript escaped in user controlled input. For\nexample, if <code>&amp;lt;/script&amp;gt;&amp;lt;script&amp;gt;evil&amp;lt;/script&amp;gt;&#34;</code> were\ninterpolated inside a JavaScript string, it would break out of the context\nof the original script element and <code>evil</code> would execute. Also note\nthat within an HTML script (raw text) element, HTML character references,\nsuch as &#34;&lt;&#34; are not allowed. See\nhttp://www.w3.org/TR/html5/scripting-1.html#restrictions-for-contents-of-script-elements.</p>\n"]]],[null,null,null,1,null,null,1],null,[],null,[[["SafeScript.createSafeScriptSecurityPrivateDoNotAccessOrElse",[null,264,null,[null,null,"closure/goog/html/safescript.js"],[null,null,"https://github.com/google/closure-library/blob/master/closure/goog/html/safescript.js#L264"]],[[[null,"<p>Package-internal utility method to create SafeScript instances.</p>\n"]]],null,null,null,null,null,[],[],[null,null,null,1]],[],null,[["script",[null,null,null,["string",null,null,1,[]]],[[[null,"<p>The string to initialize the SafeScript object with.</p>\n"]]]]],[null,[null,null,null,["goog.html.SafeScript",null,[null,null,[null,null,"goog.html.SafeScript.html"]],null,[]]],[[[null,"<p>The initialized SafeScript object.</p>\n"]]]],[]],[["SafeScript.fromConstant",[null,113,null,[null,null,"closure/goog/html/safescript.js"],[null,null,"https://github.com/google/closure-library/blob/master/closure/goog/html/safescript.js#L113"]],[[[null,"<p>Creates a SafeScript object from a compile-time constant string.</p>\n"]]],null,null,null,null,null,[],[]],[],null,[["script",[null,null,null,["goog.string.Const",null,[null,null,[null,null,"goog.string.Const.html"]],null,[]]],[[[null,"<p>A compile-time-constant string from which\nto create a SafeScript.</p>\n"]]]]],[null,[null,null,null,["goog.html.SafeScript",null,[null,null,[null,null,"goog.html.SafeScript.html"]],null,[]]],[[[null,"<p>A SafeScript object initialized to\n<code>script</code>.</p>\n"]]]],[]],[["SafeScript.fromConstantAndArgs",[null,144,null,[null,null,"closure/goog/html/safescript.js"],[null,null,"https://github.com/google/closure-library/blob/master/closure/goog/html/safescript.js#L144"]],[[[null,"<p>Creates a SafeScript from a compile-time constant string but with arguments\nthat can vary at run-time. The code argument should be formatted as an\ninline function (see example below). The arguments will be JSON-encoded and\nprovided as input to the function specified in code.</p>\n<p>Example Usage:</p>\n<pre><code> let safeScript &#61; SafeScript.fromConstantAndArgs(\n     Const.from(&#39;function(arg1, arg2) { doSomething(arg1, arg2); }&#39;),\n     arg1,\n     arg2);\n</code></pre>\n<p>This produces a SafeScript equivalent to the following:</p>\n<pre><code> (function(arg1, arg2) { doSomething(arg1, arg2); })(&#34;value1&#34;, &#34;value2&#34;);\n</code></pre>\n"]]],null,null,null,null,null,[],[]],[],null,[["code",[null,null,null,["goog.string.Const",null,[null,null,[null,null,"goog.string.Const.html"]],null,[]]]],["var_args",[null,1,null,null,null,null,1]]],[null,[null,null,null,["goog.html.SafeScript",null,[null,null,[null,null,"goog.html.SafeScript.html"]],null,[]]]],[]],[["SafeScript.fromJson",[null,160,null,[null,null,"closure/goog/html/safescript.js"],[null,null,"https://github.com/google/closure-library/blob/master/closure/goog/html/safescript.js#L160"]],[[[null,"<p>Creates a SafeScript JSON representation from anything that could be passed\nto JSON.stringify.</p>\n"]]],null,null,null,null,null,[],[]],[],null,[["val",[null,null,null,null,null,null,1]]],[null,[null,null,null,["goog.html.SafeScript",null,[null,null,[null,null,"goog.html.SafeScript.html"]],null,[]]]],[]],[["SafeScript.unwrap",[null,219,null,[null,null,"closure/goog/html/safescript.js"],[null,null,"https://github.com/google/closure-library/blob/master/closure/goog/html/safescript.js#L219"]],[[[null,"<p>Performs a runtime check that the provided object is indeed a\nSafeScript object, and returns its value.</p>\n"]]],null,null,null,null,null,[],[]],[],null,[["safeScript",[null,null,null,["goog.html.SafeScript",null,[null,null,[null,null,"goog.html.SafeScript.html"]],null,[]]],[[[null,"<p>The object to extract from.</p>\n"]]]]],[null,[null,null,null,["string",null,null,1,[]]],[[[null,"<p>The safeScript object&#39;s contained string, unless\nthe run-time type check fails. In that case, <code>unwrap</code> returns an\ninnocuous string, or, if assertions are enabled, throws\n<code>goog.asserts.AssertionError</code>.</p>\n"]]]],[]]],[[["SafeScript.EMPTY",[null,290,null,[null,null,"closure/goog/html/safescript.js"],[null,null,"https://github.com/google/closure-library/blob/master/closure/goog/html/safescript.js#L290"]],[[[null,"<p>A SafeScript instance corresponding to the empty string.</p>\n"]]],null,null,[1],null,null,[],[]],[null,null,null,["goog.html.SafeScript",null,[null,null,[null,null,"goog.html.SafeScript.html"]],null,[]]]]],[["SafeScript",[null,69,null,[null,null,"closure/goog/html/safescript.js"],[null,null,"https://github.com/google/closure-library/blob/master/closure/goog/html/safescript.js#L69"]],[[[null,"<p>A string-like object which represents JavaScript code and that carries the\nsecurity type contract that its value, as a string, will not cause execution\nof unconstrained attacker controlled code (XSS) when evaluated as JavaScript\nin a browser.</p>\n<p>Instances of this type must be created via the factory method\n<code>goog.html.SafeScript.fromConstant</code> and not by invoking its\nconstructor. The constructor intentionally takes no parameters and the type\nis immutable; hence only a default instance corresponding to the empty string\ncan be obtained via constructor invocation.</p>\n<p>A SafeScript&#39;s string representation can safely be interpolated as the\ncontent of a script element within HTML. The SafeScript string should not be\nescaped before interpolation.</p>\n<p>Note that the SafeScript might contain text that is attacker-controlled but\nthat text should have been interpolated with appropriate escaping,\nsanitization and/or validation into the right location in the script, such\nthat it is highly constrained in its effect (for example, it had to match a\nset of whitelisted words).</p>\n<p>A SafeScript can be constructed via security-reviewed unchecked\nconversions. In this case producers of SafeScript must ensure themselves that\nthe SafeScript does not contain unsafe script. Note in particular that\n<code>&amp;lt;</code> is dangerous, even when inside JavaScript strings, and so should\nalways be forbidden or JavaScript escaped in user controlled input. For\nexample, if <code>&amp;lt;/script&amp;gt;&amp;lt;script&amp;gt;evil&amp;lt;/script&amp;gt;&#34;</code> were\ninterpolated inside a JavaScript string, it would break out of the context\nof the original script element and <code>evil</code> would execute. Also note\nthat within an HTML script (raw text) element, HTML character references,\nsuch as &#34;&lt;&#34; are not allowed. See\nhttp://www.w3.org/TR/html5/scripting-1.html#restrictions-for-contents-of-script-elements.</p>\n"]]],null,null,null,null,null,[],[[[["goog.html.SafeScript#fromConstant",null,[null,null,[null,null,"goog.html.SafeScript.html#SafeScript.fromConstant"]]]]]]],[],1,[],null,[]],[[["getTypedStringValue",[null,187,null,[null,null,"closure/goog/html/safescript.js"],[null,null,"https://github.com/google/closure-library/blob/master/closure/goog/html/safescript.js#L187"]],[[[null,"<p>Returns this SafeScript&#39;s value as a string.</p>\n<p>IMPORTANT: In code where it is security relevant that an object&#39;s type is\nindeed <code>SafeScript</code>, use <code>goog.html.SafeScript.unwrap</code> instead of\nthis method. If in doubt, assume that it&#39;s security relevant. In particular,\nnote that goog.html functions which return a goog.html type do not guarantee\nthe returned instance is of the right type. For example:</p>\n <pre>\n var fakeSafeHtml &#61; new String(&#39;fake&#39;);\n fakeSafeHtml.__proto__ &#61; goog.html.SafeHtml.prototype;\n var newSafeHtml &#61; goog.html.SafeHtml.htmlEscape(fakeSafeHtml);\n // newSafeHtml is just an alias for fakeSafeHtml, it&#39;s passed through by\n // goog.html.SafeHtml.htmlEscape() as fakeSafeHtml\n // instanceof goog.html.SafeHtml.\n </pre>\n"]]],null,null,null,null,null,[["goog.string.TypedString",null,[null,null,[null,null,"goog.string.TypedString.html#getTypedStringValue"]],null,[]]],[[[["goog.html.SafeScript#unwrap",null,[null,null,[null,null,"goog.html.SafeScript.html#SafeScript.unwrap"]]]]]]],[],null,[],[null,[null,null,null,["string",null,null,1,[]]],[[[null,"<p>The wrapped string&#39;s value.</p>\n"]]]],[]],[["toString",[null,202,null,[null,null,"closure/goog/html/safescript.js"],[null,null,"https://github.com/google/closure-library/blob/master/closure/goog/html/safescript.js#L202"]],[[[null,"<p>Returns a debug string-representation of this value.</p>\n<p>To obtain the actual string value wrapped in a SafeScript, use\n<code>goog.html.SafeScript.unwrap</code>.</p>\n"]]],null,null,null,null,null,[],[[[["goog.html.SafeScript#unwrap",null,[null,null,[null,null,"goog.html.SafeScript.html#SafeScript.unwrap"]]]]]]],[],null,[],[null,[null,null,null,["string",null,null,1,[]]]],[]]],[[["implementsGoogStringTypedString",[null,93,null,[null,null,"closure/goog/html/safescript.js"],[null,null,"https://github.com/google/closure-library/blob/master/closure/goog/html/safescript.js#L93"]],[[[null,"<p>Interface marker of the TypedString interface.</p>\n<p>This property can be used to determine at runtime whether or not an object\nimplements this interface.  All implementations of this interface set this\nproperty to <code>true</code>.</p>\n"]]],null,null,[1],null,null,[["goog.string.TypedString",null,[null,null,[null,null,"goog.string.TypedString.html#implementsGoogStringTypedString"]],null,[]]],[]],[null,null,null,["boolean",null,null,1,[]]]]],null,[],[["goog.string.TypedString",null,[null,null,[null,null,"goog.string.TypedString.html"]],null,[]]],[],[["goog.html.SafeScript",null,[null,null,[null,null,"goog.html.SafeScript.html"]],null,[]],null,null,1],null,"goog.html.SafeScript.html","goog.html.SafeScript",[],[],[],[]]]]]